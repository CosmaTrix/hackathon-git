/*
// Openhose Visualization SDK Kit (Bottlenose)
// ----------------------------------
// v0.1.5
//
// Copyright (c)2015 Bottlenose Inc.
//
// http://openhose.com
*/


/*!
 * Includes jQuery
 * https://jquery.com/
 *
 * Includes Underscore
 * https://underscorejs.com/
 *
 * Includes Backbone
 * https://backbonejs.com/
 *
 * Includes D3
 * https://d3js.org/
 *
 * Includes Rickshaw.js
 * http://code.shutterstock.com/rickshaw/
 *
 * Includes Moment & Moment Timezone
 * http://momentjs.com/
 */


(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(function() {
      return (factory(root));
    });
  } else {
    root.Openhose = factory(root);
  }
}(this, function(root) {
var oldD3 = root.d3;
var oldRickshaw = root.Rickshaw;
var _exports_ = {};
var oh_require = {}, oh_exports = {}, oh_module = {};
var global = this;

//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
var oh_underscore, oh_jquery, oh_d3, oh_backbone, oh_moment, oh_moment_timezone, oh_rickshaw, oh_core, oh_configure, oh_visualization_helpers_format, oh_visualization_number, oh_visualization_leaderboard, oh_visualization_pie, oh_visualization_lib_custom_hover_details, oh_lib_utils, oh_visualization_hover_mixin, oh_visualization_lib_axis_local_time, oh_visualization_lib_dots, oh_visualization_line, oh_visualization_area, oh_visualization_stacked_bar, oh_visualization_time_line, oh_visualization_table, oh_text, oh_text_templates_dot_tool_tiphtml, oh_text_templates_history_dot_tool_tiphtml, oh_visualization_lib_d3extensions, oh_visualization_motion_scatter, oh_visualization_main, oh_processor_analytics_mixin, oh_processor_number, oh_processor_leaderboard, oh_processor_pie, oh_lib_error_logger, oh_processor_line, oh_processor_area, oh_processor_time_line, oh_processor_table, oh_processor_motion_scatter, oh_processor_main, oh_models_analytics_data, oh_lib_mapping_processor, oh_lib_api, oh_lib_parse_stream, oh_models_helpers_timezone_detector, oh_models_period, oh_models_metric, oh_models_helpers_meta, oh_models_trend_metric, oh_models_stream_metric, oh_models_dimension, oh_models_main, oh_widgets_analytics_wrapper, oh_text_templates_color_listjson, oh_widgets_base, oh_widgets_number, oh_widgets_leaderboard, oh_widgets_pie, oh_widgets_line, oh_widgets_area, oh_widgets_stacked_bar, oh_widgets_table, oh_widgets_motion_scatter, oh_widgets_time_line, oh_widgets_main, oh_openhose;
(function () {
  // Baseline setup
  // --------------
  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;
  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;
  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};
  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
  // Create a safe reference to the Underscore object for use below.
  var _ = function (obj) {
    if (obj instanceof _)
      return obj;
    if (!(this instanceof _))
      return new _(obj);
    this._wrapped = obj;
  };
  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }
  // Current version.
  _.VERSION = '1.6.0';
  // Collection Functions
  // --------------------
  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function (obj, iterator, context) {
    if (obj == null)
      return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker)
          return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
          return;
      }
    }
    return obj;
  };
  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function (obj, iterator, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeMap && obj.map === nativeMap)
      return obj.map(iterator, context);
    each(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };
  var reduceError = 'Reduce of empty array with no initial value';
  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function (value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null)
      obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context)
        iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function (value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial)
      throw new TypeError(reduceError);
    return memo;
  };
  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function (obj, predicate, context) {
    var result;
    any(obj, function (value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };
  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function (obj, predicate, context) {
    var results = [];
    if (obj == null)
      return results;
    if (nativeFilter && obj.filter === nativeFilter)
      return obj.filter(predicate, context);
    each(obj, function (value, index, list) {
      if (predicate.call(context, value, index, list))
        results.push(value);
    });
    return results;
  };
  // Return all the elements for which a truth test fails.
  _.reject = function (obj, predicate, context) {
    return _.filter(obj, function (value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };
  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function (obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null)
      return result;
    if (nativeEvery && obj.every === nativeEvery)
      return obj.every(predicate, context);
    each(obj, function (value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list)))
        return breaker;
    });
    return !!result;
  };
  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function (obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null)
      return result;
    if (nativeSome && obj.some === nativeSome)
      return obj.some(predicate, context);
    each(obj, function (value, index, list) {
      if (result || (result = predicate.call(context, value, index, list)))
        return breaker;
    });
    return !!result;
  };
  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function (obj, target) {
    if (obj == null)
      return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf)
      return obj.indexOf(target) != -1;
    return any(obj, function (value) {
      return value === target;
    });
  };
  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function (obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function (value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };
  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function (obj, key) {
    return _.map(obj, _.property(key));
  };
  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function (obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };
  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function (obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };
  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };
  // Return the minimum element (or element-based computation).
  _.min = function (obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function (value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };
  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function (obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function (value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };
  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function (obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length)
        obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };
  // An internal function to generate lookup iterators.
  var lookupIterator = function (value) {
    if (value == null)
      return _.identity;
    if (_.isFunction(value))
      return value;
    return _.property(value);
  };
  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function (obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function (value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function (left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0)
          return 1;
        if (a < b || b === void 0)
          return -1;
      }
      return left.index - right.index;
    }), 'value');
  };
  // An internal function used for aggregate "group by" operations.
  var group = function (behavior) {
    return function (obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function (value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };
  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function (result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });
  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function (result, key, value) {
    result[key] = value;
  });
  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function (result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });
  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function (array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };
  // Safely create a real, live array from anything iterable.
  _.toArray = function (obj) {
    if (!obj)
      return [];
    if (_.isArray(obj))
      return slice.call(obj);
    if (obj.length === +obj.length)
      return _.map(obj, _.identity);
    return _.values(obj);
  };
  // Return the number of elements in an object.
  _.size = function (obj) {
    if (obj == null)
      return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };
  // Array Functions
  // ---------------
  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function (array, n, guard) {
    if (array == null)
      return void 0;
    if (n == null || guard)
      return array[0];
    if (n < 0)
      return [];
    return slice.call(array, 0, n);
  };
  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function (array, n, guard) {
    return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
  };
  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function (array, n, guard) {
    if (array == null)
      return void 0;
    if (n == null || guard)
      return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };
  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function (array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };
  // Trim out all falsy values from an array.
  _.compact = function (array) {
    return _.filter(array, _.identity);
  };
  // Internal implementation of a recursive `flatten` function.
  var flatten = function (input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function (value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };
  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function (array, shallow) {
    return flatten(array, shallow, []);
  };
  // Return a version of the array that does not contain the specified value(s).
  _.without = function (array) {
    return _.difference(array, slice.call(arguments, 1));
  };
  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function (array, predicate) {
    var pass = [], fail = [];
    each(array, function (elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [
      pass,
      fail
    ];
  };
  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function (array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function (value, index) {
      if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };
  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function () {
    return _.uniq(_.flatten(arguments, true));
  };
  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function (array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function (item) {
      return _.every(rest, function (other) {
        return _.contains(other, item);
      });
    });
  };
  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function (array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function (value) {
      return !_.contains(rest, value);
    });
  };
  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function () {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };
  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function (list, values) {
    if (list == null)
      return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };
  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function (array, item, isSorted) {
    if (array == null)
      return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf)
      return array.indexOf(item, isSorted);
    for (; i < length; i++)
      if (array[i] === item)
        return i;
    return -1;
  };
  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function (array, item, from) {
    if (array == null)
      return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = hasIndex ? from : array.length;
    while (i--)
      if (array[i] === item)
        return i;
    return -1;
  };
  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function (start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;
    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);
    while (idx < length) {
      range[idx++] = start;
      start += step;
    }
    return range;
  };
  // Function (ahem) Functions
  // ------------------
  // Reusable constructor function for prototype setting.
  var ctor = function () {
  };
  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function (func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind)
      return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func))
      throw new TypeError();
    args = slice.call(arguments, 2);
    return bound = function () {
      if (!(this instanceof bound))
        return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor();
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result)
        return result;
      return self;
    };
  };
  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function (func) {
    var boundArgs = slice.call(arguments, 1);
    return function () {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _)
          args[i] = arguments[position++];
      }
      while (position < arguments.length)
        args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };
  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function (obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0)
      throw new Error('bindAll must be passed function names');
    each(funcs, function (f) {
      obj[f] = _.bind(obj[f], obj);
    });
    return obj;
  };
  // Memoize an expensive function by storing its results.
  _.memoize = function (func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function () {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
    };
  };
  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function (func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function () {
      return func.apply(null, args);
    }, wait);
  };
  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function (func) {
    return _.delay.apply(_, [
      func,
      1
    ].concat(slice.call(arguments, 1)));
  };
  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function (func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function () {
      var now = _.now();
      if (!previous && options.leading === false)
        previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function (func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    var later = function () {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };
    return function () {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }
      return result;
    };
  };
  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function (func, wrapper) {
    return _.partial(wrapper, func);
  };
  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function () {
    var funcs = arguments;
    return function () {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };
  // Returns a function that will only be executed after being called N times.
  _.after = function (times, func) {
    return function () {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };
  // Object Functions
  // ----------------
  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function (obj) {
    if (!_.isObject(obj))
      return [];
    if (nativeKeys)
      return nativeKeys(obj);
    var keys = [];
    for (var key in obj)
      if (_.has(obj, key))
        keys.push(key);
    return keys;
  };
  // Retrieve the values of an object's properties.
  _.values = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };
  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function (obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [
        keys[i],
        obj[keys[i]]
      ];
    }
    return pairs;
  };
  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function (obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };
  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function (obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key]))
        names.push(key);
    }
    return names.sort();
  };
  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function (key) {
      if (key in obj)
        copy[key] = obj[key];
    });
    return copy;
  };
  // Return a copy of the object without the blacklisted properties.
  _.omit = function (obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key))
        copy[key] = obj[key];
    }
    return copy;
  };
  // Fill in a given object with default properties.
  _.defaults = function (obj) {
    each(slice.call(arguments, 1), function (source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };
  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function (obj) {
    if (!_.isObject(obj))
      return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };
  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function (obj, interceptor) {
    interceptor(obj);
    return obj;
  };
  // Internal recursive comparison function for `isEqual`.
  var eq = function (a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b)
      return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null)
      return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _)
      a = a._wrapped;
    if (b instanceof _)
      b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b))
      return false;
    switch (className) {
    // Strings, numbers, dates, and booleans are compared by value.
    case '[object String]':
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return a == String(b);
    case '[object Number]':
      // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
      // other numeric values.
      return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
    case '[object Date]':
    case '[object Boolean]':
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a == +b;
    // RegExps are compared by their source patterns and flags.
    case '[object RegExp]':
      return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object')
      return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a)
        return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack)))
            break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
            break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !size--)
            break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };
  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function (a, b) {
    return eq(a, b, [], []);
  };
  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function (obj) {
    if (obj == null)
      return true;
    if (_.isArray(obj) || _.isString(obj))
      return obj.length === 0;
    for (var key in obj)
      if (_.has(obj, key))
        return false;
    return true;
  };
  // Is a given value a DOM element?
  _.isElement = function (obj) {
    return !!(obj && obj.nodeType === 1);
  };
  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function (obj) {
    return toString.call(obj) == '[object Array]';
  };
  // Is a given variable an object?
  _.isObject = function (obj) {
    return obj === Object(obj);
  };
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each([
    'Arguments',
    'Function',
    'String',
    'Number',
    'Date',
    'RegExp'
  ], function (name) {
    _['is' + name] = function (obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });
  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function (obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }
  // Optimize `isFunction` if appropriate.
  if (typeof /./ !== 'function') {
    _.isFunction = function (obj) {
      return typeof obj === 'function';
    };
  }
  // Is a given object a finite number?
  _.isFinite = function (obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };
  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function (obj) {
    return _.isNumber(obj) && obj != +obj;
  };
  // Is a given value a boolean?
  _.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };
  // Is a given value equal to null?
  _.isNull = function (obj) {
    return obj === null;
  };
  // Is a given variable undefined?
  _.isUndefined = function (obj) {
    return obj === void 0;
  };
  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
  // Utility Functions
  // -----------------
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function () {
    root._ = previousUnderscore;
    return this;
  };
  // Keep the identity function around for default iterators.
  _.identity = function (value) {
    return value;
  };
  _.constant = function (value) {
    return function () {
      return value;
    };
  };
  _.property = function (key) {
    return function (obj) {
      return obj[key];
    };
  };
  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function (attrs) {
    return function (obj) {
      if (obj === attrs)
        return true;
      //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    };
  };
  // Run a function **n** times.
  _.times = function (n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++)
      accum[i] = iterator.call(context, i);
    return accum;
  };
  // Return a random integer between min and max (inclusive).
  _.random = function (min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };
  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function () {
    return new Date().getTime();
  };
  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);
  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };
  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each([
    'escape',
    'unescape'
  ], function (method) {
    _[method] = function (string) {
      if (string == null)
        return '';
      return ('' + string).replace(entityRegexes[method], function (match) {
        return entityMap[method][match];
      });
    };
  });
  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function (object, property) {
    if (object == null)
      return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };
  // Add your own custom functions to the Underscore object.
  _.mixin = function (obj) {
    each(_.functions(obj), function (name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function () {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };
  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function (prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };
  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };
  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;
  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    '\'': '\'',
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function (text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);
    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');
    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = '__p+=\'';
    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, function (match) {
        return '\\' + escapes[match];
      });
      if (escape) {
        source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
      }
      if (interpolate) {
        source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
      }
      if (evaluate) {
        source += '\';\n' + evaluate + '\n__p+=\'';
      }
      index = offset + match.length;
      return match;
    });
    source += '\';\n';
    // If a variable is not specified, place data values in local scope.
    if (!settings.variable)
      source = 'with(obj||{}){\n' + source + '}\n';
    source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }
    if (data)
      return render(data, _);
    var template = function (data) {
      return render.call(this, data, _);
    };
    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
    return template;
  };
  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function (obj) {
    return _(obj).chain();
  };
  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  // Helper function to continue chaining intermediate results.
  var result = function (obj) {
    return this._chain ? _(obj).chain() : obj;
  };
  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);
  // Add all mutator Array functions to the wrapper.
  each([
    'pop',
    'push',
    'reverse',
    'shift',
    'sort',
    'splice',
    'unshift'
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0)
        delete obj[0];
      return result.call(this, obj);
    };
  });
  // Add all accessor Array functions to the wrapper.
  each([
    'concat',
    'join',
    'slice'
  ], function (name) {
    var method = ArrayProto[name];
    _.prototype[name] = function () {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });
  _.extend(_.prototype, {
    // Start chaining a wrapped Underscore object.
    chain: function () {
      this._chain = true;
      return this;
    },
    // Extracts the result from a wrapped and chained object.
    value: function () {
      return this._wrapped;
    }
  });
  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    oh_underscore = function () {
      return _;
    }();
  }
}.call(this));
/*!
 * jQuery JavaScript Library v2.1.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-23T21:10Z
 */
(function (global, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    // For CommonJS and CommonJS-like environments where a proper window is present,
    // execute the factory and get jQuery
    // For environments that do not inherently posses a window with a document
    // (such as Node.js), expose a jQuery-making factory as module.exports
    // This accentuates the need for the creation of a real window
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error('jQuery requires a window with a document');
      }
      return factory(w);
    };
  } else {
    factory(global);
  }  // Pass this if window is not defined yet
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
  // Can't do this because several apps including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  // Support: Firefox 18+
  //
  var arr = [];
  var slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var trim = ''.trim;
  var support = {};
  var
    // Use the correct document accordingly with window argument (sandbox)
    document = window.document, version = '2.1.0',
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    },
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi,
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function (all, letter) {
      return letter.toUpperCase();
    };
  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // Start with an empty selector
    selector: '',
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function () {
      return slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function (num) {
      return num != null ? num < 0 ? this[num + this.length] : this[num] : // Return just the object
      slice.call(this);
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;
      // Return the newly-formed element set
      return ret;
    },
    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function (callback, args) {
      return jQuery.each(this, callback, args);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (i) {
      var len = this.length, j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  jQuery.extend = jQuery.fn.extend = function () {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      // skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !jQuery.isFunction(target)) {
      target = {};
    }
    // extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue;
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }
            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);  // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    // Return the modified object
    return target;
  };
  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function (msg) {
      throw new Error(msg);
    },
    noop: function () {
    },
    // See test/unit/core.js for details concerning isFunction.
    // Since version 1.3, DOM methods and functions like alert
    // aren't supported. They return false on IE (#2968).
    isFunction: function (obj) {
      return jQuery.type(obj) === 'function';
    },
    isArray: Array.isArray,
    isWindow: function (obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function (obj) {
      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      return obj - parseFloat(obj) >= 0;
    },
    isPlainObject: function (obj) {
      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }
      // Support: Firefox <20
      // The try/catch suppresses exceptions thrown when attempting to access
      // the "constructor" property of certain host objects, ie. |window.location|
      // https://bugzilla.mozilla.org/show_bug.cgi?id=814622
      try {
        if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
          return false;
        }
      } catch (e) {
        return false;
      }
      // If the function hasn't returned already, we're confident that
      // |obj| is a plain object, created by {} or constructed with new Object
      return true;
    },
    isEmptyObject: function (obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    type: function (obj) {
      if (obj == null) {
        return obj + '';
      }
      // Support: Android < 4.0, iOS < 6 (functionish RegExp)
      return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    },
    // Evaluates a script in a global context
    globalEval: function (code) {
      var script, indirect = eval;
      code = jQuery.trim(code);
      if (code) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf('use strict') === 1) {
          script = document.createElement('script');
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval
          indirect(code);
        }
      }
    },
    // Convert dashed to camelCase; used by the css and data modules
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function (string) {
      return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    },
    nodeName: function (elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    // args is for internal usage only
    each: function (obj, callback, args) {
      var value, i = 0, length = obj.length, isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        }  // A special, fast, case for the most common use of each
      } else {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    trim: function (text) {
      return text == null ? '' : trim.call(text);
    },
    // results is for internal usage only
    makeArray: function (arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArraylike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function (first, second) {
      var len = +second.length, j = 0, i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function (elems, callback, invert) {
      var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    // arg is for internal usage only
    map: function (elems, callback, arg) {
      var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
      // Go through the array, translating each of the items to their new values
      if (isArray) {
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }  // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }
      // Flatten any nested arrays
      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function (fn, context) {
      var tmp, args, proxy;
      if (typeof context === 'string') {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }
      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }
      // Simulated bind
      args = slice.call(arguments, 2);
      proxy = function () {
        return fn.apply(context || this, args.concat(slice.call(arguments)));
      };
      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    now: Date.now,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });
  // Populate the class2type map
  jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
  });
  function isArraylike(obj) {
    var length = obj.length, type = jQuery.type(obj);
    if (type === 'function' || jQuery.isWindow(obj)) {
      return false;
    }
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  var Sizzle = /*!
   * Sizzle CSS Selector Engine v1.10.16
   * http://sizzlejs.com/
   *
   * Copyright 2013 jQuery Foundation, Inc. and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2014-01-13
   */
  function (window) {
    var i, support, Expr, getText, isXML, compile, outermostContext, sortInput, hasDuplicate,
      // Local document vars
      setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
      // Instance-specific data
      expando = 'sizzle' + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
        if (a === b) {
          hasDuplicate = true;
        }
        return 0;
      },
      // General-purpose constants
      strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31,
      // Instance methods
      hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
      // Use a stripped-down indexOf if we can't use a native one
      indexOf = arr.indexOf || function (elem) {
        var i = 0, len = this.length;
        for (; i < len; i++) {
          if (this[i] === elem) {
            return i;
          }
        }
        return -1;
      }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
      // Regular expressions
      // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
      whitespace = '[\\x20\\t\\r\\n\\f]',
      // http://www.w3.org/TR/css3-syntax/#characters
      characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+',
      // Loosely modeled on CSS identifier characters
      // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
      // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
      identifier = characterEncoding.replace('w', 'w#'),
      // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
      attributes = '\\[' + whitespace + '*(' + characterEncoding + ')' + whitespace + '*(?:([*^$|!~]?=)' + whitespace + '*(?:([\'"])((?:\\\\.|[^\\\\])*?)\\3|(' + identifier + ')|)|)' + whitespace + '*\\]',
      // Prefer arguments quoted,
      //   then not containing pseudos/brackets,
      //   then attribute selectors/non-parenthetical expressions,
      //   then anything else
      // These preferences are here to reduce the number of selectors
      //   needing tokenize in the PSEUDO preFilter
      pseudos = ':(' + characterEncoding + ')(?:\\((([\'"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|' + attributes.replace(3, 8) + ')*)|.*)\\)|)',
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
      rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
        'ID': new RegExp('^#(' + characterEncoding + ')'),
        'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
        'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
        'ATTR': new RegExp('^' + attributes),
        'PSEUDO': new RegExp('^' + pseudos),
        'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
        'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
      }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
      rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g,
      // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
      runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
        var high = '0x' + escaped - 65536;
        // NaN means non-codepoint
        // Support: Firefox
        // Workaround erroneous numeric interpretation of +"0x"
        return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
        String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
        String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
      };
    // Optimize for push.apply( _, NodeList )
    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
      // Support: Android<4.0
      // Detect silently failing push.apply
      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length, i = 0;
          // Can't trust NodeList.length
          while (target[j++] = els[i++]) {
          }
          target.length = j - 1;
        }
      };
    }
    function Sizzle(selector, context, results, seed) {
      var match, elem, m, nodeType,
        // QSA vars
        i, groups, old, nid, newContext, newSelector;
      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
        setDocument(context);
      }
      context = context || document;
      results = results || [];
      if (!selector || typeof selector !== 'string') {
        return results;
      }
      if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
        return [];
      }
      if (documentIsHTML && !seed) {
        // Shortcuts
        if (match = rquickExpr.exec(selector)) {
          // Speed-up: Sizzle("#ID")
          if (m = match[1]) {
            if (nodeType === 9) {
              elem = context.getElementById(m);
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document (jQuery #6963)
              if (elem && elem.parentNode) {
                // Handle the case where IE, Opera, and Webkit return items
                // by name instead of ID
                if (elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } else {
                return results;
              }
            } else {
              // Context is not a document
              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                results.push(elem);
                return results;
              }
            }  // Speed-up: Sizzle("TAG")
          } else if (match[2]) {
            push.apply(results, context.getElementsByTagName(selector));
            return results;  // Speed-up: Sizzle(".CLASS")
          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
            push.apply(results, context.getElementsByClassName(m));
            return results;
          }
        }
        // QSA path
        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
          nid = old = expando;
          newContext = context;
          newSelector = nodeType === 9 && selector;
          // qSA works strangely on Element-rooted queries
          // We can work around this by specifying an extra ID on the root
          // and working up from there (Thanks to Andrew Dupont for the technique)
          // IE 8 doesn't work on object elements
          if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
            groups = tokenize(selector);
            if (old = context.getAttribute('id')) {
              nid = old.replace(rescape, '\\$&');
            } else {
              context.setAttribute('id', nid);
            }
            nid = '[id=\'' + nid + '\'] ';
            i = groups.length;
            while (i--) {
              groups[i] = nid + toSelector(groups[i]);
            }
            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            newSelector = groups.join(',');
          }
          if (newSelector) {
            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
            } finally {
              if (!old) {
                context.removeAttribute('id');
              }
            }
          }
        }
      }
      // All others
      return select(selector.replace(rtrim, '$1'), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
      var keys = [];
      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + ' ') > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }
        return cache[key + ' '] = value;
      }
      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */
    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created div and expects a boolean result
     */
    function assert(fn) {
      var div = document.createElement('div');
      try {
        return !!fn(div);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (div.parentNode) {
          div.parentNode.removeChild(div);
        }
        // release memory in IE
        div = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */
    function addHandle(attrs, handler) {
      var arr = attrs.split('|'), i = attrs.length;
      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */
    function siblingCheck(a, b) {
      var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
      // Use IE sourceIndex if available on both nodes
      if (diff) {
        return diff;
      }
      // Check if b follows a
      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }
      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === 'input' && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === 'input' || name === 'button') && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
          // Match elements found at the specified indexes
          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext(context) {
      return context && typeof context.getElementsByTagName !== strundefined && context;
    }
    // Expose support vars for convenience
    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */
    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== 'HTML' : false;
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
      // If no document and documentElement is available, return
      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      }
      // Set our document
      document = doc;
      docElem = doc.documentElement;
      // Support tests
      documentIsHTML = !isXML(doc);
      // Support: IE>8
      // If iframe document is assigned to "document" variable and if iframe has been reloaded,
      // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
      // IE6-8 do not support the defaultView property so parent will be undefined
      if (parent && parent !== parent.top) {
        // IE11 does not have attachEvent, so all must suffer
        if (parent.addEventListener) {
          parent.addEventListener('unload', function () {
            setDocument();
          }, false);
        } else if (parent.attachEvent) {
          parent.attachEvent('onunload', function () {
            setDocument();
          });
        }
      }
      /* Attributes
      	---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
      support.attributes = assert(function (div) {
        div.className = 'i';
        return !div.getAttribute('className');
      });
      /* getElement(s)By*
      	---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements
      support.getElementsByTagName = assert(function (div) {
        div.appendChild(doc.createComment(''));
        return !div.getElementsByTagName('*').length;
      });
      // Check if getElementsByClassName can be trusted
      support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function (div) {
        div.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>';
        // Support: Safari<4
        // Catch class over-caching
        div.firstChild.className = 'i';
        // Support: Opera<10
        // Catch gEBCN failure to find non-leading classes
        return div.getElementsByClassName('i').length === 2;
      });
      // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programatically-set names,
      // so use a roundabout getElementsByName test
      support.getById = assert(function (div) {
        docElem.appendChild(div).id = expando;
        return !doc.getElementsByName || !doc.getElementsByName(expando).length;
      });
      // ID find and filter
      if (support.getById) {
        Expr.find['ID'] = function (id, context) {
          if (typeof context.getElementById !== strundefined && documentIsHTML) {
            var m = context.getElementById(id);
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            return m && m.parentNode ? [m] : [];
          }
        };
        Expr.filter['ID'] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute('id') === attrId;
          };
        };
      } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find['ID'];
        Expr.filter['ID'] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
            return node && node.value === attrId;
          };
        };
      }
      // Tag
      Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== strundefined) {
          return context.getElementsByTagName(tag);
        }
      } : function (tag, context) {
        var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
        // Filter out possible comments
        if (tag === '*') {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }
          return tmp;
        }
        return results;
      };
      // Class
      Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      	---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
      rbuggyMatches = [];
      // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See http://bugs.jquery.com/ticket/13378
      rbuggyQSA = [];
      if (support.qsa = rnative.test(doc.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (div) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // http://bugs.jquery.com/ticket/12359
          div.innerHTML = '<select t=\'\'><option selected=\'\'></option></select>';
          // Support: IE8, Opera 10-12
          // Nothing should be selected when empty strings follow ^= or $= or *=
          if (div.querySelectorAll('[t^=\'\']').length) {
            rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
          }
          // Support: IE8
          // Boolean attributes and "value" are not treated correctly
          if (!div.querySelectorAll('[selected]').length) {
            rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
          }
          // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(':checked').length) {
            rbuggyQSA.push(':checked');
          }
        });
        assert(function (div) {
          // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment
          var input = doc.createElement('input');
          input.setAttribute('type', 'hidden');
          div.appendChild(input).setAttribute('name', 'D');
          // Support: IE8
          // Enforce case-sensitivity of name attribute
          if (div.querySelectorAll('[name=d]').length) {
            rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
          }
          // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests
          if (!div.querySelectorAll(':enabled').length) {
            rbuggyQSA.push(':enabled', ':disabled');
          }
          // Opera 10-11 does not throw on post-comma invalid pseudos
          div.querySelectorAll('*,:x');
          rbuggyQSA.push(',.*:');
        });
      }
      if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (div) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(div, 'div');
          // This should fail with an exception
          // Gecko does not error, returns false instead
          matches.call(div, '[s!=\'\']:x');
          rbuggyMatches.push('!=', pseudos);
        });
      }
      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
      /* Contains
      	---------------------------------------------------------------------- */
      hasCompare = rnative.test(docElem.compareDocumentPosition);
      // Element contains another
      // Purposefully does not implement inclusive descendent
      // As in, an element does not contain itself
      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }
        return false;
      };
      /* Sorting
      	---------------------------------------------------------------------- */
      // Document order sorting
      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }
        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if (compare) {
          return compare;
        }
        // Calculate position if both inputs belong to the same document
        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1;
        // Disconnected nodes
        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }
          if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          }
          // Maintain original order
          return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
        }
        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }
        var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
        // Parentless nodes are either documents or disconnected
        if (!aup || !bup) {
          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;  // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        }
        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }
        cur = b;
        while (cur = cur.parentNode) {
          bp.unshift(cur);
        }
        // Walk down the tree looking for a discrepancy
        while (ap[i] === bp[i]) {
          i++;
        }
        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return doc;
    };
    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };
    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }
      // Make sure that attribute selectors are quoted
      expr = expr.replace(rattributeQuotes, '=\'$1\']');
      if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr);
          // IE 9's matchesSelector returns false on disconnected nodes
          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
            // fragment in IE 9
            elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
        }
      }
      return Sizzle(expr, document, null, [elem]).length > 0;
    };
    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }
      return contains(context, elem);
    };
    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }
      var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };
    Sizzle.error = function (msg) {
      throw new Error('Syntax error, unrecognized expression: ' + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    Sizzle.uniqueSort = function (results) {
      var elem, duplicates = [], j = 0, i = 0;
      // Unless we *know* we can detect duplicates, assume their presence
      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);
      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }
        while (j--) {
          results.splice(duplicates[j], 1);
        }
      }
      // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225
      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function (elem) {
      var node, ret = '', i = 0, nodeType = elem.nodeType;
      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === 'string') {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      }
      // Do not include comment or processing instruction nodes
      return ret;
    };
    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        '>': {
          dir: 'parentNode',
          first: true
        },
        ' ': { dir: 'parentNode' },
        '+': {
          dir: 'previousSibling',
          first: true
        },
        '~': { dir: 'previousSibling' }
      },
      preFilter: {
        'ATTR': function (match) {
          match[1] = match[1].replace(runescape, funescape);
          // Move the given value to match[3] whether quoted or unquoted
          match[3] = (match[4] || match[5] || '').replace(runescape, funescape);
          if (match[2] === '~=') {
            match[3] = ' ' + match[3] + ' ';
          }
          return match.slice(0, 4);
        },
        'CHILD': function (match) {
          /* matches from matchExpr["CHILD"]
          		1 type (only|nth|...)
          		2 what (child|of-type)
          		3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          		4 xn-component of xn+y argument ([+-]?\d*n|)
          		5 sign of xn-component
          		6 x of xn-component
          		7 sign of y-component
          		8 y of y-component
          	*/
          match[1] = match[1].toLowerCase();
          if (match[1].slice(0, 3) === 'nth') {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            }
            // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1
            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
            match[5] = +(match[7] + match[8] || match[3] === 'odd');  // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }
          return match;
        },
        'PSEUDO': function (match) {
          var excess, unquoted = !match[5] && match[2];
          if (matchExpr['CHILD'].test(match[0])) {
            return null;
          }
          // Accept quoted arguments as-is
          if (match[3] && match[4] !== undefined) {
            match[2] = match[4];  // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          }
          // Return only captures needed by the pseudo filter method (type and argument)
          return match.slice(0, 3);
        }
      },
      filter: {
        'TAG': function (nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === '*' ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        'CLASS': function (className) {
          var pattern = classCache[className + ' '];
          return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
          });
        },
        'ATTR': function (name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);
            if (result == null) {
              return operator === '!=';
            }
            if (!operator) {
              return true;
            }
            result += '';
            return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
          };
        },
        'CHILD': function (type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;
                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  }
                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === 'only' && !start && 'nextSibling';
                }
                return true;
              }
              start = [forward ? parent.firstChild : parent.lastChild];
              // non-xml :nth-child(...) stores cache data on `parent`
              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[expando] || (parent[expando] = {});
                cache = outerCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = cache[0] === dirruns && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    outerCache[type] = [
                      dirruns,
                      nodeIndex,
                      diff
                    ];
                    break;
                  }
                }  // Use previously-cached element index if available
              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                diff = cache[1];  // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
              } else {
                // Use the same loop as above to seek `elem` from the start
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                    // Cache the index of each encountered element
                    if (useCache) {
                      (node[expando] || (node[expando] = {}))[type] = [
                        dirruns,
                        diff
                      ];
                    }
                    if (node === elem) {
                      break;
                    }
                  }
                }
              }
              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        'PSEUDO': function (pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
          // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does
          if (fn[expando]) {
            return fn(argument);
          }
          // But maintain support for old signatures
          if (fn.length > 1) {
            args = [
              pseudo,
              pseudo,
              '',
              argument
            ];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx, matched = fn(seed, argument), i = matched.length;
              while (i--) {
                idx = indexOf.call(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }
          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        'not': markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
            // Match elements unmatched by `matcher`
            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results);
            return !results.pop();
          };
        }),
        'has': markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        'contains': markFunction(function (text) {
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        'lang': markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || '')) {
            Sizzle.error('unsupported lang: ' + lang);
          }
          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;
            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);
            return false;
          };
        }),
        // Miscellaneous
        'target': function (elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        'root': function (elem) {
          return elem === docElem;
        },
        'focus': function (elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        'enabled': function (elem) {
          return elem.disabled === false;
        },
        'disabled': function (elem) {
          return elem.disabled === true;
        },
        'checked': function (elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
        },
        'selected': function (elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }
          return elem.selected === true;
        },
        // Contents
        'empty': function (elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }
          return true;
        },
        'parent': function (elem) {
          return !Expr.pseudos['empty'](elem);
        },
        // Element/input types
        'header': function (elem) {
          return rheader.test(elem.nodeName);
        },
        'input': function (elem) {
          return rinputs.test(elem.nodeName);
        },
        'button': function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === 'button' || name === 'button';
        },
        'text': function (elem) {
          var attr;
          return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
        },
        // Position-in-collection
        'first': createPositionalPseudo(function () {
          return [0];
        }),
        'last': createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        'even': createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'odd': createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;
          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; --i >= 0;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        }),
        'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;
          for (; ++i < length;) {
            matchIndexes.push(i);
          }
          return matchIndexes;
        })
      }
    };
    Expr.pseudos['nth'] = Expr.pseudos['eq'];
    // Add button/input type pseudos
    for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
      }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }
    for (i in {
        submit: true,
        reset: true
      }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    }
    // Easy API for creating new setFilters
    function setFilters() {
    }
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    function tokenize(selector, parseOnly) {
      var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }
      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;
      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }
          groups.push(tokens = []);
        }
        matched = false;
        // Combinators
        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, ' ')
          });
          soFar = soFar.slice(matched.length);
        }
        // Filters
        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }
        if (!matched) {
          break;
        }
      }
      // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens
      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    }
    function toSelector(tokens) {
      var i = 0, len = tokens.length, selector = '';
      for (; i < len; i++) {
        selector += tokens[i].value;
      }
      return selector;
    }
    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache, outerCache, newCache = [
            dirruns,
            doneName
          ];
        // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {});
              if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                outerCache[dir] = newCache;
                // A match means we're done; a fail means we have to keep checking
                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
      };
    }
    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;
        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }
        return true;
      } : matchers[0];
    }
    function condense(unmatched, map, filter, context, xml) {
      var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);
            if (mapped) {
              map.push(i);
            }
          }
        }
      }
      return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }
      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }
      return markFunction(function (seed, results, context, xml) {
        var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
          // Get initial elements from seed or context
          elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
          postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
          [] : // ...otherwise use results directly
          results : matcherIn;
        // Find primary matches
        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        }
        // Apply postFilter
        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml);
          // Un-match failing elements by moving them back to matcherIn
          i = temp.length;
          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }
        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;
              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }
              postFinder(null, matcherOut = [], temp, xml);
            }
            // Move matched elements from seed to results to keep them synchronized
            i = matcherOut.length;
            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          }  // Add elements to results, through postFinder if defined
        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }
    function matcherFromTokens(tokens) {
      var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator(function (elem) {
          return elem === checkContext;
        }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
          return indexOf.call(checkContext, elem) > -1;
        }, implicitRelative, true), matchers = [function (elem, context, xml) {
            return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
          }];
      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
          // Return special upon seeing a positional matcher
          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;
            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }
            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }
          matchers.push(matcher);
        }
      }
      return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
          var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find['TAG']('*', outermost),
            // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
          if (outermost) {
            outermostContext = context !== document && context;
          }
          // Add elements passing elementMatchers directly to results
          // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
          // Support: IE<9, Safari
          // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
          for (; i !== len && (elem = elems[i]) != null; i++) {
            if (byElement && elem) {
              j = 0;
              while (matcher = elementMatchers[j++]) {
                if (matcher(elem, context, xml)) {
                  results.push(elem);
                  break;
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
              }
            }
            // Track unmatched elements for set filters
            if (bySet) {
              // They will have gone through all possible matchers
              if (elem = !matcher && elem) {
                matchedCount--;
              }
              // Lengthen the array for every element, matched or not
              if (seed) {
                unmatched.push(elem);
              }
            }
          }
          // Apply set filters to unmatched elements
          matchedCount += i;
          if (bySet && i !== matchedCount) {
            j = 0;
            while (matcher = setMatchers[j++]) {
              matcher(unmatched, setMatched, context, xml);
            }
            if (seed) {
              // Reintegrate element matches to eliminate the need for sorting
              if (matchedCount > 0) {
                while (i--) {
                  if (!(unmatched[i] || setMatched[i])) {
                    setMatched[i] = pop.call(results);
                  }
                }
              }
              // Discard index placeholder values to get only actual matches
              setMatched = condense(setMatched);
            }
            // Add matches to results
            push.apply(results, setMatched);
            // Seedless set matches succeeding multiple successful matchers stipulate sorting
            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
              Sizzle.uniqueSort(results);
            }
          }
          // Override manipulation of globals by nested matchers
          if (outermost) {
            dirruns = dirrunsUnique;
            outermostContext = contextBackup;
          }
          return unmatched;
        };
      return bySet ? markFunction(superMatcher) : superMatcher;
    }
    compile = Sizzle.compile = function (selector, group) {
      var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!group) {
          group = tokenize(selector);
        }
        i = group.length;
        while (i--) {
          cached = matcherFromTokens(group[i]);
          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        }
        // Cache the compiled function
        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
      }
      return cached;
    };
    function multipleContexts(selector, contexts, results) {
      var i = 0, len = contexts.length;
      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }
      return results;
    }
    function select(selector, context, results, seed) {
      var i, tokens, token, type, find, match = tokenize(selector);
      if (!seed) {
        // Try to minimize operations if there is only one group
        if (match.length === 1) {
          // Take a shortcut and set the context if the root selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
            if (!context) {
              return results;
            }
            selector = selector.slice(tokens.shift().value.length);
          }
          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];
            // Abort if we hit a combinator
            if (Expr.relative[type = token.type]) {
              break;
            }
            if (find = Expr.find[type]) {
              // Search, expanding context for leading sibling combinators
              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }
                break;
              }
            }
          }
        }
      }
      // Compile and execute a filtering function
      // Provide `match` to avoid retokenization if we modified the selector above
      compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }
    // One-time assignments
    // Sort stability
    support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
    // Support: Chrome<14
    // Always assume duplicates if they aren't passed to the comparison function
    support.detectDuplicates = !!hasDuplicate;
    // Initialize against the default document
    setDocument();
    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function (div1) {
      // Should return 1, but returns 4 (following)
      return div1.compareDocumentPosition(document.createElement('div')) & 1;
    });
    // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!assert(function (div) {
        div.innerHTML = '<a href=\'#\'></a>';
        return div.firstChild.getAttribute('href') === '#';
      })) {
      addHandle('type|href|height|width', function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
        }
      });
    }
    // Support: IE<9
    // Use defaultValue in place of getAttribute("value")
    if (!support.attributes || !assert(function (div) {
        div.innerHTML = '<input/>';
        div.firstChild.setAttribute('value', '');
        return div.firstChild.getAttribute('value') === '';
      })) {
      addHandle('value', function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === 'input') {
          return elem.defaultValue;
        }
      });
    }
    // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies
    if (!assert(function (div) {
        return div.getAttribute('disabled') == null;
      })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;
        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }
    return Sizzle;
  }(window);
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[':'] = jQuery.expr.pseudos;
  jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var risSimple = /^.[^:#\[\.,]*$/;
  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }
    if (typeof qualifier === 'string') {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }
      qualifier = jQuery.filter(qualifier, elements);
    }
    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) >= 0 !== not;
    });
  }
  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ':not(' + expr + ')';
    }
    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  jQuery.fn.extend({
    find: function (selector) {
      var i, len = this.length, ret = [], self = this;
      if (typeof selector !== 'string') {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + ' ' + selector : selector;
      return ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });
  // Initialize a jQuery object
  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
      var match, elem;
      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }
      // Handle HTML strings
      if (typeof selector === 'string') {
        if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [
            null,
            selector,
            null
          ];
        } else {
          match = rquickExpr.exec(selector);
        }
        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;
            // scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;  // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            if (elem && elem.parentNode) {
              // Inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
          }  // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || rootjQuery).find(selector);  // HANDLE: $(expr, context)
                                                          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }  // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;  // HANDLE: $(function)
                      // Shortcut for document ready
      } else if (jQuery.isFunction(selector)) {
        return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : // Execute immediately if ready is not present
        selector(jQuery);
      }
      if (selector.selector !== undefined) {
        this.selector = selector.selector;
        this.context = selector.context;
      }
      return jQuery.makeArray(selector, this);
    };
  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;
  // Initialize central reference
  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.extend({
    dir: function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break;
          }
          matched.push(elem);
        }
      }
      return matched;
    },
    sibling: function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n);
        }
      }
      return matched;
    }
  });
  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this), l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function (selectors, context) {
      var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            matched.push(cur);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    // Determine the position of an element within
    // the matched set of elements
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }
      // index in selector
      if (typeof elem === 'string') {
        return indexOf.call(jQuery(elem), this[0]);
      }
      // Locate the position of the desired element
      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {
    }
    return cur;
  }
  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return jQuery.dir(elem, 'parentNode');
    },
    parentsUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'parentNode', until);
    },
    next: function (elem) {
      return sibling(elem, 'nextSibling');
    },
    prev: function (elem) {
      return sibling(elem, 'previousSibling');
    },
    nextAll: function (elem) {
      return jQuery.dir(elem, 'nextSibling');
    },
    prevAll: function (elem) {
      return jQuery.dir(elem, 'previousSibling');
    },
    nextUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'nextSibling', until);
    },
    prevUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'previousSibling', until);
    },
    siblings: function (elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return jQuery.sibling(elem.firstChild);
    },
    contents: function (elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== 'Until') {
        selector = until;
      }
      if (selector && typeof selector === 'string') {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.unique(matched);
        }
        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g;
  // String to Object options format cache
  var optionsCache = {};
  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions(options) {
    var object = optionsCache[options] = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var
      // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function (data) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for (; list && firingIndex < firingLength; firingIndex++) {
          if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
            memory = false;
            // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if (list) {
          if (stack) {
            if (stack.length) {
              fire(stack.shift());
            }
          } else if (memory) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function () {
          if (list) {
            // First, we save the current length
            var start = list.length;
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                var type = jQuery.type(arg);
                if (type === 'function') {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && type !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            }(arguments));
            // Do we need to add the callbacks to the
            // current firing batch?
            if (firing) {
              firingLength = list.length;  // With memory, if we're not firing then
                                           // we should call right away
            } else if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function () {
          if (list) {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                // Handle firing indexes
                if (firing) {
                  if (index <= firingLength) {
                    firingLength--;
                  }
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
        },
        // Remove all callbacks from the list
        empty: function () {
          list = [];
          firingLength = 0;
          return this;
        },
        // Have the list do nothing anymore
        disable: function () {
          list = stack = memory = undefined;
          return this;
        },
        // Is it disabled?
        disabled: function () {
          return !list;
        },
        // Lock the list in its current state
        lock: function () {
          stack = undefined;
          if (!memory) {
            self.disable();
          }
          return this;
        },
        // Is it locked?
        locked: function () {
          return !stack;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function (context, args) {
          if (list && (!fired || stack)) {
            args = args || [];
            args = [
              context,
              args.slice ? args.slice() : args
            ];
            if (firing) {
              stack.push(args);
            } else {
              fire(args);
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function () {
          return !!fired;
        }
      };
    return self;
  };
  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          // action, add listener, listener list, final state
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            'resolved'
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            'rejected'
          ],
          [
            'notify',
            'progress',
            jQuery.Callbacks('memory')
          ]
        ], state = 'pending', promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function () {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (i, tuple) {
                var fn = jQuery.isFunction(fns[i]) && fns[i];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && jQuery.isFunction(returned.promise)) {
                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                  } else {
                    newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        }, deferred = {};
      // Keep pipe for back-compat
      promise.pipe = promise.then;
      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2], stateString = tuple[3];
        // promise[ done | fail | progress ] = list.add
        promise[tuple[1]] = list.add;
        // Handle state
        if (stateString) {
          list.add(function () {
            // state = [ resolved | rejected ]
            state = stateString;  // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }
        // deferred[ resolve | reject | notify ]
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + 'With'] = list.fireWith;
      });
      // Make the deferred a promise
      promise.promise(deferred);
      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }
      // All done!
      return deferred;
    },
    // Deferred helper
    when: function (subordinate) {
      var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length,
        // the count of uncompleted subordinates
        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
        // Update function for both resolve and progress values
        updateFunc = function (i, contexts, values) {
          return function (value) {
            contexts[i] = this;
            values[i] = arguments.length > 1 ? slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
      // add listeners to Deferred subordinates; treat others as resolved
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
          } else {
            --remaining;
          }
        }
      }
      // if we're not waiting on anything, resolve the master
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    }
  });
  // The deferred used on DOM ready
  var readyList;
  jQuery.fn.ready = function (fn) {
    // Add the callback
    jQuery.ready.promise().done(fn);
    return this;
  };
  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Hold (or release) the ready event
    holdReady: function (hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    // Handle when the DOM is ready
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }
      // Remember that the DOM is ready
      jQuery.isReady = true;
      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }
      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
      // Trigger any bound ready events
      if (jQuery.fn.trigger) {
        jQuery(document).trigger('ready').off('ready');
      }
    }
  });
  /**
   * The ready event handler and self cleanup method
   */
  function completed() {
    document.removeEventListener('DOMContentLoaded', completed, false);
    window.removeEventListener('load', completed, false);
    jQuery.ready();
  }
  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred();
      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // we once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if (document.readyState === 'complete') {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed, false);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed, false);
      }
    }
    return readyList.promise(obj);
  };
  // Kick off the DOM ready check even if the user does not
  jQuery.ready.promise();
  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0, len = elems.length, bulk = key == null;
    // Sets many values
    if (jQuery.type(key) === 'object') {
      chainable = true;
      for (i in key) {
        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
      }  // Sets one value
    } else if (value !== undefined) {
      chainable = true;
      if (!jQuery.isFunction(value)) {
        raw = true;
      }
      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;  // ...except when executing function values
        } else {
          bulk = fn;
          fn = function (elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }
      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }
    return chainable ? elems : // Gets
    bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
  };
  /**
   * Determines whether an object can have data
   */
  jQuery.acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    // Support: Android < 4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty(this.cache = {}, 0, {
      get: function () {
        return {};
      }
    });
    this.expando = jQuery.expando + Math.random();
  }
  Data.uid = 1;
  Data.accepts = jQuery.acceptData;
  Data.prototype = {
    key: function (owner) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if (!Data.accepts(owner)) {
        return 0;
      }
      var descriptor = {},
        // Check if the owner object already has a cache key
        unlock = owner[this.expando];
      // If not, create one
      if (!unlock) {
        unlock = Data.uid++;
        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[this.expando] = { value: unlock };
          Object.defineProperties(owner, descriptor);  // Support: Android < 4
                                                       // Fallback to a less secure definition
        } catch (e) {
          descriptor[this.expando] = unlock;
          jQuery.extend(owner, descriptor);
        }
      }
      // Ensure the cache object
      if (!this.cache[unlock]) {
        this.cache[unlock] = {};
      }
      return unlock;
    },
    set: function (owner, data, value) {
      var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
        unlock = this.key(owner), cache = this.cache[unlock];
      // Handle: [ owner, key, value ] args
      if (typeof data === 'string') {
        cache[data] = value;  // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);  // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    get: function (owner, key) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[this.key(owner)];
      return key === undefined ? cache : cache[key];
    },
    access: function (owner, key, value) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === 'string' && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }
      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);
      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
      if (key === undefined) {
        this.cache[unlock] = {};
      } else {
        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          // Try the string as a key before any manipulation
          if (key in cache) {
            name = [
              key,
              camel
            ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }
        i = name.length;
        while (i--) {
          delete cache[name[i]];
        }
      }
    },
    hasData: function (owner) {
      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    discard: function (owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  var data_priv = new Data();
  var data_user = new Data();
  /*
  	Implementation Summary
  
  	1. Enforce API surface and semantic compatibility with 1.9.x branch
  	2. Improve the module's maintainability by reducing the storage
  		paths to a single mechanism.
  	3. Use the same single mechanism to support "private" and "user" data.
  	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  	5. Avoid exposing implementation details on user objects (eg. expando properties)
  	6. Provide a clear path for implementation upgrade to WeakMap in 2014
  */
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
  function dataAttr(elem, key, data) {
    var name;
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === 'string') {
        try {
          data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : // Only convert to a number if it doesn't change the string
          +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {
        }
        // Make sure we set the data so it isn't changed later
        data_user.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    hasData: function (elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    data: function (elem, name, data) {
      return data_user.access(elem, name, data);
    },
    removeData: function (elem, name) {
      data_user.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to data_priv methods, these can be deprecated.
    _data: function (elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var i, name, data, elem = this[0], attrs = elem && elem.attributes;
      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = data_user.get(elem);
          if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
            i = attrs.length;
            while (i--) {
              name = attrs[i].name;
              if (name.indexOf('data-') === 0) {
                name = jQuery.camelCase(name.slice(5));
                dataAttr(elem, name, data[name]);
              }
            }
            data_priv.set(elem, 'hasDataAttrs', true);
          }
        }
        return data;
      }
      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          data_user.set(this, key);
        });
      }
      return access(this, function (value) {
        var data, camelKey = jQuery.camelCase(key);
        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // with the key as-is
          data = data_user.get(elem, key);
          if (data !== undefined) {
            return data;
          }
          // Attempt to get data from the cache
          // with the key camelized
          data = data_user.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }
          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }
          // We tried really hard, but the data doesn't exist.
          return;
        }
        // Set the data...
        this.each(function () {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = data_user.get(this, camelKey);
          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          data_user.set(this, camelKey, value);
          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if (key.indexOf('-') !== -1 && data !== undefined) {
            data_user.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        data_user.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;
      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = data_priv.get(elem, type);
        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = data_priv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || 'fx';
      var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
          jQuery.dequeue(elem, type);
        };
      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }
        // clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // not intended for public consumption - generates a queueHooks object, or returns the current one
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty: jQuery.Callbacks('once memory').add(function () {
          data_priv.remove(elem, [
            type + 'queue',
            key
          ]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;
      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);
        // ensure a hooks for this queue
        jQuery._queueHooks(this, type);
        if (type === 'fx' && queue[0] !== 'inprogress') {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function (type, obj) {
      var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';
      while (i--) {
        tmp = data_priv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var cssExpand = [
    'Top',
    'Right',
    'Bottom',
    'Left'
  ];
  var isHidden = function (elem, el) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
  };
  var rcheckableType = /^(?:checkbox|radio)$/i;
  (function () {
    var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div'));
    // #11217 - WebKit loses check when the name is after the checked attribute
    div.innerHTML = '<input type=\'radio\' checked=\'checked\' name=\'t\'/>';
    // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
    // old WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    // Support: IE9-IE11+
    div.innerHTML = '<textarea>x</textarea>';
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  }());
  var strundefined = typeof undefined;
  support.focusinBubbles = 'onfocusin' in window;
  var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {
    }
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if (!elemData) {
        return;
      }
      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }
      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }
      // Handle multiple events separated by a space
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }
        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};
        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;
        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};
        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join('.')
        }, handleObjIn);
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;
          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle, false);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }
        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }
      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }
      // Remove the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        delete elemData.handle;
        data_priv.remove(elem, 'events');
      }
    },
    trigger: function (event, data, elem, onlyHandlers) {
      var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
      cur = tmp = elem = elem || document;
      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }
      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf('.') >= 0) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;
      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }
      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);
      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }
      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }
        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }
      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type;
        // jQuery handler
        handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }
        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && jQuery.acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;
      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }
            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    dispatch: function (event) {
      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);
      var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;
      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }
      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or
          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function (event, handlers) {
      var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      // Avoid non-left-click bubbling in Firefox (#3861)
      if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.disabled !== true || event.type !== 'click') {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];
              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + ' ';
              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      }
      // Add the remaining (directly-bound) handlers
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    // Includes some event props shared by KeyEvent and MouseEvent
    props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
    fixHooks: {},
    keyHooks: {
      props: 'char charCode key keyCode'.split(' '),
      filter: function (event, original) {
        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return event;
      }
    },
    mouseHooks: {
      props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
      filter: function (event, original) {
        var eventDoc, doc, body, button = original.button;
        // Calculate pageX/Y if missing and clientX/Y available
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
        return event;
      }
    },
    fix: function (event) {
      if (event[jQuery.expando]) {
        return event;
      }
      // Create a writable copy of the event object and normalize some properties
      var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }
      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if (!event.target) {
        event.target = document;
      }
      // Support: Safari 6.0+, Chrome < 28
      // Target should not be a text node (#504, #13143)
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }
      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {
        // Fire native event if possible so blur/focus sequence is correct
        trigger: function () {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: 'focusin'
      },
      blur: {
        trigger: function () {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: 'focusout'
      },
      click: {
        // For checkbox, fire native event so checked state will be right
        trigger: function () {
          if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
            this.click();
            return false;
          }
        },
        // For cross-browser consistency, don't fire native .click() on links
        _default: function (event) {
          return jQuery.nodeName(event.target, 'a');
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate: function (type, elem, event, bubble) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true,
        originalEvent: {}
      });
      if (bubble) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  jQuery.removeEvent = function (elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;
      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || // Support: Android < 4.0
      src.defaultPrevented === undefined && src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;  // Event type
    } else {
      this.type = src;
    }
    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();
    // Mark it as fixed
    this[jQuery.expando] = true;
  };
  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      this.isImmediatePropagationStopped = returnTrue;
      this.stopPropagation();
    }
  };
  // Create mouseenter/leave events using mouseover/out and event-time checks
  // Support: Chrome 15+
  jQuery.each({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  // Create "bubbling" focus and blur events
  // Support: Firefox, Chrome, Safari
  if (!support.focusinBubbles) {
    jQuery.each({
      focus: 'focusin',
      blur: 'focusout'
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[fix] = {
        setup: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          data_priv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            data_priv.remove(doc, fix);
          } else {
            data_priv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on: function (types, selector, data, fn, one) {
      var origFn, type;
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for (type in types) {
          this.on(type, selector, data, types[type], one);
        }
        return this;
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (fn === false) {
        fn = returnFalse;
      } else if (!fn) {
        return this;
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          jQuery().off(event);
          return origFn.apply(this, arguments);
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
      }
      return this.each(function () {
        jQuery.event.add(this, types, fn, data, selector);
      });
    },
    one: function (types, selector, data, fn) {
      return this.on(types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
      // Support: IE 9
      option: [
        1,
        '<select multiple=\'multiple\'>',
        '</select>'
      ],
      thead: [
        1,
        '<table>',
        '</table>'
      ],
      col: [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      tr: [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      td: [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      _default: [
        0,
        '',
        ''
      ]
    };
  // Support: IE 9
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  // Support: 1.x compatibility
  // Manipulating tables requires a tbody
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
  }
  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);
    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute('type');
    }
    return elem;
  }
  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0, l = elems.length;
    for (; i < l; i++) {
      data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
    }
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }
    // 1. Copy private data: events, handlers, etc.
    if (data_priv.hasData(src)) {
      pdataOld = data_priv.access(src);
      pdataCur = data_priv.set(dest, pdataOld);
      events = pdataOld.events;
      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }
    // 2. Copy user data
    if (data_user.hasData(src)) {
      udataOld = data_user.access(src);
      udataCur = jQuery.extend({}, udataOld);
      data_user.set(dest, udataCur);
    }
  }
  function getAll(context, tag) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  // Support: IE >= 9
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();
    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && rcheckableType.test(src.type)) {
      dest.checked = src.checked;  // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }
  jQuery.extend({
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
      // Support: IE >= 9
      // Fix Cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }
      // Return the cloned set
      return clone;
    },
    buildFragment: function (elems, context, scripts, selection) {
      var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          // Add nodes directly
          if (jQuery.type(elem) === 'object') {
            // Support: QtWebKit
            // jQuery.merge because push.apply(_, arraylike) throws
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);  // Convert non-html into a text node
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem));  // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild(context.createElement('div'));
            // Deserialize a standard representation
            tag = (rtagName.exec(elem) || [
              '',
              ''
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
            // Descend through wrappers to the right content
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild;
            }
            // Support: QtWebKit
            // jQuery.merge because push.apply(_, arraylike) throws
            jQuery.merge(nodes, tmp.childNodes);
            // Remember the top-level container
            tmp = fragment.firstChild;
            // Fixes #12346
            // Support: Webkit, IE
            tmp.textContent = '';
          }
        }
      }
      // Remove wrapper from fragment
      fragment.textContent = '';
      i = 0;
      while (elem = nodes[i++]) {
        // #4087 - If origin and destination elements are the same, and this is
        // that element, do not do anything
        if (selection && jQuery.inArray(elem, selection) !== -1) {
          continue;
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        // Append to fragment
        tmp = getAll(fragment.appendChild(elem), 'script');
        // Preserve script evaluation history
        if (contains) {
          setGlobalEval(tmp);
        }
        // Capture executables
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || '')) {
              scripts.push(elem);
            }
          }
        }
      }
      return fragment;
    },
    cleanData: function (elems) {
      var data, elem, events, type, key, j, special = jQuery.event.special, i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (jQuery.acceptData(elem)) {
          key = elem[data_priv.expando];
          if (key && (data = data_priv.cache[key])) {
            events = Object.keys(data.events || {});
            if (events.length) {
              for (j = 0; (type = events[j]) !== undefined; j++) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }
            if (data_priv.cache[key]) {
              // Discard any remaining `private` data
              delete data_priv.cache[key];
            }
          }
        }
        // Discard any remaining `user` data
        delete data_user.cache[elem[data_user.expando]];
      }
    }
  });
  jQuery.fn.extend({
    text: function (value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    remove: function (selector, keepData) {
      var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
      for (; (elem = elems[i]) != null; i++) {
        if (!keepData && elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem));
        }
        if (elem.parentNode) {
          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
            setGlobalEval(getAll(elem, 'script'));
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    empty: function () {
      var elem, i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));
          // Remove any remaining nodes
          elem.textContent = '';
        }
      }
      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return access(this, function (value) {
        var elem = this[0] || {}, i = 0, l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }
        // See if we can take a shortcut and just use innerHTML
        if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
            '',
            ''
          ])[1].toLowerCase()]) {
          value = value.replace(rxhtmlTag, '<$1></$2>');
          try {
            for (; i < l; i++) {
              elem = this[i] || {};
              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;  // If using innerHTML throws an exception, use the fallback method
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var arg = arguments[0];
      // Make the changes, replacing each context element with the new content
      this.domManip(arguments, function (elem) {
        arg = this.parentNode;
        jQuery.cleanData(getAll(this));
        if (arg) {
          arg.replaceChild(elem, this);
        }
      });
      // Force removal if there was no new content (e.g., from empty arguments)
      return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },
    detach: function (selector) {
      return this.remove(selector, true);
    },
    domManip: function (args, callback) {
      // Flatten any nested arrays
      args = concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      // We can't cloneNode fragments that contain checked, in WebKit
      if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
        return this.each(function (index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html());
          }
          self.domManip(args, callback);
        });
      }
      if (l) {
        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first;
        }
        if (first) {
          scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
          hasScripts = scripts.length;
          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              // Keep references to cloned scripts for later restoration
              if (hasScripts) {
                // Support: QtWebKit
                // jQuery.merge because push.apply(_, arraylike) throws
                jQuery.merge(scripts, getAll(node, 'script'));
              }
            }
            callback.call(this[i], node, i);
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            // Reenable scripts
            jQuery.map(scripts, restoreScript);
            // Evaluate executable scripts on first document insertion
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                if (node.src) {
                  // Optional AJAX dependency, but won't run scripts if not present
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src);
                  }
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo: 'append',
    prependTo: 'prepend',
    insertBefore: 'before',
    insertAfter: 'after',
    replaceAll: 'replaceWith'
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);
        // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var iframe, elemdisplay = {};
  /**
   * Retrieve the actual display of a element
   * @param {String} name nodeName of the element
   * @param {Object} doc Document object
   */
  // Called only from within defaultDisplay
  function actualDisplay(name, doc) {
    var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
      // getDefaultComputedStyle might be reliably used only on attached element
      display = window.getDefaultComputedStyle ? // Use of this method is a temporary fix (more like optmization) until something better comes along,
      // since it was removed from specification and supported only in FF
      window.getDefaultComputedStyle(elem[0]).display : jQuery.css(elem[0], 'display');
    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();
    return display;
  }
  /**
   * Try to determine the default display value of an element
   * @param {String} nodeName
   */
  function defaultDisplay(nodeName) {
    var doc = document, display = elemdisplay[nodeName];
    if (!display) {
      display = actualDisplay(nodeName, doc);
      // If the simple way fails, read from inside an iframe
      if (display === 'none' || !display) {
        // Use the already-created iframe if possible
        iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = iframe[0].contentDocument;
        // Support: IE
        doc.write();
        doc.close();
        display = actualDisplay(nodeName, doc);
        iframe.detach();
      }
      // Store the correct default display
      elemdisplay[nodeName] = display;
    }
    return display;
  }
  var rmargin = /^margin/;
  var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
  var getStyles = function (elem) {
    return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
  };
  function curCSS(elem, name, computed) {
    var width, minWidth, maxWidth, ret, style = elem.style;
    computed = computed || getStyles(elem);
    // Support: IE9
    // getPropertyValue is only needed for .css('filter') in IE9, see #12537
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];
    }
    if (computed) {
      if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      }
      // Support: iOS < 6
      // A tribute to the "awesome hack by Dean Edwards"
      // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if (rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;
        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;
        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ? // Support: IE
    // IE returns zIndex value as an integer.
    ret + '' : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due to missing dependency),
          // remove it.
          // Since there are no other hooks for marginRight, remove the whole object.
          delete this.get;
          return;
        }
        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  (function () {
    var pixelPositionVal, boxSizingReliableVal,
      // Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
      divReset = 'padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;' + '-moz-box-sizing:content-box;box-sizing:content-box', docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';
    container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;' + 'margin-top:1px';
    container.appendChild(div);
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computePixelPositionAndBoxSizingReliable() {
      // Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
      div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;' + 'position:absolute;top:1%';
      docElem.appendChild(container);
      var divStyle = window.getComputedStyle(div, null);
      pixelPositionVal = divStyle.top !== '1%';
      boxSizingReliableVal = divStyle.width === '4px';
      docElem.removeChild(container);
    }
    // Use window.getComputedStyle because jsdom on node.js will break without it.
    if (window.getComputedStyle) {
      jQuery.extend(support, {
        pixelPosition: function () {
          // This test is executed only once but we still do memoizing
          // since we can use the boxSizingReliable pre-computing.
          // No need to check if the test was already performed, though.
          computePixelPositionAndBoxSizingReliable();
          return pixelPositionVal;
        },
        boxSizingReliable: function () {
          if (boxSizingReliableVal == null) {
            computePixelPositionAndBoxSizingReliable();
          }
          return boxSizingReliableVal;
        },
        reliableMarginRight: function () {
          // Support: Android 2.3
          // Check if div with explicit width and no margin-right incorrectly
          // gets computed margin-right based on width of container. (#3333)
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // This support function is only executed once so no memoizing is needed.
          var ret, marginDiv = div.appendChild(document.createElement('div'));
          marginDiv.style.cssText = div.style.cssText = divReset;
          marginDiv.style.marginRight = marginDiv.style.width = '0';
          div.style.width = '1px';
          docElem.appendChild(container);
          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
          docElem.removeChild(container);
          // Clean up the div for other support tests.
          div.innerHTML = '';
          return ret;
        }
      });
    }
  }());
  // A method for quickly swapping in/out CSS properties to get correct calculations.
  jQuery.swap = function (elem, options, callback, args) {
    var ret, name, old = {};
    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.apply(elem, args || []);
    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
      position: 'absolute',
      visibility: 'hidden',
      display: 'block'
    }, cssNormalTransform = {
      letterSpacing: 0,
      fontWeight: 400
    }, cssPrefixes = [
      'Webkit',
      'O',
      'Moz',
      'ms'
    ];
  // return a css property mapped to a potentially vendor prefixed property
  function vendorPropName(style, name) {
    // shortcut for names that are not vendor prefixed
    if (name in style) {
      return name;
    }
    // check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in style) {
        return name;
      }
    }
    return origName;
  }
  function setPositiveNumber(elem, value, subtract) {
    var matches = rnumsplit.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
  }
  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? 'border' : 'content') ? // If we already have the right measurement, avoid augmentation
      4 : // Otherwise initialize for horizontal or vertical properties
      name === 'width' ? 1 : 0, val = 0;
    for (; i < 4; i += 2) {
      // both box models exclude margin, so add it if we want it
      if (extra === 'margin') {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        // border-box includes padding, so remove it if we want content
        if (extra === 'content') {
          val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }
        // at this point, extra isn't border nor margin, so remove border
        if (extra !== 'margin') {
          val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      } else {
        // at this point, extra isn't content, so add padding
        val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        // at this point, extra isn't content nor padding, so add border
        if (extra !== 'padding') {
          val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      }
    }
    return val;
  }
  function getWidthOrHeight(elem, name, extra) {
    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if (val <= 0 || val == null) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);
      if (val < 0 || val == null) {
        val = elem.style[name];
      }
      // Computed unit is not pixels. Stop here and return.
      if (rnumnonpx.test(val)) {
        return val;
      }
      // we need the check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
      // Normalize "", auto, and prepare for extra
      val = parseFloat(val) || 0;
    }
    // use the active box-sizing model to add/subtract irrelevant styles
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
  }
  function showHide(elements, show) {
    var display, elem, hidden, values = [], index = 0, length = elements.length;
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      values[index] = data_priv.get(elem, 'olddisplay');
      display = elem.style.display;
      if (show) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === 'none') {
          elem.style.display = '';
        }
        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if (elem.style.display === '' && isHidden(elem)) {
          values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
        }
      } else {
        if (!values[index]) {
          hidden = isHidden(elem);
          if (display && display !== 'none' || !hidden) {
            data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
          }
        }
      }
    }
    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for (index = 0; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      if (!show || elem.style.display === 'none' || elem.style.display === '') {
        elem.style.display = show ? values[index] || '' : 'none';
      }
    }
    return elements;
  }
  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      'columnCount': true,
      'fillOpacity': true,
      'fontWeight': true,
      'lineHeight': true,
      'opacity': true,
      'order': true,
      'orphans': true,
      'widows': true,
      'zIndex': true,
      'zoom': true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
      // normalize float css property
      'float': 'cssFloat'
    },
    // Get and set the style property on a DOM Node
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }
      // Make sure that we're working with the right name
      var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;
        // convert relative number strings (+= or -=) to relative numbers. #7345
        if (type === 'string' && (ret = rrelNum.exec(value))) {
          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
          // Fixes bug #9237
          type = 'number';
        }
        // Make sure that null and NaN values aren't set. See: #7116
        if (value == null || value !== value) {
          return;
        }
        // If a number was passed in, add 'px' to the (except for certain CSS properties)
        if (type === 'number' && !jQuery.cssNumber[origName]) {
          value += 'px';
        }
        // Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
        // but it would mean to define eight (for every problematic property) identical functions
        if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
          style[name] = 'inherit';
        }
        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          // Support: Chrome, Safari
          // Setting style to blank string required to delete "style: x !important;"
          style[name] = '';
          style[name] = value;
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }
        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function (elem, name, extra, styles) {
      var val, num, hooks, origName = jQuery.camelCase(name);
      // Make sure that we're working with the right name
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }
      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }
      //convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }
      // Return, converting to number if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
      }
      return val;
    }
  });
  jQuery.each([
    'height',
    'width'
  ], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // certain elements can have dimension info if we invisibly show them
          // however, it must have a current display style that would benefit from this
          return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, 'display')) ? jQuery.swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },
      set: function (elem, value, extra) {
        var styles = extra && getStyles(elem);
        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
      }
    };
  });
  // Support: Android 2.3
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
    if (computed) {
      // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
      // Work around by temporarily setting element display to inline-block
      return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
        elem,
        'marginRight'
      ]);
    }
  });
  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: '',
    padding: '',
    border: 'Width'
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function (value) {
        var i = 0, expanded = {},
          // assumes a single number if not a string
          parts = typeof value === 'string' ? value.split(' ') : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function (name, value) {
      return access(this, function (elem, name, value) {
        var styles, len, map = {}, i = 0;
        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || 'swing';
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased, hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;
        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
          return tween.elem[tween.prop];
        }
        // passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails
        // so, simple values such as "10px" are parsed to Float.
        // complex values such as "rotate(1rad)" are returned as is.
        result = jQuery.css(tween.elem, tween.prop, '');
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // use step hook for back compat - use cssHook if its there - use .style if its
        // available and use plain properties where available
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };
  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    }
  };
  jQuery.fx = Tween.prototype.init;
  // Back Compat <1.8 extension point
  jQuery.fx.step = {};
  var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
      '*': [function (prop, value) {
          var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
            // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
          if (start && start[3] !== unit) {
            // Trust units reported by jQuery.css
            unit = unit || start[3];
            // Make sure we update the tween properties later on
            parts = parts || [];
            // Iteratively approximate from a nonzero starting point
            start = +target || 1;
            do {
              // If previous iteration zeroed out, double until we get *something*
              // Use a string for doubling factor so we don't accidentally see scale as unchanged below
              scale = scale || '.5';
              // Adjust and apply
              start = start / scale;
              jQuery.style(tween.elem, prop, start + unit);  // Update scale, tolerating zero or NaN from tween.cur()
                                                             // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
          }
          // Update tween properties
          if (parts) {
            start = tween.start = +start || +target || 0;
            tween.unit = unit;
            // If a +=/-= token was provided, we're doing a relative animation
            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
          }
          return tween;
        }]
    };
  // Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  }
  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which, i = 0, attrs = { height: type };
    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // we're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
    // handle queue: false promises
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // doing this makes sure that the complete handler will be called
        // before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }
    // height/width overflow pass
    if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [
        style.overflow,
        style.overflowX,
        style.overflowY
      ];
      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      display = jQuery.css(elem, 'display');
      // Get default display if display is currently "none"
      if (display === 'none') {
        display = defaultDisplay(elem.nodeName);
      }
      if (display === 'inline' && jQuery.css(elem, 'float') === 'none') {
        style.display = 'inline-block';
      }
    }
    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }
    // show/hide pass
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    }
    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ('hidden' in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = data_priv.access(elem, 'fxshow', {});
      }
      // store state if its toggle - enables .stop().toggle() to "reverse"
      if (toggle) {
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }
      anim.done(function () {
        var prop;
        data_priv.remove(elem, 'fxshow');
        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
          }
        }
      }
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;
    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];
        // not quite $.extend, this wont overwrite keys already present.
        // also - reusing 'index' from above because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
        // don't match elem in the :animated selector
        delete tick.elem;
      }), tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
          temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [
          animation,
          percent,
          remaining
        ]);
        if (percent < 1 && length) {
          return remaining;
        } else {
          deferred.resolveWith(elem, [animation]);
          return false;
        }
      }, animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(true, { specialEasing: {} }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // if we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }
          // resolve when we played the last frame
          // otherwise, reject
          if (gotoEnd) {
            deferred.resolveWith(elem, [
              animation,
              gotoEnd
            ]);
          } else {
            deferred.rejectWith(elem, [
              animation,
              gotoEnd
            ]);
          }
          return this;
        }
      }), props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        return result;
      }
    }
    jQuery.map(props, createTween, animation);
    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    // attach callbacks from options
    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }
  jQuery.Animation = jQuery.extend(Animation, {
    tweener: function (props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.split(' ');
      }
      var prop, index = 0, length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        tweeners[prop] = tweeners[prop] || [];
        tweeners[prop].unshift(callback);
      }
    },
    prefilter: function (callback, prepend) {
      if (prepend) {
        animationPrefilters.unshift(callback);
      } else {
        animationPrefilters.push(callback);
      }
    }
  });
  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
    };
    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
    // normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }
    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css('opacity', 0).show()  // animate to the value specified
.end().animate({ opacity: to }, speed, easing, callback);
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);
          // Empty animations, or finishing resolves immediately
          if (empty || data_priv.get(this, 'finish')) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue && type !== false) {
        this.queue(type || 'fx', []);
      }
      return this.each(function () {
        var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }
        // start the next in the queue if the last step wasn't forced
        // timers currently will call their complete callbacks, which will dequeue
        // but only if they were gotoEnd
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
        // enable finishing flag on private data
        data.finish = true;
        // empty the queue first
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }
        // look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }
        // look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }
        // turn off finishing flag
        delete data.finish;
      });
    }
  });
  jQuery.each([
    'toggle',
    'show',
    'hide'
  ], function (i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });
  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx('show'),
    slideUp: genFx('hide'),
    slideToggle: genFx('toggle'),
    fadeIn: { opacity: 'show' },
    fadeOut: { opacity: 'hide' },
    fadeToggle: { opacity: 'toggle' }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer, i = 0, timers = jQuery.timers;
    fxNow = jQuery.now();
    for (; i < timers.length; i++) {
      timer = timers[i];
      // Checks the timer has not already been removed
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };
  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };
  jQuery.fx.stop = function () {
    clearInterval(timerId);
    timerId = null;
  };
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };
  // Based off of the plugin by Clint Helfers, with permission.
  // http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || 'fx';
    return this.queue(type, function (next, hooks) {
      var timeout = setTimeout(next, time);
      hooks.stop = function () {
        clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
    input.type = 'checkbox';
    // Support: iOS 5.1, Android 4.x, Android 2.3
    // Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
    support.checkOn = input.value !== '';
    // Must access the parent to make an option select properly
    // Support: IE9, IE10
    support.optSelected = opt.selected;
    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;
    // Check if an input maintains its value after becoming a radio
    // Support: IE9, IE10
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
  }());
  var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function (elem, name, value) {
      var hooks, ret, nType = elem.nodeType;
      // don't get/set attributes on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === strundefined) {
        return jQuery.prop(elem, name, value);
      }
      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
        } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        } else {
          elem.setAttribute(name, value + '');
          return value;
        }
      } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      } else {
        ret = jQuery.find.attr(elem, name);
        // Non-existent attributes return null, we normalize to undefined
        return ret == null ? undefined : ret;
      }
    },
    removeAttr: function (elem, value) {
      var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;
          // Boolean attributes get special treatment (#10870)
          if (jQuery.expr.match.bool.test(name)) {
            // Set corresponding property to false
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
            // Setting the type on a radio button after the value resets the value in IE6-9
            // Reset value to default in case type is set after value during creation
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    }
  });
  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    propFix: {
      'for': 'htmlFor',
      'class': 'className'
    },
    prop: function (elem, name, value) {
      var ret, hooks, notxml, nType = elem.nodeType;
      // don't get/set properties on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
      if (notxml) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
      } else {
        return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
      }
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
        }
      }
    }
  });
  // Support: IE9+
  // Selectedness for an option in an optgroup can be inaccurate
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }
  jQuery.each([
    'tabIndex',
    'readOnly',
    'maxLength',
    'cellSpacing',
    'cellPadding',
    'rowSpan',
    'colSpan',
    'useMap',
    'frameBorder',
    'contentEditable'
  ], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  var rclass = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    addClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        // The disjunction here is for better compressibility (see removeClass)
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(' ' + clazz + ' ') < 0) {
                cur += clazz + ' ';
              }
            }
            // only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim(cur);
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    removeClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                cur = cur.replace(' ' + clazz + ' ', ' ');
              }
            }
            // only assign if different to avoid unneeded rendering.
            finalValue = value ? jQuery.trim(cur) : '';
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value;
      if (typeof stateVal === 'boolean' && type === 'string') {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
        });
      }
      return this.each(function () {
        if (type === 'string') {
          // toggle individual class names
          var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
          while (className = classNames[i++]) {
            // check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }  // Toggle whole class name
        } else if (type === strundefined || type === 'boolean') {
          if (this.className) {
            // store className if set
            data_priv.set(this, '__className__', this.className);
          }
          // If the element has a class name or if we're passed "false",
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
        }
      });
    },
    hasClass: function (selector) {
      var className = ' ' + selector + ' ', i = 0, l = this.length;
      for (; i < l; i++) {
        if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function (value) {
      var hooks, ret, isFunction, elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
            return ret;
          }
          ret = elem.value;
          return typeof ret === 'string' ? // handle most common string cases
          ret.replace(rreturn, '') : // handle cases where value is null/undef or number
          ret == null ? '' : ret;
        }
        return;
      }
      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }
        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
        // If set returns undefined, fall back to normal setting
        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      select: {
        get: function (elem) {
          var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];
            // IE6-9 doesn't update selected after form reset (#2551)
            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
              // Get the specific value for the option
              value = jQuery(option).val();
              // We don't need an array for one selects
              if (one) {
                return value;
              }
              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function (elem, value) {
          var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) {
              optionSet = true;
            }
          }
          // force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });
  // Radios and checkboxes getter/setter
  jQuery.each([
    'radio',
    'checkbox'
  ], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        // Support: Webkit
        // "" is returned instead of "on" if a value isn't specified
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });
  // Return jQuery for attributes-only inclusion
  jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
    }
  });
  var nonce = jQuery.now();
  var rquery = /\?/;
  // Support: Android 2.3
  // Workaround failure to string-cast null input
  jQuery.parseJSON = function (data) {
    return JSON.parse(data + '');
  };
  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, tmp;
    if (!data || typeof data !== 'string') {
      return null;
    }
    // Support: IE9
    try {
      tmp = new DOMParser();
      xml = tmp.parseFromString(data, 'text/xml');
    } catch (e) {
      xml = undefined;
    }
    if (!xml || xml.getElementsByTagName('parsererror').length) {
      jQuery.error('Invalid XML: ' + data);
    }
    return xml;
  };
  var
    // Document location
    ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    /* Prefilters
    * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
    * 2) These are called:
    *    - BEFORE asking for a transport
    *    - AFTER param serialization (s.data is a string if s.processData is true)
    * 3) key is the dataType
    * 4) the catchall symbol "*" can be used
    * 5) execution will start with transport dataType and THEN continue down to "*" if needed
    */
    prefilters = {},
    /* Transports bindings
    * 1) key is the dataType
    * 2) the catchall symbol "*" can be used
    * 3) selection will start with transport dataType and THEN go to "*" if needed
    */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = '*/'.concat('*');
  // #8138, IE may throw an exception when accessing
  // a field from window.location if document.domain has been set
  try {
    ajaxLocation = location.href;
  } catch (e) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement('a');
    ajaxLocation.href = '';
    ajaxLocation = ajaxLocation.href;
  }
  // Segment location into parts
  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }
      var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
      if (jQuery.isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);  // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }
  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {}, seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
  }
  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }
    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }
    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2, current, conv, tmp, prev, converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();
    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();
    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }
      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;  // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];
          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];  // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }
          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s['throws']) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: 'success',
      data: response
    };
  }
  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ajaxLocation,
      type: 'GET',
      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript'
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON'
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        '* text': String,
        // Text to html (true = no transformation)
        'text html': true,
        // Evaluate text as a json expression
        'text json': jQuery.parseJSON,
        // Parse text as xml
        'text xml': jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function (target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }
      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString, responseHeaders,
        // timeout handle
        timeoutTimer,
        // Cross-domain detection vars
        parts,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {}, requestHeadersNames = {},
        // The jqXHR state
        state = 0,
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,
          // Builds headers hashtable if needed
          getResponseHeader: function (key) {
            var match;
            if (state === 2) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase()] = match[2];
                }
              }
              match = responseHeaders[key.toLowerCase()];
            }
            return match == null ? null : match;
          },
          // Raw string
          getAllResponseHeaders: function () {
            return state === 2 ? responseHeadersString : null;
          },
          // Caches the header
          setRequestHeader: function (name, value) {
            var lname = name.toLowerCase();
            if (!state) {
              name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          // Overrides response content-type header
          overrideMimeType: function (type) {
            if (!state) {
              s.mimeType = type;
            }
            return this;
          },
          // Status-dependent callbacks
          statusCode: function (map) {
            var code;
            if (map) {
              if (state < 2) {
                for (code in map) {
                  // Lazy-add the new callback in a way that preserves old ones
                  statusCode[code] = [
                    statusCode[code],
                    map[code]
                  ];
                }
              } else {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              }
            }
            return this;
          },
          // Cancel the request
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };
      // Attach deferreds
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;
      // Extract dataTypes list
      s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if (s.crossDomain == null) {
        parts = rurl.exec(s.url.toLowerCase());
        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
      }
      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }
      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
      // If request was aborted inside a prefilter, stop there
      if (state === 2) {
        return jqXHR;
      }
      // We can fire global events as of now if asked to
      fireGlobals = s.global;
      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }
      // Uppercase the type
      s.type = s.type.toUpperCase();
      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);
      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;
      // More options handling for requests with no content
      if (!s.hasContent) {
        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }
        // Add anti-cache in url if needed
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value
          cacheURL.replace(rts, '$1_=' + nonce++) : // Otherwise add one to the end
          cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
        }
      }
      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }
      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }
      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }
      // aborting is no longer a cancellation
      strAbort = 'abort';
      // Install callbacks on deferreds
      for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
        jqXHR[i](s[i]);
      }
      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;
        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [
            jqXHR,
            s
          ]);
        }
        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }
        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e);  // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }
      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
        // Called once
        if (state === 2) {
          return;
        }
        // State is "done" now
        state = 2;
        // Clear timeout if it exists
        if (timeoutTimer) {
          clearTimeout(timeoutTimer);
        }
        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;
        // Cache response headers
        responseHeadersString = headers || '';
        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;
        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;
        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }
        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);
        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }
          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';  // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';  // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // We extract error from statusText
          // then normalize statusText and status for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }
        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';
        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [
            success,
            statusText,
            jqXHR
          ]);
        } else {
          deferred.rejectWith(callbackContext, [
            jqXHR,
            statusText,
            error
          ]);
        }
        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }
        // Complete
        completeDeferred.fireWith(callbackContext, [
          jqXHR,
          statusText
        ]);
        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [
            jqXHR,
            s
          ]);
          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }
      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    }
  });
  jQuery.each([
    'get',
    'post'
  ], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });
  // Attach a bunch of functions for handling common AJAX events
  jQuery.each([
    'ajaxStart',
    'ajaxStop',
    'ajaxComplete',
    'ajaxError',
    'ajaxSuccess',
    'ajaxSend'
  ], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      type: 'GET',
      dataType: 'script',
      async: false,
      global: false,
      'throws': true
    });
  };
  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }
      if (this[0]) {
        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function (html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = jQuery(this), contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function (html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function () {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, 'body')) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  jQuery.expr.filters.hidden = function (elem) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
  };
  jQuery.expr.filters.visible = function (elem) {
    return !jQuery.expr.filters.hidden(elem);
  };
  var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (jQuery.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }
  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix, s = [], add = function (key, value) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
        s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
      };
    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }
    // If an array was passed in, assume that it is an array of form elements.
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    // Return the resulting serialization
    return s.join('&').replace(r20, '+');
  };
  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;
        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, '\r\n')
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, '\r\n')
        };
      }).get();
    }
  });
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (e) {
    }
  };
  var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
      // file protocol always yields status code 0, assume 200
      0: 200,
      // Support: IE9
      // #1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
  // Support: IE9
  // Open requests must be manually aborted on unload (#5280)
  if (window.ActiveXObject) {
    jQuery(window).on('unload', function () {
      for (var key in xhrCallbacks) {
        xhrCallbacks[key]();
      }
    });
  }
  support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback;
    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i, xhr = options.xhr(), id = ++xhrId;
          xhr.open(options.type, options.url, options.async, options.username, options.password);
          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }
          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }
          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }
          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }
          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                delete xhrCallbacks[id];
                callback = xhr.onload = xhr.onerror = null;
                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  complete(// file: protocol always yields status 0; see #8605, #14207
                  xhr.status, xhr.statusText);
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE9
                  // Accessing binary-data responseText throws an exception
                  // (#11426)
                  typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                }
              }
            };
          };
          // Listen to events
          xhr.onload = callback();
          xhr.onerror = callback('error');
          // Create the abort callback
          callback = xhrCallbacks[id] = callback('abort');
          // Do send the request
          // This may raise an exception which is actually
          // handled in jQuery.ajax (so no try/catch here)
          xhr.send(options.hasContent && options.data || null);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  // Install script dataType
  jQuery.ajaxSetup({
    accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });
  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });
  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>').prop({
            async: true,
            charset: s.scriptCharset,
            src: s.url
          }).on('load error', callback = function (evt) {
            script.remove();
            callback = null;
            if (evt) {
              complete(evt.type === 'error' ? 404 : 200, evt.type);
            }
          });
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
      this[callback] = true;
      return callback;
    }
  });
  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }
      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };
      // force json dataType
      s.dataTypes[0] = 'json';
      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };
      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // Restore preexisting value
        window[callbackName] = overwritten;
        // Save back as free
        if (s[callbackName]) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;
          // save the callback name for future use
          oldCallbacks.push(callbackName);
        }
        // Call if it was a function and we have a response
        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });
      // Delegate to script
      return 'script';
    }
  });
  // data: string of html
  // context (optional): If specified, the fragment will be created in this context, defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== 'string') {
      return null;
    }
    if (typeof context === 'boolean') {
      keepScripts = context;
      context = false;
    }
    context = context || document;
    var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = jQuery.buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }
    return jQuery.merge([], parsed.childNodes);
  };
  // Keep a copy of the old load method
  var _load = jQuery.fn.load;
  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== 'string' && _load) {
      return _load.apply(this, arguments);
    }
    var selector, type, response, self = this, off = url.indexOf(' ');
    if (off >= 0) {
      selector = url.slice(off);
      url = url.slice(0, off);
    }
    // If it's a function
    if (jQuery.isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;  // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }
    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // if "type" variable is undefined, then "GET" method will be used
        type: type,
        dataType: 'html',
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText);
      }).complete(callback && function (jqXHR, status) {
        self.each(callback, response || [
          jqXHR.responseText,
          status,
          jqXHR
        ]);
      });
    }
    return this;
  };
  jQuery.expr.filters.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  var docElem = window.document.documentElement;
  /**
   * Gets a window from an element
   */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }
  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }
      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
      // Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(elem, i, curOffset);
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    offset: function (options) {
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }
      var docElem, win, elem = this[0], box = {
          top: 0,
          left: 0
        }, doc = elem && elem.ownerDocument;
      if (!doc) {
        return;
      }
      docElem = doc.documentElement;
      // Make sure it's not a disconnected DOM node
      if (!jQuery.contains(docElem, elem)) {
        return box;
      }
      // If we don't have gBCR, just use 0,0 rather than error
      // BlackBerry 5, iOS 3 (original iPhone)
      if (typeof elem.getBoundingClientRect !== strundefined) {
        box = elem.getBoundingClientRect();
      }
      win = getWindow(doc);
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },
    position: function () {
      if (!this[0]) {
        return;
      }
      var offsetParent, offset, elem = this[0], parentOffset = {
          top: 0,
          left: 0
        };
      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
      if (jQuery.css(elem, 'position') === 'fixed') {
        // We assume that getBoundingClientRect is available when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent();
        // Get correct offsets
        offset = this.offset();
        if (!jQuery.nodeName(offsetParent[0], 'html')) {
          parentOffset = offsetParent.offset();
        }
        // Add offsetParent borders
        parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
        parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
      }
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
      };
    },
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent || docElem;
        while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElem;
      });
    }
  });
  // Create scrollLeft and scrollTop methods
  jQuery.each({
    scrollLeft: 'pageXOffset',
    scrollTop: 'pageYOffset'
  }, function (method, prop) {
    var top = 'pageYOffset' === prop;
    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        var win = getWindow(elem);
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length, null);
    };
  });
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // getComputedStyle returns percent when specified for top/left/bottom/right
  // rather than make the css module depend on the offset module, we just check for it here
  jQuery.each([
    'top',
    'left'
  ], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);
        // if curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
      }
    });
  });
  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({
    Height: 'height',
    Width: 'width'
  }, function (name, type) {
    jQuery.each({
      padding: 'inner' + name,
      content: type,
      '': 'outer' + name
    }, function (defaultExtra, funcName) {
      // margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
        return access(this, function (elem, type, value) {
          var doc;
          if (jQuery.isWindow(elem)) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement['client' + name];
          }
          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;
            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
          }
          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });
  // The number of elements contained in the matched element set
  jQuery.fn.size = function () {
    return this.length;
  };
  jQuery.fn.andSelf = jQuery.fn.addBack;
  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  if (true) {
    oh_jquery = function () {
      return jQuery;
    }();
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }
    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }
    return jQuery;
  };
  // Expose jQuery and $ identifiers, even in
  // AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (typeof noGlobal === strundefined) {
    window.jQuery = window.$ = jQuery;
  }
  return jQuery;
}));
!function () {
  var d3 = { version: '3.4.11' };
  if (!Date.now)
    Date.now = function () {
      return +new Date();
    };
  var d3_arraySlice = [].slice, d3_array = function (list) {
      return d3_arraySlice.call(list);
    };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function (list) {
      var i = list.length, array = new Array(i);
      while (i--)
        array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement('div').style.setProperty('opacity', 0, '');
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function (name, value) {
      d3_element_setAttribute.call(this, name, value + '');
    };
    d3_element_prototype.setAttributeNS = function (space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + '');
    };
    d3_style_prototype.setProperty = function (name, value, priority) {
      d3_style_setProperty.call(this, name, value + '', priority);
    };
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function (a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function (array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = array[i]) != null && a > b)
          a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && a > b)
          a = b;
    }
    return a;
  };
  d3.max = function (array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = array[i]) != null && b > a)
          a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null && b > a)
          a = b;
    }
    return a;
  };
  d3.extent = function (array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a))
        a = c = undefined;
      while (++i < n)
        if ((b = array[i]) != null) {
          if (a > b)
            a = b;
          if (c < b)
            c = b;
        }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a))
        a = undefined;
      while (++i < n)
        if ((b = f.call(array, array[i], i)) != null) {
          if (a > b)
            a = b;
          if (c < b)
            c = b;
        }
    }
    return [
      a,
      c
    ];
  };
  d3.sum = function (array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n)
        if (!isNaN(a = +array[i]))
          s += a;
    } else {
      while (++i < n)
        if (!isNaN(a = +f.call(array, array[i], i)))
          s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function (array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n)
        if (d3_number(a = array[i]))
          s += a;
        else
          --j;
    } else {
      while (++i < n)
        if (d3_number(a = f.call(array, array[i], i)))
          s += a;
        else
          --j;
    }
    return j ? s / j : undefined;
  };
  d3.quantile = function (values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function (array, f) {
    if (arguments.length > 1)
      array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3_ascending), 0.5) : undefined;
  };
  function d3_bisector(compare) {
    return {
      left: function (a, x, lo, hi) {
        if (arguments.length < 3)
          lo = 0;
        if (arguments.length < 4)
          hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0)
            lo = mid + 1;
          else
            hi = mid;
        }
        return lo;
      },
      right: function (a, x, lo, hi) {
        if (arguments.length < 3)
          lo = 0;
        if (arguments.length < 4)
          hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0)
            hi = mid;
          else
            lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function (f) {
    return d3_bisector(f.length === 1 ? function (d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function (array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function (array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--)
      permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function (array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n)
      pairs[i] = [
        p0 = p1,
        p1 = array[++i]
      ];
    return pairs;
  };
  d3.zip = function () {
    if (!(n = arguments.length))
      return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m;) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function (matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function (map) {
    var keys = [];
    for (var key in map)
      keys.push(key);
    return keys;
  };
  d3.values = function (map) {
    var values = [];
    for (var key in map)
      values.push(map[key]);
    return values;
  };
  d3.entries = function (map) {
    var entries = [];
    for (var key in map)
      entries.push({
        key: key,
        value: map[key]
      });
    return entries;
  };
  d3.merge = function (arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n)
      j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function (start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity)
      throw new Error('infinite range');
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0)
      while ((j = start + step * ++i) > stop)
        range.push(j / k);
    else
      while ((j = start + step * ++i) < stop)
        range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1)
      k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function (object) {
    var map = new d3_Map();
    if (object instanceof d3_Map)
      object.forEach(function (key, value) {
        map.set(key, value);
      });
    else
      for (var key in object)
        map.set(key, object[key]);
    return map;
  };
  function d3_Map() {
  }
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function (key) {
      return this[d3_map_prefix + key];
    },
    set: function (key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function () {
      var values = [];
      this.forEach(function (key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function () {
      var entries = [];
      this.forEach(function (key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function (f) {
      for (var key in this)
        if (key.charCodeAt(0) === d3_map_prefixCode)
          f.call(this, key.substring(1), this[key]);
    }
  });
  var d3_map_prefix = '\0', d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  function d3_map_has(key) {
    return d3_map_prefix + key in this;
  }
  function d3_map_remove(key) {
    key = d3_map_prefix + key;
    return key in this && delete this[key];
  }
  function d3_map_keys() {
    var keys = [];
    this.forEach(function (key) {
      keys.push(key);
    });
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this)
      if (key.charCodeAt(0) === d3_map_prefixCode)
        ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this)
      if (key.charCodeAt(0) === d3_map_prefixCode)
        return false;
    return true;
  }
  d3.nest = function () {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length)
        return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [object]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function (keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function (keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length)
        return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function (key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function (a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function (array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function (array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function (d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function (order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function (f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function (array) {
    var set = new d3_Set();
    if (array)
      for (var i = 0, n = array.length; i < n; ++i)
        set.add(array[i]);
    return set;
  };
  function d3_Set() {
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function (value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function (value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function (f) {
      for (var value in this)
        if (value.charCodeAt(0) === d3_map_prefixCode)
          f.call(this, value.substring(1));
    }
  });
  d3.behavior = {};
  d3.rebind = function (target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n)
      target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function () {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object)
      return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object)
        return prefixName;
    }
  }
  var d3_vendorPrefixes = [
    'webkit',
    'ms',
    'moz',
    'Moz',
    'o',
    'O'
  ];
  function d3_noop() {
  }
  d3.dispatch = function () {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n)
      dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {
  }
  d3_dispatch.prototype.on = function (type, listener) {
    var i = type.indexOf('.'), name = '';
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type)
      return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null)
        for (type in this) {
          if (this.hasOwnProperty(type))
            this[type].on(name, null);
        }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n)
        if (l = z[i].on)
          l.apply(this, arguments);
      return dispatch;
    }
    event.on = function (name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2)
        return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener)
        listeners.push(listenerByName.set(name, { on: listener }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent)
      e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n)
      dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function (thiz, argumentz) {
      return function (e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function (s) {
    return s.replace(d3_requote_re, '\\$&');
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function (object, prototype) {
    object.__proto__ = prototype;
  } : function (object, prototype) {
    for (var property in prototype)
      object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function (s, n) {
      return n.querySelector(s);
    }, d3_selectAll = function (s, n) {
      return n.querySelectorAll(s);
    }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, 'matchesSelector')], d3_selectMatches = function (n, s) {
      return d3_selectMatcher.call(n, s);
    };
  if (typeof Sizzle === 'function') {
    d3_select = function (s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function () {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function (selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && '__data__' in node)
            subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === 'function' ? selector : function () {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function (selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === 'function' ? selector : function () {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: 'http://www.w3.org/2000/svg',
    xhtml: 'http://www.w3.org/1999/xhtml',
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace',
    xmlns: 'http://www.w3.org/2000/xmlns/'
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function (name) {
      var i = name.indexOf(':'), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string') {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name)
        this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.removeAttributeNS(name.space, name.local);
      else
        this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === 'function' ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, ' ');
  }
  d3_selectionPrototype.classed = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string') {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n)
            if (!value.contains(name[i]))
              return false;
        } else {
          value = node.getAttribute('class');
          while (++i < n)
            if (!d3_selection_classedRe(name[i]).test(value))
              return false;
        }
        return true;
      }
      for (value in name)
        this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp('(?:^|\\s+)' + d3.requote(name) + '(?:\\s+|$)', 'g');
  }
  function d3_selection_classes(name) {
    return (name + '').trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n)
        name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n)
        name[i](this, x);
    }
    return typeof value === 'function' ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function (node, value) {
      if (c = node.classList)
        return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute('class') || '';
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c))
          node.setAttribute('class', d3_collapse(c + ' ' + name));
      } else {
        node.setAttribute('class', d3_collapse(c.replace(re, ' ')));
      }
    };
  }
  d3_selectionPrototype.style = function (name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== 'string') {
        if (n < 2)
          value = '';
        for (priority in name)
          this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2)
        return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = '';
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === 'function' ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function (name, value) {
    if (arguments.length < 2) {
      if (typeof name === 'string')
        return this.node()[name];
      for (value in name)
        this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null)
        delete this[name];
      else
        this[name] = x;
    }
    return value == null ? propertyNull : typeof value === 'function' ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function (value) {
    return arguments.length ? this.each(typeof value === 'function' ? function () {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? '' : v;
    } : value == null ? function () {
      this.textContent = '';
    } : function () {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function (value) {
    return arguments.length ? this.each(typeof value === 'function' ? function () {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? '' : v;
    } : value == null ? function () {
      this.innerHTML = '';
    } : function () {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function (name) {
    name = d3_selection_creator(name);
    return this.select(function () {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === 'function' ? name : (name = d3.ns.qualify(name)).local ? function () {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function () {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function (name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function () {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function () {
    return this.each(function () {
      var parent = this.parentNode;
      if (parent)
        parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function (value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n;) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m;) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n;) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0;) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (; i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (; i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === 'function') {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function () {
      return enter;
    };
    update.exit = function () {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return { __data__: data };
  }
  d3_selectionPrototype.datum = function (value) {
    return arguments.length ? this.property('__data__', value) : this.property('__data__');
  };
  d3_selectionPrototype.filter = function (filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== 'function')
      filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function () {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function () {
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function (comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m;)
      this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length)
      comparator = d3_ascending;
    return function (a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function (callback) {
    return d3_selection_each(this, function (node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i])
          callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function (callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function () {
    return !this.node();
  };
  d3_selectionPrototype.node = function () {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node)
          return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function () {
    var n = 0;
    this.each(function () {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function (selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m;) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function (name, before) {
    if (arguments.length < 2)
      before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function (d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0)
        j0 = j, i0 = 0;
      if (i >= i0)
        i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n);
      return node;
    };
  }
  d3_selectionPrototype.transition = function () {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
        time: Date.now(),
        ease: d3_ease_cubicInOut,
        delay: 0,
        duration: 250
      };
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i])
          d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function () {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock)
      ++lock.active;
  }
  d3.select = function (node) {
    var group = [typeof node === 'string' ? d3_select(node, d3_document) : node];
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  d3.selectAll = function (nodes) {
    var group = d3_array(typeof nodes === 'string' ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([group]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function (type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== 'string') {
        if (n < 2)
          listener = false;
        for (capture in type)
          this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2)
        return (n = this.node()['__on' + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = '__on' + type, i = type.indexOf('.'), wrap = d3_selection_onListener;
    if (i > 0)
      type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter)
      type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp('^__on([^.]+)' + d3.requote(type) + '$'), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  });
  d3_selection_onFilters.forEach(function (k) {
    if ('on' + k in d3_document)
      d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function (e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function (e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = 'onselectstart' in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, 'userSelect'), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = '.dragsuppress-' + ++d3_event_dragId, click = 'click' + name, w = d3.select(d3_window).on('touchmove' + name, d3_eventPreventDefault).on('dragstart' + name, d3_eventPreventDefault).on('selectstart' + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = 'none';
    }
    return function (suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect)
        style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function () {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function (container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches)
      e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select('body').append('svg').style({
          position: 'absolute',
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: 'none'
        }, 'important');
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083)
        point.x = e.pageX, point.y = e.pageY;
      else
        point.x = e.clientX, point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [
        point.x,
        point.y
      ];
    }
    var rect = container.getBoundingClientRect();
    return [
      e.clientX - rect.left - container.clientLeft,
      e.clientY - rect.top - container.clientTop
    ];
  }
  d3.touches = function (container, touches) {
    if (arguments.length < 2)
      touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function (touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function () {
    var event = d3_eventDispatch(drag, 'drag', 'dragstart', 'dragend'), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, 'mousemove', 'mouseup'), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, 'touchmove', 'touchend');
    function drag() {
      this.on('mousedown.drag', mousedown).on('touchstart.drag', touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function () {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = '.drag' + (dragId == null ? '' : '-' + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [
            dragOffset.x - position0[0],
            dragOffset.y - position0[1]
          ];
        } else {
          dragOffset = [
            0,
            0
          ];
        }
        dispatch({ type: 'dragstart' });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1)
            return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: 'drag',
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId))
            return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged && d3.event.target === target);
          dispatch({ type: 'dragend' });
        }
      };
    }
    drag.origin = function (x) {
      if (!arguments.length)
        return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, 'on');
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  function d3_behavior_dragTouchSubject() {
    return d3.event.target;
  }
  function d3_behavior_dragMouseSubject() {
    return d3_window;
  }
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 0.000001, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function (p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / d3_cosh(ρ * s + r0)
        ];
      }
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(ρ * s)
      ];
    }
    interpolate.duration = S * 1000;
    return interpolate;
  };
  d3.behavior.zoom = function () {
    var view = {
        x: 0,
        y: 0,
        k: 1
      }, translate0, center0, center, size = [
        960,
        500
      ], scaleExtent = d3_behavior_zoomInfinity, mousedown = 'mousedown.zoom', mousemove = 'mousemove.zoom', mouseup = 'mouseup.zoom', mousewheelTimer, touchstart = 'touchstart.zoom', touchtime, event = d3_eventDispatch(zoom, 'zoomstart', 'zoom', 'zoomend'), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + '.zoom', mousewheeled).on('dblclick.zoom', dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function (g) {
      g.each(function () {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each('start.zoom', function () {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween('zoom:zoom', function () {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([
                (cx - view.x) / view.k,
                (cy - view.y) / view.k,
                dx / view.k
              ], [
                (cx - view1.x) / view1.k,
                (cy - view1.y) / view1.k,
                dx / view1.k
              ]);
            return function (t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each('end.zoom', function () {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function (_) {
      if (!arguments.length)
        return [
          view.x,
          view.y
        ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function (_) {
      if (!arguments.length)
        return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function (_) {
      if (!arguments.length)
        return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.center = function (_) {
      if (!arguments.length)
        return center;
      center = _ && [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.size = function (_) {
      if (!arguments.length)
        return size;
      size = _ && [
        +_[0],
        +_[1]
      ];
      return zoom;
    };
    zoom.x = function (z) {
      if (!arguments.length)
        return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function (z) {
      if (!arguments.length)
        return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [
        (p[0] - view.x) / view.k,
        (p[1] - view.y) / view.k
      ];
    }
    function point(l) {
      return [
        l[0] * view.k + view.x,
        l[1] * view.k + view.y
      ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1)
        x1.domain(x0.range().map(function (x) {
          return (x - view.x) / view.k;
        }).map(x0.invert));
      if (y1)
        y1.domain(y0.range().map(function (y) {
          return (y - view.y) / view.k;
        }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      dispatch({ type: 'zoomstart' });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: 'zoom',
        scale: view.k,
        translate: [
          view.x,
          view.y
        ]
      });
    }
    function zoomended(dispatch) {
      dispatch({ type: 'zoomend' });
    }
    function mousedowned() {
      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === target);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = '.zoom-' + d3.event.changedTouches[0].identifier, touchmove = 'touchmove' + zoomName, touchend = 'touchend' + zoomName, targets = [], subject = d3.select(that).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      started();
      zoomstarted(dispatch);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function (t) {
          if (t.identifier in locations0)
            locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(dispatch);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0)
              break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [
            (p0[0] + p1[0]) / 2,
            (p0[1] + p1[1]) / 2
          ];
          l0 = [
            (l0[0] + l1[0]) / 2,
            (l0[1] + l1[1]) / 2
          ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer)
        clearTimeout(mousewheelTimer);
      else
        translate0 = location(center0 = center || d3.mouse(this)), d3_selection_interrupt.call(this), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function () {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * 0.002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(dispatch);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(dispatch);
      zoomended(dispatch);
    }
    return d3.rebind(zoom, event, 'on');
  };
  var d3_behavior_zoomInfinity = [
    0,
    Infinity
  ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = 'onwheel' in d3_document ? (d3_behavior_zoomDelta = function () {
      return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
    }, 'wheel') : 'onmousewheel' in d3_document ? (d3_behavior_zoomDelta = function () {
      return d3.event.wheelDelta;
    }, 'mousewheel') : (d3_behavior_zoomDelta = function () {
      return -d3.event.detail;
    }, 'MozMousePixelScroll');
  d3.color = d3_color;
  function d3_color() {
  }
  d3_color.prototype.toString = function () {
    return this.rgb() + '';
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse('' + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function () {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360)
        h -= 360;
      else if (h < 0)
        h += 360;
      if (h < 60)
        return m1 + (m2 - m1) * h / 60;
      if (h < 180)
        return m2;
      if (h < 240)
        return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function (k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function (k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function () {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h))
      h = 0;
    if (isNaN(c))
      c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = 0.95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function (k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function (k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function () {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), d3_xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), d3_xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > 0.206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse('' + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + '';
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b)
      return new d3_rgb(i, i, i);
    if (r && r < i)
      r = i;
    if (g && g < i)
      g = i;
    if (b && b < i)
      b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function (k) {
    k = Math.pow(0.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function () {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function () {
    return '#' + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? '0' + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(',');
      switch (m1[1]) {
      case 'hsl': {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }
      case 'rgb': {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format))
      return rgb(color.r, color.g, color.b);
    if (format != null && format.charAt(0) === '#' && !isNaN(color = parseInt(format.substring(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < 0.5 ? d / (max + min) : d / (2 - max - min);
      if (r == max)
        h = (g - b) / d + (g < b ? 6 : 0);
      else if (g == max)
        h = (b - r) / d + 2;
      else
        h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X), y = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / d3_lab_Y), z = d3_xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === '%' ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function (key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === 'function' ? v : function () {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function (url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === 'function')
        callback = mimeType, mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch('beforesend', 'progress', 'load', 'error'), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !('withCredentials' in request) && /^(http(s)?:)?\/\//.test(url))
      request = new XDomainRequest();
    'onload' in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function (event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function (name, value) {
      name = (name + '').toLowerCase();
      if (arguments.length < 2)
        return headers[name];
      if (value == null)
        delete headers[name];
      else
        headers[name] = value + '';
      return xhr;
    };
    xhr.mimeType = function (value) {
      if (!arguments.length)
        return mimeType;
      mimeType = value == null ? null : value + '';
      return xhr;
    };
    xhr.responseType = function (value) {
      if (!arguments.length)
        return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function (value) {
      response = value;
      return xhr;
    };
    [
      'get',
      'post'
    ].forEach(function (method) {
      xhr[method] = function () {
        return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
      };
    });
    xhr.send = function (method, data, callback) {
      if (arguments.length === 2 && typeof data === 'function')
        callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !('accept' in headers))
        headers['accept'] = mimeType + ',*/*';
      if (request.setRequestHeader)
        for (var name in headers)
          request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType)
        request.overrideMimeType(mimeType);
      if (responseType != null)
        request.responseType = responseType;
      if (callback != null)
        xhr.on('error', callback).on('load', function (request) {
          callback(null, request);
        });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function () {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, 'on');
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function (error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function (delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + '\n]'), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3)
        callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function (_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function (request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function (text, f) {
      var o;
      return dsv.parseRows(text, function (row, i) {
        if (o)
          return o(row, i - 1);
        var a = new Function('d', 'return {' + row.map(function (name, i) {
          return JSON.stringify(name) + ': d[' + i + ']';
        }).join(',') + '}');
        o = f ? function (row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function (text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N)
          return EOF;
        if (eol)
          return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34)
                break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10)
              ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10)
            eol = true;
          else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10)
              ++I, ++k;
          } else if (c !== delimiterCode)
            continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++)))
          continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function (rows) {
      if (Array.isArray(rows[0]))
        return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function (row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
        return fields.map(function (field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join('\n');
    };
    dsv.formatRows = function (rows) {
      return rows.map(formatRow).join('\n');
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(',', 'text/csv');
  d3.tsv = d3.dsv('\t', 'text/tab-separated-values');
  d3.touch = function (container, touches, identifier) {
    if (arguments.length < 3)
      identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches)
      for (var i = 0, n = touches.length, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
          return d3_mousePoint(container, touch);
        }
      }
  };
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, 'requestAnimationFrame')] || function (callback) {
      setTimeout(callback, 17);
    };
  d3.timer = function (callback, delay, then) {
    var n = arguments.length;
    if (n < 2)
      delay = 0;
    if (n < 3)
      then = Date.now();
    var time = then + delay, timer = {
        c: callback,
        t: time,
        f: false,
        n: null
      };
    if (d3_timer_queueTail)
      d3_timer_queueTail.n = timer;
    else
      d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function () {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t)
        d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time)
          time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function (x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [
    'y',
    'z',
    'a',
    'f',
    'p',
    'n',
    '\xB5',
    'm',
    '',
    'k',
    'M',
    'G',
    'T',
    'P',
    'E',
    'Z',
    'Y'
  ].map(d3_formatPrefix);
  d3.formatPrefix = function (value, precision) {
    var i = 0;
    if (value) {
      if (value < 0)
        value *= -1;
      if (precision)
        value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function (d) {
        return d / k;
      } : function (d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping ? function (value) {
        var i = value.length, t = [], j = 0, g = locale_grouping[0];
        while (i > 0 && g > 0) {
          t.push(value.substring(i -= g, i + g));
          g = locale_grouping[j = (j + 1) % locale_grouping.length];
        }
        return t.reverse().join(locale_thousands);
      } : d3_identity;
    return function (specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '', symbol = match[4] || '', zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = '', suffix = '', integer = false;
      if (precision)
        precision = +precision.substring(1);
      if (zfill || fill === '0' && align === '=') {
        zfill = fill = '0';
        align = '=';
        if (comma)
          width -= Math.floor((width - 1) / 4);
      }
      switch (type) {
      case 'n':
        comma = true;
        type = 'g';
        break;
      case '%':
        scale = 100;
        suffix = '%';
        type = 'f';
        break;
      case 'p':
        scale = 100;
        suffix = '%';
        type = 'r';
        break;
      case 'b':
      case 'o':
      case 'x':
      case 'X':
        if (symbol === '#')
          prefix = '0' + type.toLowerCase();
      case 'c':
      case 'd':
        integer = true;
        precision = 0;
        break;
      case 's':
        scale = -1;
        type = 'r';
        break;
      }
      if (symbol === '$')
        prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == 'r' && !precision)
        type = 'g';
      if (precision != null) {
        if (type == 'g')
          precision = Math.max(1, Math.min(21, precision));
        else if (type == 'e' || type == 'f')
          precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function (value) {
        var fullSuffix = suffix;
        if (integer && value % 1)
          return '';
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, '-') : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf('.'), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? '' : locale_decimal + value.substring(i + 1);
        if (!zfill && comma)
          before = formatGroup(before);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : '';
        if (zcomma)
          before = formatGroup(padding + before);
        negative += prefix;
        value = before + after;
        return (align === '<' ? negative + value + padding : align === '>' ? padding + negative + value : align === '^' ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function (x) {
      return x.toString(2);
    },
    c: function (x) {
      return String.fromCharCode(x);
    },
    o: function (x) {
      return x.toString(8);
    },
    x: function (x) {
      return x.toString(16);
    },
    X: function (x) {
      return x.toString(16).toUpperCase();
    },
    g: function (x, p) {
      return x.toPrecision(p);
    },
    e: function (x, p) {
      return x.toExponential(p);
    },
    f: function (x, p) {
      return x.toFixed(p);
    },
    r: function (x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + '';
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function () {
      return this._.getUTCDate();
    },
    getDay: function () {
      return this._.getUTCDay();
    },
    getFullYear: function () {
      return this._.getUTCFullYear();
    },
    getHours: function () {
      return this._.getUTCHours();
    },
    getMilliseconds: function () {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function () {
      return this._.getUTCMinutes();
    },
    getMonth: function () {
      return this._.getUTCMonth();
    },
    getSeconds: function () {
      return this._.getUTCSeconds();
    },
    getTime: function () {
      return this._.getTime();
    },
    getTimezoneOffset: function () {
      return 0;
    },
    valueOf: function () {
      return this._.valueOf();
    },
    setDate: function () {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function () {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function () {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function () {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function () {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function () {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function () {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function () {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function () {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt))
            times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1)
          times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function (date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function (date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function (date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function (date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function (date) {
    var day = new d3_date(2000, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function (date, offset) {
    date.setDate(date.getDate() + offset);
  }, function (date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function (date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 60000) / 86400000);
  };
  [
    'sunday',
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday'
  ].forEach(function (day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function (date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function (date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function (date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + 's'] = interval.range;
    d3_time[day + 's'].utc = interval.utc.range;
    d3_time[day + 'OfYear'] = function (date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.substring(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null)
              c = template.charAt(++i);
            if (f = d3_time_formats[c])
              c = f(date, p == null ? c === 'e' ? ' ' : '0' : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.substring(j, i));
        return string.join('');
      }
      format.parse = function (string) {
        var d = {
            y: 1900,
            m: 0,
            d: 1,
            H: 0,
            M: 0,
            S: 0,
            L: 0,
            Z: null
          }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length)
          return null;
        if ('p' in d)
          d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ('j' in d)
          date.setFullYear(d.y, 0, d.j);
        else if ('w' in d && ('W' in d || 'U' in d)) {
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else
          date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function () {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m)
          return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0)
            return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function (template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function (string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function (p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function (d) {
        return locale_shortDays[d.getDay()];
      },
      A: function (d) {
        return locale_days[d.getDay()];
      },
      b: function (d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function (d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function (d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function (d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function (d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function (d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function (d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function (d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function (d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function (d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function (d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function (d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function (d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function (d) {
        return d.getDay();
      },
      W: function (d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function (d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function (d, p) {
        return d3_time_formatPad(d.getFullYear() % 10000, p, 4);
      },
      Z: d3_time_zone,
      '%': function () {
        return '%';
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      '%': d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.substring(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.substring(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.substring(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.substring(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.substring(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
      '-': '',
      _: ' ',
      '0': '0'
    }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp('^(?:' + names.map(d3.requote).join('|') + ')', 'i');
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n)
      map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = -string, i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2000);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? '-' : '+', zh = ~~(abs(z) / 60), zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, '0', 2) + d3_time_formatPad(zm, '0', 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n)
      formats[i][0] = this(formats[i][0]);
    return function (date) {
      var i = 0, f = formats[i];
      while (!f[1](date))
        f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function (locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: '.',
    thousands: ',',
    grouping: [3],
    currency: [
      '$',
      ''
    ],
    dateTime: '%a %b %e %X %Y',
    date: '%m/%d/%Y',
    time: '%H:%M:%S',
    periods: [
      'AM',
      'PM'
    ],
    days: [
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday'
    ],
    shortDays: [
      'Sun',
      'Mon',
      'Tue',
      'Wed',
      'Thu',
      'Fri',
      'Sat'
    ],
    months: [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December'
    ],
    shortMonths: [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec'
    ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {
  }
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function (y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s)
        this.t += d3_adderTemp.t;
      else
        this.s = d3_adderTemp.t;
    },
    reset: function () {
      this.s = this.t = 0;
    },
    valueOf: function () {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function (object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function (feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function (object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n)
        d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function (object, listener) {
      listener.sphere();
    },
    Point: function (object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function (object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n)
        object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function (object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function (object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n)
        d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function (object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function (object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n)
        d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function (object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n)
        d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n)
      coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n)
      d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function (object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function () {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function () {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function () {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function (λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function () {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [
      cosφ * Math.cos(λ),
      cosφ * Math.sin(λ),
      Math.sin(φ)
    ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [
      a[1] * b[2] - a[2] * b[1],
      a[2] * b[0] - a[0] * b[2],
      a[0] * b[1] - a[1] * b[0]
    ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [
      vector[0] * k,
      vector[1] * k,
      vector[2] * k
    ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [
      Math.atan2(cartesian[1], cartesian[0]),
      d3_asin(cartesian[2])
    ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function () {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function () {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0)
          λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);
        else if (dλSum > ε)
          φ1 = 90;
        else if (dλSum < -ε)
          φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [
        λ0 = λ,
        λ1 = λ
      ]);
      if (φ < φ0)
        φ0 = φ;
      if (φ > φ1)
        φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([
        λ * d3_radians,
        φ * d3_radians
      ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [
            normal[1],
            -normal[0],
            0
          ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1)
            φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0)
            φ0 = φi;
        } else {
          if (φ < φ0)
            φ0 = φ;
          if (φ > φ1)
            φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1))
              λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1))
              λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0)
              λ0 = λ;
            if (λ > λ1)
              λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1))
                λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1))
                λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else
        λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε)
        λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function (feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1]))
              a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1]))
              a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best)
            best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [
        [
          NaN,
          NaN
        ],
        [
          NaN,
          NaN
        ]
      ] : [
        [
          λ0,
          φ0
        ],
        [
          λ1,
          φ1
        ]
      ];
    };
  }();
  d3.geo.centroid = function (object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε)
        x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2)
        return [
          NaN,
          NaN
        ];
    }
    return [
      Math.atan2(y, x) * d3_degrees,
      d3_asin(z / Math.sqrt(m)) * d3_degrees
    ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function () {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function () {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function (λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function (λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function () {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0)
        return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i)
          listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length)
      return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v)
        if ((current = current.n) === start)
          return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i)
              listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i)
              listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length))
      return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function (rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function () {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted)
              listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted)
              listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted)
            listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function () {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1]))
          listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([
          λ,
          φ
        ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n)
          return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted)
              listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n)
              listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2)
          ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function () {
        lines.push(line = []);
      },
      point: function (λ, φ) {
        line.push([
          λ,
          φ
        ]);
      },
      lineEnd: d3_noop,
      buffer: function () {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function () {
        if (lines.length > 1)
          lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [
        Math.sin(meridian),
        -Math.cos(meridian),
        0
      ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m)
        continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m)
          j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++)
          break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [
    -π,
    -π / 2
  ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function () {
        listener.lineStart();
        clean = 1;
      },
      point: function (λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε)
            λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε)
            λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function () {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function () {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [
      0,
      -radius
    ] : [
      -π,
      radius - π
    ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function () {
          v00 = v0 = false;
          clean = 1;
        },
        point: function (λ, φ) {
          var point1 = [
              λ,
              φ
            ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v))
            listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function () {
          if (v0)
            listener.lineEnd();
          point0 = null;
        },
        clean: function () {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [
          1,
          0,
          0
        ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant)
        return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0)
        return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two)
        return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0)
        z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0)
        z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [
          q,
          d3_geo_spherical(q1)
        ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r)
        code |= 1;
      else if (λ > r)
        code |= 2;
      if (φ < -r)
        code |= 4;
      else if (φ > r)
        code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function (line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0)
        return;
      r /= dx;
      if (dx < 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      } else if (dx > 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0)
        return;
      r /= dx;
      if (dx < 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      } else if (dx > 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0)
        return;
      r /= dy;
      if (dy < 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      } else if (dy > 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0)
        return;
      r /= dy;
      if (dy < 0) {
        if (r > t1)
          return;
        if (r > t0)
          t0 = r;
      } else if (dy > 0) {
        if (r < t0)
          return;
        if (r < t1)
          t1 = r;
      }
      if (t0 > 0)
        line.a = {
          x: ax + t0 * dx,
          y: ay + t0 * dy
        };
      if (t1 < 1)
        line.b = {
          x: ax + t1 * dx,
          y: ay + t1 * dy
        };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1000000000;
  d3.geo.clipExtent = function () {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
        stream: function (output) {
          if (stream)
            stream.valid = false;
          stream = clip(output);
          stream.valid = true;
          return stream;
        },
        extent: function (_) {
          if (!arguments.length)
            return [
              [
                x0,
                y0
              ],
              [
                x1,
                y1
              ]
            ];
          clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
          if (stream)
            stream.valid = false, stream = null;
          return clipExtent;
        }
      };
    return clipExtent.extent([
      [
        0,
        0
      ],
      [
        960,
        500
      ]
    ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function (listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function () {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([
              x0,
              y1
            ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0)
                ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0)
                --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y))
          listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon)
          polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_)
            bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_)
          listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon)
          ring.push([
            x,
            y
          ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_)
            listener.point(x, y);
          else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v)
                listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert)
      compose.invert = function (x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function (_) {
      if (!arguments.length)
        return [
          φ0 / π * 180,
          φ1 / π * 180
        ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [
        ρ * Math.sin(λ *= n),
        ρ0 - ρ * Math.cos(λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = ρ0 - y;
      return [
        Math.atan2(x, ρ0_y) / n,
        d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))
      ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function () {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function () {
    return d3.geo.conicEqualArea().rotate([
      96,
      0
    ]).center([
      -0.6,
      38.7
    ]).parallels([
      29.5,
      45.5
    ]).scale(1070);
  };
  d3.geo.albersUsa = function () {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([
      154,
      0
    ]).center([
      -2,
      58.5
    ]).parallels([
      55,
      65
    ]);
    var hawaii = d3.geo.conicEqualArea().rotate([
      157,
      0
    ]).center([
      -3,
      19.9
    ]).parallels([
      8,
      18
    ]);
    var point, pointStream = {
        point: function (x, y) {
          point = [
            x,
            y
          ];
        }
      }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function (coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function (stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function (x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function () {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function () {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function () {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function () {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function () {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function (_) {
      if (!arguments.length)
        return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function (_) {
      if (!arguments.length)
        return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * 0.35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function (_) {
      if (!arguments.length)
        return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([
        [
          x - 0.455 * k,
          y - 0.238 * k
        ],
        [
          x + 0.455 * k,
          y + 0.238 * k
        ]
      ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([
        x - 0.307 * k,
        y + 0.201 * k
      ]).clipExtent([
        [
          x - 0.425 * k + ε,
          y + 0.12 * k + ε
        ],
        [
          x - 0.214 * k - ε,
          y + 0.234 * k - ε
        ]
      ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([
        x - 0.205 * k,
        y + 0.212 * k
      ]).clipExtent([
        [
          x - 0.214 * k + ε,
          y + 0.166 * k + ε
        ],
        [
          x - 0.115 * k - ε,
          y + 0.234 * k - ε
        ]
      ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
      point: d3_noop,
      lineStart: d3_noop,
      lineEnd: d3_noop,
      polygonStart: function () {
        d3_geo_pathAreaPolygon = 0;
        d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
      },
      polygonEnd: function () {
        d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
        d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
      }
    };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function (x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function () {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0)
      d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1)
      d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0)
      d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1)
      d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function () {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function () {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function (_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function () {
        if (buffer.length) {
          var result = buffer.join('');
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push('M', x, ',', y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push('M', x, ',', y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push('L', x, ',', y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push('Z');
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z';
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function () {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function () {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function (x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function (x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function () {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function () {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function () {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function (_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = 0.5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function (x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function () {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([
            λ,
            φ
          ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function (_) {
      if (!arguments.length)
        return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function () {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === 'function')
          contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid)
          cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function (object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function (object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [
        d3_geo_centroidX2 / d3_geo_centroidZ2,
        d3_geo_centroidY2 / d3_geo_centroidZ2
      ] : d3_geo_centroidZ1 ? [
        d3_geo_centroidX1 / d3_geo_centroidZ1,
        d3_geo_centroidY1 / d3_geo_centroidZ1
      ] : d3_geo_centroidZ0 ? [
        d3_geo_centroidX0 / d3_geo_centroidZ0,
        d3_geo_centroidY0 / d3_geo_centroidZ0
      ] : [
        NaN,
        NaN
      ];
    };
    path.bounds = function (object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [
        [
          d3_geo_pathBoundsX0,
          d3_geo_pathBoundsY0
        ],
        [
          d3_geo_pathBoundsX1,
          d3_geo_pathBoundsY1
        ]
      ];
    };
    path.projection = function (_) {
      if (!arguments.length)
        return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function (_) {
      if (!arguments.length)
        return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== 'function')
        contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function (_) {
      if (!arguments.length)
        return pointRadius;
      pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function (x, y) {
      return project([
        x * d3_degrees,
        y * d3_degrees
      ]);
    });
    return function (stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function (methods) {
    return {
      stream: function (stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods)
          transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function (x, y) {
      this.stream.point(x, y);
    },
    sphere: function () {
      this.stream.sphere();
    },
    lineStart: function () {
      this.stream.lineStart();
    },
    lineEnd: function () {
      this.stream.lineEnd();
    },
    polygonStart: function () {
      this.stream.polygonStart();
    },
    polygonEnd: function () {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function () {
        stream.sphere();
      },
      lineStart: function () {
        stream.lineStart();
      },
      lineEnd: function () {
        stream.lineEnd();
      },
      polygonStart: function () {
        stream.polygonStart();
      },
      polygonEnd: function () {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function () {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function (x, y) {
        x = project(x, y);
        return [
          x[0] * k + δx,
          δy - x[1] * k
        ];
      }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [
        point[0] * k + δx,
        δy - point[1] * k
      ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [
        point[0] * d3_degrees,
        point[1] * d3_degrees
      ];
    }
    projection.stream = function (output) {
      if (stream)
        stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function (_) {
      if (!arguments.length)
        return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function (_) {
      if (!arguments.length)
        return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function (_) {
      if (!arguments.length)
        return k;
      k = +_;
      return reset();
    };
    projection.translate = function (_) {
      if (!arguments.length)
        return [
          x,
          y
        ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function (_) {
      if (!arguments.length)
        return [
          λ * d3_degrees,
          φ * d3_degrees
        ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function (_) {
      if (!arguments.length)
        return [
          δλ * d3_degrees,
          δφ * d3_degrees,
          δγ * d3_degrees
        ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, 'precision');
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream)
        stream.valid = false, stream = null;
      return projection;
    }
    return function () {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function (x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [
      λ,
      φ
    ];
  }
  (d3.geo.equirectangular = function () {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function (rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function (coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [
      λ > π ? λ - τ : λ < -π ? λ + τ : λ,
      φ
    ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function (λ, φ) {
      return λ += δλ, [
        λ > π ? λ - τ : λ < -π ? λ + τ : λ,
        φ
      ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [
        Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ),
        d3_asin(k * cosδγ + y * sinδγ)
      ];
    }
    rotation.invert = function (λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [
        Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ),
        d3_asin(k * cosδφ - x * sinδφ)
      ];
    };
    return rotation;
  }
  d3.geo.circle = function () {
    var origin = [
        0,
        0
      ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === 'function' ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function (x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: 'Polygon',
        coordinates: [ring]
      };
    }
    circle.origin = function (x) {
      if (!arguments.length)
        return origin;
      origin = x;
      return circle;
    };
    circle.angle = function (x) {
      if (!arguments.length)
        return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function (_) {
      if (!arguments.length)
        return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function (from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to)
          from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - 0.5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([
          cr,
          -sr * Math.cos(t),
          -sr * Math.sin(t)
        ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function (a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function () {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: 'MultiLineString',
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function () {
      return lines().map(function (coordinates) {
        return {
          type: 'LineString',
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function () {
      return {
        type: 'Polygon',
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
      };
    };
    graticule.extent = function (_) {
      if (!arguments.length)
        return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function (_) {
      if (!arguments.length)
        return [
          [
            X0,
            Y0
          ],
          [
            X1,
            Y1
          ]
        ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1)
        _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1)
        _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function (_) {
      if (!arguments.length)
        return [
          [
            x0,
            y0
          ],
          [
            x1,
            y1
          ]
        ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1)
        _ = x0, x0 = x1, x1 = _;
      if (y0 > y1)
        _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function (_) {
      if (!arguments.length)
        return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function (_) {
      if (!arguments.length)
        return [
          DX,
          DY
        ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function (_) {
      if (!arguments.length)
        return [
          dx,
          dy
        ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function (_) {
      if (!arguments.length)
        return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([
      [
        -180,
        -90 + ε
      ],
      [
        180,
        90 - ε
      ]
    ]).minorExtent([
      [
        -180,
        -80 - ε
      ],
      [
        180,
        80 + ε
      ]
    ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function (x) {
      return y.map(function (y) {
        return [
          x,
          y
        ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function (y) {
      return x.map(function (x) {
        return [
          x,
          y
        ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function () {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: 'LineString',
        coordinates: [
          source_ || source.apply(this, arguments),
          target_ || target.apply(this, arguments)
        ]
      };
    }
    greatArc.distance = function () {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function (_) {
      if (!arguments.length)
        return source;
      source = _, source_ = typeof _ === 'function' ? null : _;
      return greatArc;
    };
    greatArc.target = function (_) {
      if (!arguments.length)
        return target;
      target = _, target_ = typeof _ === 'function' ? null : _;
      return greatArc;
    };
    greatArc.precision = function () {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function (source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function (t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [
        Math.atan2(y, x) * d3_degrees,
        Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees
      ];
    } : function () {
      return [
        x0 * d3_degrees,
        y0 * d3_degrees
      ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function (object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function (λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function () {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [
        k * cosφ * Math.sin(λ),
        k * Math.sin(φ)
      ];
    }
    azimuthal.invert = function (x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [
        Math.atan2(x * sinc, ρ * cosc),
        Math.asin(ρ && y * sinc / ρ)
      ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function (ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function () {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function () {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function (φ) {
        return Math.tan(π / 4 + φ / 2);
      }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n)
      return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε)
          φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε)
          φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [
        ρ * Math.sin(n * λ),
        F - ρ * Math.cos(n * λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [
        Math.atan2(x, ρ0_y) / n,
        2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ
      ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function () {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε)
      return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [
        ρ * Math.sin(n * λ),
        G - ρ * Math.cos(n * λ)
      ];
    }
    forward.invert = function (x, y) {
      var ρ0_y = G - y;
      return [
        Math.atan2(x, ρ0_y) / n,
        G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)
      ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function () {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function () {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [
      λ,
      Math.log(Math.tan(π / 4 + φ / 2))
    ];
  }
  d3_geo_mercator.invert = function (x, y) {
    return [
      x,
      2 * Math.atan(Math.exp(y)) - halfπ
    ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function () {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function () {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function (_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([
            [
              t[0] - k,
              t[1] - k
            ],
            [
              t[0] + k,
              t[1] + k
            ]
          ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function () {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function () {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function () {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function (ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function () {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [
      Math.log(Math.tan(π / 4 + φ / 2)),
      -λ
    ];
  }
  d3_geo_transverseMercator.invert = function (x, y) {
    return [
      -y,
      2 * Math.atan(Math.exp(x)) - halfπ
    ];
  };
  (d3.geo.transverseMercator = function () {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function (_) {
      return _ ? center([
        -_[1],
        _[0]
      ]) : (_ = center(), [
        _[1],
        -_[0]
      ]);
    };
    projection.rotate = function (_) {
      return _ ? rotate([
        _[0],
        _[1],
        _.length > 2 ? _[2] + 90 : 90
      ]) : (_ = rotate(), [
        _[0],
        _[1],
        _[2] - 90
      ]);
    };
    return rotate([
      0,
      0,
      90
    ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function (vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length)
      return hull(vertices);
    function hull(data) {
      if (data.length < 3)
        return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([
          +fx.call(this, data[i], i),
          +fy.call(this, data[i], i),
          i
        ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++)
        flippedPoints.push([
          points[i][0],
          -points[i][1]
        ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i)
        polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i)
        polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function (_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function (_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [
        0,
        1
      ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0)
        --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function (coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function () {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * 0.5;
  };
  d3_geom_polygonPrototype.centroid = function (k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length)
      k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [
      x * k,
      y * k
    ];
  };
  d3_geom_polygonPrototype.clip = function (subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed)
        subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [
      x1 + ua * x21,
      y1 + ua * y21
    ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
        x: x,
        y: y
      }, previous = beach.P, next = beach.N, disappearing = [beach];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε)
        node = node.L;
      else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc)
      return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
        x: (cy * hb - by * hc) / d + ax,
        y: (bx * hc - cx * hb) / d + ay
      };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2)
      return rfocx;
    var lArc = arc.P;
    if (!lArc)
      return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2)
      return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2)
      return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc)
      return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function () {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a)
        halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare())
        continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc)
      return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite)
      return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2)
      return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L)
          node = node.L;
        else {
          before = node.P;
          break;
        }
      } else {
        if (node.R)
          node = node.R;
        else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before)
      d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P)
        d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb)
      return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1)
        return;
      if (lx > rx) {
        if (!va)
          va = {
            x: fx,
            y: y0
          };
        else if (va.y >= y1)
          return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va)
          va = {
            x: fx,
            y: y1
          };
        else if (va.y < y0)
          return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va)
            va = {
              x: (y0 - fb) / fm,
              y: y0
            };
          else if (va.y >= y1)
            return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va)
            va = {
              x: (y1 - fb) / fm,
              y: y1
            };
          else if (va.y < y0)
            return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va)
            va = {
              x: x0,
              y: fm * x0 + fb
            };
          else if (va.x >= x1)
            return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va)
            va = {
              x: x1,
              y: fm * x1 + fb
            };
          else if (va.x < x0)
            return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va)
      d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb)
      d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function () {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function () {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function (after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N)
          after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L)
            after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function (node) {
      if (node.N)
        node.N.P = node.P;
      if (node.P)
        node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left)
        next = right;
      else if (!right)
        next = left;
      else
        next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node)
          parent.L = next;
        else
          parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node)
        node.U = parent;
      if (red)
        return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._)
          break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node)
        node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p)
        parent.L = q;
      else
        parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R)
      p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p)
        parent.L = q;
      else
        parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L)
      p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L)
      node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox)
      d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function (points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points)
      return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function (e) {
            var s = e.start();
            return [
              s.x,
              s.y
            ];
          }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [
            [
              x0,
              y1
            ],
            [
              x1,
              y1
            ],
            [
              x1,
              y0
            ],
            [
              x0,
              y0
            ]
          ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function (d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function (data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
        return edge.l && edge.r;
      }).map(function (edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function (data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([
              data[i],
              data[s0.i],
              data[s1.i]
            ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function (_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function (_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function (_) {
      if (!arguments.length)
        return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function (_) {
      if (!arguments.length)
        return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [
        [
          0,
          0
        ],
        _
      ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [
    [
      -1000000,
      -1000000
    ],
    [
      1000000,
      1000000
    ]
  ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function (vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function (points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat)
          for (i = 0; i < n; ++i) {
            d = data[i];
            if (d.x < x1_)
              x1_ = d.x;
            if (d.y < y1_)
              y1_ = d.y;
            if (d.x > x2_)
              x2_ = d.x;
            if (d.y > y2_)
              y2_ = d.y;
            xs.push(d.x);
            ys.push(d.y);
          }
        else
          for (i = 0; i < n; ++i) {
            var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
            if (x_ < x1_)
              x1_ = x_;
            if (y_ < y1_)
              y1_ = y_;
            if (x_ > x2_)
              x2_ = x_;
            if (y_ > y2_)
              y2_ = y_;
            xs.push(x_);
            ys.push(y_);
          }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy)
        y2_ = y1_ + dx;
      else
        x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y))
          return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < 0.01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right)
          x1 = sx;
        else
          x2 = sx;
        if (bottom)
          y1 = sy;
        else
          y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function (d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function (f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else
        data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function (_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function (_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function (_) {
      if (!arguments.length)
        return x1 == null ? null : [
          [
            x1,
            y1
          ],
          [
            x2,
            y2
          ]
        ];
      if (_ == null)
        x1 = y1 = x2 = y2 = null;
      else
        x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function (_) {
      if (!arguments.length)
        return x1 == null ? null : [
          x2 - x1,
          y2 - y1
        ];
      if (_ == null)
        x1 = y1 = x2 = y2 = null;
      else
        x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, children = node.nodes;
      if (children[0])
        d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1])
        d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2])
        d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3])
        d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function (t) {
      return '#' + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function (t) {
      for (k in i)
        c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function (t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + '', b = b + '';
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.substring(bi, bs);
        if (s[i])
          s[i] += bs;
        else
          s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i])
          s[i] += bm;
        else
          s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.substring(bi);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
      return b(t) + '';
    }) : function () {
      return b;
    } : (b = q.length, function (t) {
      for (var i = 0, o; i < b; ++i)
        s[(o = q[i]).i] = o.x(t);
      return s.join('');
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, 'g');
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b)));
    return f;
  }
  d3.interpolators = [function (a, b) {
      var t = typeof b;
      return (t === 'string' ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === 'object' && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
    }];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i)
      x.push(d3_interpolate(a[i], b[i]));
    for (; i < na; ++i)
      c[i] = a[i];
    for (; i < nb; ++i)
      c[i] = b[i];
    return function (t) {
      for (i = 0; i < n0; ++i)
        c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function () {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function () {
      return d3_ease_quad;
    },
    cubic: function () {
      return d3_ease_cubic;
    },
    sin: function () {
      return d3_ease_sin;
    },
    exp: function () {
      return d3_ease_exp;
    },
    circle: function () {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function () {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    'in': d3_identity,
    out: d3_ease_reverse,
    'in-out': d3_ease_reflect,
    'out-in': function (f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function (name) {
    var i = name.indexOf('-'), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : 'in';
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function (t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function (t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function (t) {
      return 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0)
      return 0;
    if (t >= 1)
      return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < 0.5 ? t3 : 3 * (t - t2) + t3 - 0.75);
  }
  function d3_ease_poly(e) {
    return function (t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2)
      p = 0.45;
    if (arguments.length)
      s = p / τ * Math.asin(1 / a);
    else
      a = 1, s = p / 4;
    return function (t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s)
      s = 1.70158;
    return function (t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc))
      bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh))
      bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180)
      bh -= 360;
    else if (bh < -180)
      bh += 360;
    return function (t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + '';
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs))
      bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh))
      bh = 0, ah = isNaN(ah) ? b.h : ah;
    else if (bh > 180)
      bh -= 360;
    else if (bh < -180)
      bh += 360;
    return function (t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + '';
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function (t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + '';
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function (t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function (string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, 'g');
    return (d3.transform = function (string) {
      if (string != null) {
        g.setAttribute('transform', string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [
        m.a,
        m.b
      ], r1 = [
        m.c,
        m.d
      ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [
      m.e,
      m.f
    ];
    this.scale = [
      kx,
      ky
    ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function () {
    return 'translate(' + this.translate + ')rotate(' + this.rotate + ')skewX(' + this.skew + ')scale(' + this.scale + ')';
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push('translate(', null, ',', null, ')');
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push('translate(' + tb + ')');
    } else {
      s.push('');
    }
    if (ra != rb) {
      if (ra - rb > 180)
        rb += 360;
      else if (rb - ra > 180)
        ra += 360;
      q.push({
        i: s.push(s.pop() + 'rotate(', null, ')') - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + 'rotate(' + rb + ')');
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + 'skewX(', null, ')') - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + 'skewX(' + wb + ')');
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + 'scale(', null, ',', null, ')');
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + 'scale(' + kb + ')');
    }
    n = q.length;
    return function (t) {
      var i = -1, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join('');
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function (x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function (x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function () {
    return function (links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n)
        paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [start];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b)
      return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function () {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function (a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function (d, i) {
          d.sort(function (a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + '-' + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + '-' + j], target = subgroups[j + '-' + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords)
        resort();
    }
    function resort() {
      chords.sort(function (a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function (x) {
      if (!arguments.length)
        return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function (x) {
      if (!arguments.length)
        return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function (x) {
      if (!arguments.length)
        return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function (x) {
      if (!arguments.length)
        return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function (x) {
      if (!arguments.length)
        return sortChords;
      sortChords = x;
      if (chords)
        resort();
      return chord;
    };
    chord.chords = function () {
      if (!chords)
        relayout();
      return chords;
    };
    chord.groups = function () {
      if (!groups)
        relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function () {
    var force = {}, event = d3.dispatch('start', 'tick', 'end'), size = [
        1,
        1
      ], drag, alpha, friction = 0.9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = 0.1, theta2 = 0.64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function (quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function () {
      if ((alpha *= 0.99) < 0.005) {
        event.end({
          type: 'end',
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k)
          while (++i < n) {
            o = nodes[i];
            o.x += (x - o.x) * k;
            o.y += (y - o.y) * k;
          }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: 'tick',
        alpha: alpha
      });
    };
    force.nodes = function (x) {
      if (!arguments.length)
        return nodes;
      nodes = x;
      return force;
    };
    force.links = function (x) {
      if (!arguments.length)
        return links;
      links = x;
      return force;
    };
    force.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return force;
    };
    force.linkDistance = function (x) {
      if (!arguments.length)
        return linkDistance;
      linkDistance = typeof x === 'function' ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function (x) {
      if (!arguments.length)
        return linkStrength;
      linkStrength = typeof x === 'function' ? x : +x;
      return force;
    };
    force.friction = function (x) {
      if (!arguments.length)
        return friction;
      friction = +x;
      return force;
    };
    force.charge = function (x) {
      if (!arguments.length)
        return charge;
      charge = typeof x === 'function' ? x : +x;
      return force;
    };
    force.chargeDistance = function (x) {
      if (!arguments.length)
        return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function (x) {
      if (!arguments.length)
        return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function (x) {
      if (!arguments.length)
        return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function (x) {
      if (!arguments.length)
        return alpha;
      x = +x;
      if (alpha) {
        if (x > 0)
          alpha = x;
        else
          alpha = 0;
      } else if (x > 0) {
        event.start({
          type: 'start',
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function () {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == 'number')
          o.source = nodes[o.source];
        if (typeof o.target == 'number')
          o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x))
          o.x = position('x', w);
        if (isNaN(o.y))
          o.y = position('y', h);
        if (isNaN(o.px))
          o.px = o.x;
        if (isNaN(o.py))
          o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === 'function')
        for (i = 0; i < m; ++i)
          distances[i] = +linkDistance.call(this, links[i], i);
      else
        for (i = 0; i < m; ++i)
          distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === 'function')
        for (i = 0; i < m; ++i)
          strengths[i] = +linkStrength.call(this, links[i], i);
      else
        for (i = 0; i < m; ++i)
          strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === 'function')
        for (i = 0; i < n; ++i)
          charges[i] = +charge.call(this, nodes[i], i);
      else
        for (i = 0; i < n; ++i)
          charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m)
          if (!isNaN(x = candidates[j][dimension]))
            return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function () {
      return force.alpha(0.1);
    };
    force.stop = function () {
      return force.alpha(0);
    };
    force.drag = function () {
      if (!drag)
        drag = d3.behavior.drag().origin(d3_identity).on('dragstart.force', d3_layout_forceDragstart).on('drag.force', dragmove).on('dragend.force', d3_layout_forceDragend);
      if (!arguments.length)
        return drag;
      this.on('mouseover.force', d3_layout_forceMouseover).on('mouseout.force', d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, 'on');
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null)
          continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - 0.5;
        quad.point.y += Math.random() - 0.5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function () {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [root], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value)
            node.value = 0;
          node.children = childs;
        } else {
          if (value)
            node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function (node) {
        var childs, parent;
        if (sort && (childs = node.children))
          childs.sort(sort);
        if (value && (parent = node.parent))
          parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function (x) {
      if (!arguments.length)
        return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function (x) {
      if (!arguments.length)
        return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function (x) {
      if (!arguments.length)
        return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function (root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function (node) {
          if (node.children)
            node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function (node) {
          var parent;
          if (!node.children)
            node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent)
            parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, 'sort', 'children', 'value');
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [node];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0)
          nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [node], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n)
          nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function (parent) {
      return (parent.children || []).map(function (child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function () {
    var hierarchy = d3.layout.hierarchy(), size = [
        1,
        1
      ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n)
          d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function () {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function (d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === 'function' ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === 'function' ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null)
        index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
          return values[j] - values[i];
        } : function (i, j) {
          return sort(data[i], data[j]);
        });
      var arcs = [];
      index.forEach(function (i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function (x) {
      if (!arguments.length)
        return value;
      value = x;
      return pie;
    };
    pie.sort = function (x) {
      if (!arguments.length)
        return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function (x) {
      if (!arguments.length)
        return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function (x) {
      if (!arguments.length)
        return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function () {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function (d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function (d) {
        return d.map(function (v, i) {
          return [
            x.call(stack, v, i),
            y.call(stack, v, i)
          ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function (x) {
      if (!arguments.length)
        return values;
      values = x;
      return stack;
    };
    stack.order = function (x) {
      if (!arguments.length)
        return order;
      order = typeof x === 'function' ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function (x) {
      if (!arguments.length)
        return offset;
      offset = typeof x === 'function' ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function (z) {
      if (!arguments.length)
        return x;
      x = z;
      return stack;
    };
    stack.y = function (z) {
      if (!arguments.length)
        return y;
      y = z;
      return stack;
    };
    stack.out = function (z) {
      if (!arguments.length)
        return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    'inside-out': function (data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function (a, b) {
          return max[a] - max[b];
        }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function (data) {
      return d3.range(data.length).reverse();
    },
    'default': d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function (data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++)
          o += data[i][j][1];
        if (o > max)
          max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function (data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i)
          s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0)
          o0 = o;
      }
      for (j = 0; j < m; ++j)
        y0[j] -= o0;
      return y0;
    },
    expand: function (data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++)
          o += data[i][j][1];
        if (o)
          for (i = 0; i < n; i++)
            data[i][j][1] /= o;
        else
          for (i = 0; i < n; i++)
            data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j)
        y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m)
      y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (; i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function () {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function (x) {
      if (!arguments.length)
        return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function (x) {
      if (!arguments.length)
        return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function (x) {
      if (!arguments.length)
        return binner;
      binner = typeof x === 'number' ? function (range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function (x) {
      if (!arguments.length)
        return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n)
      f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [
      d3.min(values),
      d3.max(values)
    ];
  }
  d3.layout.pack = function () {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [
        1,
        1
      ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === 'function' ? radius : function () {
          return radius;
        };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function (d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function (d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function (d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function (_) {
      if (!arguments.length)
        return size;
      size = _;
      return pack;
    };
    pack.radius = function (_) {
      if (!arguments.length)
        return radius;
      radius = _ == null || typeof _ === 'function' ? _ : +_;
      return pack;
    };
    pack.padding = function (_) {
      if (!arguments.length)
        return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return 0.999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length))
      return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r)
              d3_layout_packSplice(a, b = j);
            else
              d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n)
        d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = 0.5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function () {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
        1,
        1
      ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize)
        d3_layout_hierarchyVisitBefore(root0, sizeNode);
      else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function (node) {
          if (node.x < left.x)
            left = node;
          if (node.x > right.x)
            right = node;
          if (node.depth > bottom.depth)
            bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
          A: null,
          children: [root0]
        }, queue = [root1], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function (x) {
      if (!arguments.length)
        return separation;
      separation = x;
      return tree;
    };
    tree.size = function (x) {
      if (!arguments.length)
        return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function (x) {
      if (!arguments.length)
        return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function () {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
        1,
        1
      ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function (node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function (x) {
      if (!arguments.length)
        return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function (x) {
      if (!arguments.length)
        return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function (x) {
      if (!arguments.length)
        return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function (child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function (x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function () {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [
        1,
        1
      ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = 'squarify', ratio = 0.5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === 'slice' ? rect.dx : mode === 'dice' ? rect.dy : mode === 'slice-dice' ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== 'squarify' || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area))
          continue;
        if (r < rmin)
          rmin = r;
        if (r > rmax)
          rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy)
          v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx)
          v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies)
        hierarchy.revalue(root);
      scale([root], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky)
        stickies = nodes;
      return nodes;
    }
    treemap.size = function (x) {
      if (!arguments.length)
        return size;
      size = x;
      return treemap;
    };
    treemap.padding = function (x) {
      if (!arguments.length)
        return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === 'number' ? [
          p,
          p,
          p,
          p
        ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === 'function' ? padFunction : type === 'number' ? (x = [
        x,
        x,
        x,
        x
      ], padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function (x) {
      if (!arguments.length)
        return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function (x) {
      if (!arguments.length)
        return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function (x) {
      if (!arguments.length)
        return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function (x) {
      if (!arguments.length)
        return mode;
      mode = x + '';
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function (µ, σ) {
      var n = arguments.length;
      if (n < 2)
        σ = 1;
      if (n < 1)
        µ = 0;
      return function () {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function () {
      var random = d3.random.normal.apply(d3, arguments);
      return function () {
        return Math.exp(random());
      };
    },
    bates: function (m) {
      var random = d3.random.irwinHall(m);
      return function () {
        return random() / m;
      };
    },
    irwinHall: function (m) {
      return function () {
        for (var s = 0, j = 0; j < m; j++)
          s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [
      start,
      stop
    ] : [
      stop,
      start
    ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function (x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function (x) {
        return Math.floor(x / step) * step;
      },
      ceil: function (x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function (x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function () {
    return d3_scale_linear([
      0,
      1
    ], [
      0,
      1
    ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function (y) {
      return input(y);
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function (x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function (x) {
      if (!arguments.length)
        return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function (x) {
      if (!arguments.length)
        return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function (m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function () {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, 'range', 'rangeRound', 'interpolate', 'clamp');
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null)
      m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= 0.15)
      step *= 10;
    else if (err <= 0.35)
      step *= 5;
    else if (err <= 0.75)
      step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * 0.5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === 's') {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7])
          match[7] = '.' + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = 'f';
        format = d3.format(match.join(''));
        return function (d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7])
        match[7] = '.' + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join('');
    } else {
      format = ',.' + d3_scale_linearPrecision(range[2]) + 'f';
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + 0.01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== 'e') : p - (type === '%') * 2;
  }
  d3.scale.log = function () {
    return d3_scale_log(d3.scale.linear().domain([
      0,
      1
    ]), 10, true, [
      1,
      10
    ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function (x) {
      return pow(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function (_) {
      if (!arguments.length)
        return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function () {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function () {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (; i < j; i++)
            for (var k = 1; k < n; k++)
              ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (; i++ < j;)
            for (var k = n - 1; k > 0; k--)
              ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {
        }
        for (j = ticks.length; ticks[j - 1] > v; j--) {
        }
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function (n, format) {
      if (!arguments.length)
        return d3_scale_logFormat;
      if (arguments.length < 2)
        format = d3_scale_logFormat;
      else if (typeof format !== 'function')
        format = d3.format(format);
      var k = Math.max(0.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, Math.floor), e;
      return function (d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : '';
      };
    };
    scale.copy = function () {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format('.0e'), d3_scale_logNiceNegative = {
      floor: function (x) {
        return -Math.ceil(-x);
      },
      ceil: function (x) {
        return -Math.floor(-x);
      }
    };
  d3.scale.pow = function () {
    return d3_scale_pow(d3.scale.linear(), 1, [
      0,
      1
    ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function (x) {
      return powb(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function (m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function (x) {
      if (!arguments.length)
        return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function () {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function (x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function () {
    return d3.scale.pow().exponent(0.5);
  };
  d3.scale.ordinal = function () {
    return d3_scale_ordinal([], {
      t: 'range',
      a: [[]]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === 'range' ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function (i) {
        return start + step * i;
      });
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n)
        if (!index.has(xi = x[i]))
          index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: 'range',
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function (x, padding) {
      if (arguments.length < 2)
        padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: 'rangePoints',
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function (x, padding, outerPadding) {
      if (arguments.length < 2)
        padding = 0;
      if (arguments.length < 3)
        outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse)
        range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: 'rangeBands',
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function (x, padding, outerPadding) {
      if (arguments.length < 2)
        padding = 0;
      if (arguments.length < 3)
        outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse)
        range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: 'rangeRoundBands',
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function () {
      return rangeBand;
    };
    scale.rangeExtent = function () {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function () {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function () {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function () {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function () {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function () {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [
    2062260,
    16744206,
    2924588,
    14034728,
    9725885,
    9197131,
    14907330,
    8355711,
    12369186,
    1556175
  ].map(d3_rgbString);
  var d3_category20 = [
    2062260,
    11454440,
    16744206,
    16759672,
    2924588,
    10018698,
    14034728,
    16750742,
    9725885,
    12955861,
    9197131,
    12885140,
    14907330,
    16234194,
    8355711,
    13092807,
    12369186,
    14408589,
    1556175,
    10410725
  ].map(d3_rgbString);
  var d3_category20b = [
    3750777,
    5395619,
    7040719,
    10264286,
    6519097,
    9216594,
    11915115,
    13556636,
    9202993,
    12426809,
    15186514,
    15190932,
    8666169,
    11356490,
    14049643,
    15177372,
    8077683,
    10834324,
    13528509,
    14589654
  ].map(d3_rgbString);
  var d3_category20c = [
    3244733,
    7057110,
    10406625,
    13032431,
    15095053,
    16616764,
    16625259,
    16634018,
    3253076,
    7652470,
    10607003,
    13101504,
    7695281,
    10394312,
    12369372,
    14342891,
    6513507,
    9868950,
    12434877,
    14277081
  ].map(d3_rgbString);
  d3.scale.quantile = function () {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q)
        thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x))
        return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.filter(d3_number).sort(d3_ascending);
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function () {
      return thresholds;
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      return y < 0 ? [
        NaN,
        NaN
      ] : [
        y > 0 ? thresholds[y - 1] : domain[0],
        y < thresholds.length ? thresholds[y] : domain[domain.length - 1]
      ];
    };
    scale.copy = function () {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function () {
    return d3_scale_quantize(0, 1, [
      0,
      1
    ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function (x) {
      if (!arguments.length)
        return [
          x0,
          x1
        ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function (x) {
      if (!arguments.length)
        return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [
        y,
        y + 1 / kx
      ];
    };
    scale.copy = function () {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function () {
    return d3_scale_threshold([0.5], [
      0,
      1
    ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x)
        return range[d3.bisect(domain, x)];
    }
    scale.domain = function (_) {
      if (!arguments.length)
        return domain;
      domain = _;
      return scale;
    };
    scale.range = function (_) {
      if (!arguments.length)
        return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function (y) {
      y = range.indexOf(y);
      return [
        domain[y - 1],
        domain[y]
      ];
    };
    scale.copy = function () {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function () {
    return d3_scale_identity([
      0,
      1
    ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function (x) {
      if (!arguments.length)
        return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function (m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function (m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function () {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function () {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, a0 = a1, a1 = da), a1 - a0), df = da < π ? '0' : '1', c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'M0,' + r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + -r0 + 'A' + r0 + ',' + r0 + ' 0 1,0 0,' + r0 + 'Z' : 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,1 0,' + r1 + 'Z' : r0 ? 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L' + r0 * c1 + ',' + r0 * s1 + 'A' + r0 + ',' + r0 + ' 0 ' + df + ',0 ' + r0 * c0 + ',' + r0 * s0 + 'Z' : 'M' + r1 * c0 + ',' + r1 * s0 + 'A' + r1 + ',' + r1 + ' 0 ' + df + ',1 ' + r1 * c1 + ',' + r1 * s1 + 'L0,0' + 'Z';
    }
    arc.innerRadius = function (v) {
      if (!arguments.length)
        return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function (v) {
      if (!arguments.length)
        return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function (v) {
      if (!arguments.length)
        return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function (v) {
      if (!arguments.length)
        return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function () {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [
        Math.cos(a) * r,
        Math.sin(a) * r
      ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = 0.7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push('M', interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([
            +fx.call(this, d, i),
            +fy.call(this, d, i)
          ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length)
        segment();
      return segments.length ? segments.join('') : null;
    }
    line.x = function (_) {
      if (!arguments.length)
        return x;
      x = _;
      return line;
    };
    line.y = function (_) {
      if (!arguments.length)
        return y;
      y = _;
      return line;
    };
    line.defined = function (_) {
      if (!arguments.length)
        return defined;
      defined = _;
      return line;
    };
    line.interpolate = function (_) {
      if (!arguments.length)
        return interpolateKey;
      if (typeof _ === 'function')
        interpolateKey = interpolate = _;
      else
        interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function (_) {
      if (!arguments.length)
        return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function () {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    'linear-closed': d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    'step-before': d3_svg_lineStepBefore,
    'step-after': d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    'basis-open': d3_svg_lineBasisOpen,
    'basis-closed': d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    'cardinal-open': d3_svg_lineCardinalOpen,
    'cardinal-closed': d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function (key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join('L');
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + 'Z';
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('H', (p[0] + (p = points[i])[0]) / 2, 'V', p[1]);
    if (n > 1)
      path.push('H', p[0]);
    return path.join('');
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('V', (p = points[i])[1], 'H', p[0]);
    return path.join('');
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [
        p[0],
        ',',
        p[1]
      ];
    while (++i < n)
      path.push('H', (p = points[i])[0], 'V', p[1]);
    return path.join('');
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = '', p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += 'Q' + (p[0] - t0[0] * 2 / 3) + ',' + (p[1] - t0[1] * 2 / 3) + ',' + p[0] + ',' + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += 'C' + (p0[0] + t0[0]) + ',' + (p0[1] + t0[1]) + ',' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += 'S' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += 'Q' + (p[0] + t[0] * 2 / 3) + ',' + (p[1] + t[1] * 2 / 3) + ',' + lp[0] + ',' + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([
        a * (p2[0] - p0[0]),
        a * (p2[1] - p0[1])
      ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3)
      return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [
        x0,
        x0,
        x0,
        (pi = points[1])[0]
      ], py = [
        y0,
        y0,
        y0,
        pi[1]
      ], path = [
        x0,
        ',',
        y0,
        'L',
        d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
        ',',
        d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
      ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push('L', pi);
    return path.join('');
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4)
      return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [0], py = [0];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + ',' + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join('');
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
      ',',
      d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
    ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join('');
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [
      0,
      2 / 3,
      1 / 3,
      0
    ], d3_svg_lineBasisBezier2 = [
      0,
      1 / 3,
      2 / 3,
      0
    ], d3_svg_lineBasisBezier3 = [
      0,
      1 / 6,
      2 / 3,
      1 / 6
    ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push('C', d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([
        s || 0,
        m[i] * s || 0
      ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function () {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = 'L', tension = 0.7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function () {
          return x;
        } : d3_functor(x1), fy1 = y0 === y1 ? function () {
          return y;
        } : d3_functor(y1), x, y;
      function segment() {
        segments.push('M', interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), 'Z');
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([
            x = +fx0.call(this, d, i),
            y = +fy0.call(this, d, i)
          ]);
          points1.push([
            +fx1.call(this, d, i),
            +fy1.call(this, d, i)
          ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length)
        segment();
      return segments.length ? segments.join('') : null;
    }
    area.x = function (_) {
      if (!arguments.length)
        return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function (_) {
      if (!arguments.length)
        return x0;
      x0 = _;
      return area;
    };
    area.x1 = function (_) {
      if (!arguments.length)
        return x1;
      x1 = _;
      return area;
    };
    area.y = function (_) {
      if (!arguments.length)
        return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function (_) {
      if (!arguments.length)
        return y0;
      y0 = _;
      return area;
    };
    area.y1 = function (_) {
      if (!arguments.length)
        return y1;
      y1 = _;
      return area;
    };
    area.defined = function (_) {
      if (!arguments.length)
        return defined;
      defined = _;
      return area;
    };
    area.interpolate = function (_) {
      if (!arguments.length)
        return interpolateKey;
      if (typeof _ === 'function')
        interpolateKey = interpolate = _;
      else
        interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? 'M' : 'L';
      return area;
    };
    area.tension = function (_) {
      if (!arguments.length)
        return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function () {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function () {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function () {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return 'M' + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + 'Z';
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [
          r * Math.cos(a0),
          r * Math.sin(a0)
        ],
        p1: [
          r * Math.cos(a1),
          r * Math.sin(a1)
        ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return 'A' + r + ',' + r + ' 0 ' + +(a > π) + ',1 ' + p;
    }
    function curve(r0, p0, r1, p1) {
      return 'Q 0,0 ' + p1;
    }
    chord.radius = function (v) {
      if (!arguments.length)
        return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function (v) {
      if (!arguments.length)
        return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function (v) {
      if (!arguments.length)
        return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function (v) {
      if (!arguments.length)
        return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function (v) {
      if (!arguments.length)
        return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function () {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [
          p0,
          {
            x: p0.x,
            y: m
          },
          {
            x: p3.x,
            y: m
          },
          p3
        ];
      p = p.map(projection);
      return 'M' + p[0] + 'C' + p[1] + ' ' + p[2] + ' ' + p[3];
    }
    diagonal.source = function (x) {
      if (!arguments.length)
        return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function (x) {
      if (!arguments.length)
        return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function (x) {
      if (!arguments.length)
        return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [
      d.x,
      d.y
    ];
  }
  d3.svg.diagonal.radial = function () {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function (x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function () {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [
        r * Math.cos(a),
        r * Math.sin(a)
      ];
    };
  }
  d3.svg.symbol = function () {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function (x) {
      if (!arguments.length)
        return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function (x) {
      if (!arguments.length)
        return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return 'circle';
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return 'M0,' + r + 'A' + r + ',' + r + ' 0 1,1 0,' + -r + 'A' + r + ',' + r + ' 0 1,1 0,' + r + 'Z';
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function (size) {
      var r = Math.sqrt(size / 5) / 2;
      return 'M' + -3 * r + ',' + -r + 'H' + -r + 'V' + -3 * r + 'H' + r + 'V' + -r + 'H' + 3 * r + 'V' + r + 'H' + r + 'V' + 3 * r + 'H' + -r + 'V' + r + 'H' + -3 * r + 'Z';
    },
    diamond: function (size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return 'M0,' + -ry + 'L' + rx + ',0' + ' 0,' + ry + ' ' + -rx + ',0' + 'Z';
    },
    square: function (size) {
      var r = Math.sqrt(size) / 2;
      return 'M' + -r + ',' + -r + 'L' + r + ',' + -r + ' ' + r + ',' + r + ' ' + -r + ',' + r + 'Z';
    },
    'triangle-down': function (size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return 'M0,' + ry + 'L' + rx + ',' + -ry + ' ' + -rx + ',' + -ry + 'Z';
    },
    'triangle-up': function (size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return 'M0,' + -ry + 'L' + rx + ',' + ry + ' ' + -rx + ',' + ry + 'Z';
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function (selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function (selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ('__data__' in node)
            subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function (selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m;) {
      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o;) {
            if (subnode = subnodes[k])
              d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function (filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== 'function')
      filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function (name, tween) {
    var id = this.id;
    if (arguments.length < 2)
      return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function (node) {
      node.__transition__[id].tween.remove(name);
    } : function (node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function (node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function (nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS)
        this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == 'transform' ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += '', function () {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function (t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += '', function () {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function (t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, 'attr.' + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function (nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function (t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function (t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween('attr.' + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function (name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== 'string') {
        if (n < 2)
          value = '';
        for (priority in name)
          this.style(priority, name[priority], value);
        return this;
      }
      priority = '';
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += '', function () {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function (t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, 'style.' + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function (name, tween, priority) {
    if (arguments.length < 3)
      priority = '';
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function (t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween('style.' + name, styleTween);
  };
  d3_transitionPrototype.text = function (value) {
    return d3_transition_tween(this, 'text', value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null)
      b = '';
    return function () {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function () {
    return this.each('end.transition', function () {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode))
        p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function (value) {
    var id = this.id;
    if (arguments.length < 1)
      return this.node().__transition__[id].ease;
    if (typeof value !== 'function')
      value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function (node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function (value) {
    var id = this.id;
    if (arguments.length < 1)
      return this.node().__transition__[id].delay;
    return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function (node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function (value) {
    var id = this.id;
    if (arguments.length < 1)
      return this.node().__transition__[id].duration;
    return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function (node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function (type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function (node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function (node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch('start', 'end'))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function () {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
        active: 0,
        count: 0
      }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function (elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed)
          return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id)
            return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function (key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function () {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id)
            return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count)
            delete lock[id];
          else
            delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function () {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [10], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function () {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll('.tick').data(ticks, scale1), tickEnter = tick.enter().insert('g', '.domain').attr('class', 'tick').style('opacity', ε), tickExit = d3.transition(tick.exit()).style('opacity', ε).remove(), tickUpdate = d3.transition(tick.order()).style('opacity', 1), tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll('.domain').data([0]), pathUpdate = (path.enter().append('path').attr('class', 'domain'), d3.transition(path));
        tickEnter.append('line');
        tickEnter.append('text');
        var lineEnter = tickEnter.select('line'), lineUpdate = tickUpdate.select('line'), text = tick.select('text').text(tickFormat), textEnter = tickEnter.select('text'), textUpdate = tickUpdate.select('text');
        switch (orient) {
        case 'bottom': {
            tickTransform = d3_svg_axisX;
            lineEnter.attr('y2', innerTickSize);
            textEnter.attr('y', Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr('x2', 0).attr('y2', innerTickSize);
            textUpdate.attr('x', 0).attr('y', Math.max(innerTickSize, 0) + tickPadding);
            text.attr('dy', '.71em').style('text-anchor', 'middle');
            pathUpdate.attr('d', 'M' + range[0] + ',' + outerTickSize + 'V0H' + range[1] + 'V' + outerTickSize);
            break;
          }
        case 'top': {
            tickTransform = d3_svg_axisX;
            lineEnter.attr('y2', -innerTickSize);
            textEnter.attr('y', -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr('x2', 0).attr('y2', -innerTickSize);
            textUpdate.attr('x', 0).attr('y', -(Math.max(innerTickSize, 0) + tickPadding));
            text.attr('dy', '0em').style('text-anchor', 'middle');
            pathUpdate.attr('d', 'M' + range[0] + ',' + -outerTickSize + 'V0H' + range[1] + 'V' + -outerTickSize);
            break;
          }
        case 'left': {
            tickTransform = d3_svg_axisY;
            lineEnter.attr('x2', -innerTickSize);
            textEnter.attr('x', -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr('x2', -innerTickSize).attr('y2', 0);
            textUpdate.attr('x', -(Math.max(innerTickSize, 0) + tickPadding)).attr('y', 0);
            text.attr('dy', '.32em').style('text-anchor', 'end');
            pathUpdate.attr('d', 'M' + -outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + -outerTickSize);
            break;
          }
        case 'right': {
            tickTransform = d3_svg_axisY;
            lineEnter.attr('x2', innerTickSize);
            textEnter.attr('x', Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr('x2', innerTickSize).attr('y2', 0);
            textUpdate.attr('x', Math.max(innerTickSize, 0) + tickPadding).attr('y', 0);
            text.attr('dy', '.32em').style('text-anchor', 'start');
            pathUpdate.attr('d', 'M' + outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + outerTickSize);
            break;
          }
        }
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function (d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1);
        }
        tickEnter.call(tickTransform, scale0);
        tickUpdate.call(tickTransform, scale1);
      });
    }
    axis.scale = function (x) {
      if (!arguments.length)
        return scale;
      scale = x;
      return axis;
    };
    axis.orient = function (x) {
      if (!arguments.length)
        return orient;
      orient = x in d3_svg_axisOrients ? x + '' : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function () {
      if (!arguments.length)
        return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function (x) {
      if (!arguments.length)
        return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function (x) {
      if (!arguments.length)
        return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function (x) {
      var n = arguments.length;
      if (!n)
        return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function (x) {
      if (!arguments.length)
        return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function (x) {
      if (!arguments.length)
        return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function (x) {
      if (!arguments.length)
        return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function () {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = 'bottom', d3_svg_axisOrients = {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    };
  function d3_svg_axisX(selection, x) {
    selection.attr('transform', function (d) {
      return 'translate(' + x(d) + ',0)';
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr('transform', function (d) {
      return 'translate(0,' + y(d) + ')';
    });
  }
  d3.svg.brush = function () {
    var event = d3_eventDispatch(brush, 'brushstart', 'brush', 'brushend'), x = null, y = null, xExtent = [
        0,
        0
      ], yExtent = [
        0,
        0
      ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function () {
        var g = d3.select(this).style('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush', brushstart).on('touchstart.brush', brushstart);
        var background = g.selectAll('.background').data([0]);
        background.enter().append('rect').attr('class', 'background').style('visibility', 'hidden').style('cursor', 'crosshair');
        g.selectAll('.extent').data([0]).enter().append('rect').attr('class', 'extent').style('cursor', 'move');
        var resize = g.selectAll('.resize').data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append('g').attr('class', function (d) {
          return 'resize ' + d;
        }).style('cursor', function (d) {
          return d3_svg_brushCursor[d];
        }).append('rect').attr('x', function (d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr('y', function (d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr('width', 6).attr('height', 6).style('visibility', 'hidden');
        resize.style('display', brush.empty() ? 'none' : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr('x', range[0]).attr('width', range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr('y', range[0]).attr('height', range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function (g) {
      g.each(function () {
        var event_ = event.of(this, arguments), extent1 = {
            x: xExtent,
            y: yExtent,
            i: xExtentDomain,
            j: yExtentDomain
          }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each('start.brush', function () {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({ type: 'brushstart' });
          }).tween('brush:brush', function () {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function (t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: 'brush',
                mode: 'resize'
              });
            };
          }).each('end.brush', function () {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: 'brush',
              mode: 'resize'
            });
            event_({ type: 'brushend' });
          });
        } else {
          event_({ type: 'brushstart' });
          event_({
            type: 'brush',
            mode: 'resize'
          });
          event_({ type: 'brushend' });
        }
      });
    };
    function redraw(g) {
      g.selectAll('.resize').attr('transform', function (d) {
        return 'translate(' + xExtent[+/e$/.test(d)] + ',' + yExtent[+/^s/.test(d)] + ')';
      });
    }
    function redrawX(g) {
      g.select('.extent').attr('x', xExtent[0]);
      g.selectAll('.extent,.n>rect,.s>rect').attr('width', xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select('.extent').attr('y', yExtent[0]);
      g.selectAll('.extent,.e>rect,.w>rect').attr('height', yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed('extent'), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on('keydown.brush', keydown).on('keyup.brush', keyup);
      if (d3.event.changedTouches) {
        w.on('touchmove.brush', brushmove).on('touchend.brush', brushend);
      } else {
        w.on('mousemove.brush', brushmove).on('mouseup.brush', brushend);
      }
      g.interrupt().selectAll('*').interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [
          xExtent[1 - ex] - origin[0],
          yExtent[1 - ey] - origin[1]
        ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey)
        center = origin.slice();
      g.style('pointer-events', 'none').selectAll('.resize').style('display', null);
      d3.select('body').style('cursor', eventTarget.style('cursor'));
      event_({ type: 'brushstart' });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center)
              center = [
                (xExtent[0] + xExtent[1]) / 2,
                (yExtent[0] + yExtent[1]) / 2
              ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else
            center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: 'brush',
            mode: dragging ? 'move' : 'resize'
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center)
            position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i)
            yExtentDomain = null;
          else
            xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style('pointer-events', 'all').selectAll('.resize').style('display', brush.empty() ? 'none' : null);
        d3.select('body').style('cursor', null);
        w.on('mousemove.brush', null).on('mouseup.brush', null).on('touchmove.brush', null).on('touchend.brush', null).on('keydown.brush', null).on('keyup.brush', null);
        dragRestore();
        event_({ type: 'brushend' });
      }
    }
    brush.x = function (z) {
      if (!arguments.length)
        return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function (z) {
      if (!arguments.length)
        return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function (z) {
      if (!arguments.length)
        return x && y ? [
          xClamp,
          yClamp
        ] : x ? xClamp : y ? yClamp : null;
      if (x && y)
        xClamp = !!z[0], yClamp = !!z[1];
      else if (x)
        xClamp = !!z;
      else if (y)
        yClamp = !!z;
      return brush;
    };
    brush.extent = function (z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert)
              x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0)
              t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert)
              y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0)
              t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [
          [
            x0,
            y0
          ],
          [
            x1,
            y1
          ]
        ] : x ? [
          x0,
          x1
        ] : y && [
          y0,
          y1
        ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y)
          x0 = x0[0], x1 = x1[0];
        xExtentDomain = [
          x0,
          x1
        ];
        if (x.invert)
          x0 = x(x0), x1 = x(x1);
        if (x1 < x0)
          t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1])
          xExtent = [
            x0,
            x1
          ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x)
          y0 = y0[1], y1 = y1[1];
        yExtentDomain = [
          y0,
          y1
        ];
        if (y.invert)
          y0 = y(y0), y1 = y(y1);
        if (y1 < y0)
          t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1])
          yExtent = [
            y0,
            y1
          ];
      }
      return brush;
    };
    brush.clear = function () {
      if (!brush.empty()) {
        xExtent = [
          0,
          0
        ], yExtent = [
          0,
          0
        ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function () {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, 'on');
  };
  var d3_svg_brushCursor = {
    n: 'ns-resize',
    e: 'ew-resize',
    s: 'ns-resize',
    w: 'ew-resize',
    nw: 'nwse-resize',
    ne: 'nesw-resize',
    se: 'nwse-resize',
    sw: 'nesw-resize'
  };
  var d3_svg_brushResizes = [
    [
      'n',
      'e',
      's',
      'w',
      'nw',
      'ne',
      'se',
      'sw'
    ],
    [
      'e',
      'w'
    ],
    [
      'n',
      's'
    ],
    []
  ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc('%Y-%m-%dT%H:%M:%S.%LZ');
  d3_time_format.iso = Date.prototype.toISOString && +new Date('2000-01-01T00:00:00.000Z') ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function (string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function (date) {
    return new d3_date(Math.floor(date / 1000) * 1000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1000);
  }, function (date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function (date) {
    return new d3_date(Math.floor(date / 60000) * 60000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 60000);
  }, function (date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function (date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 3600000 - timezone) + timezone) * 3600000);
  }, function (date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 3600000);
  }, function (date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function (date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function (date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function (date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function (x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function (x) {
      if (!arguments.length)
        return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [
        methods.year,
        d3_scale_linearTickRange(extent.map(function (d) {
          return d / 31536000000;
        }), count)[2]
      ] : !i ? [
        d3_time_scaleMilliseconds,
        d3_scale_linearTickRange(extent, count)[2]
      ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function (interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' && tickMethod(extent, interval);
      if (method)
        interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function (date) {
          while (skipped(date = interval.floor(date)))
            date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function (date) {
          while (skipped(date = interval.ceil(date)))
            date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function (interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' ? tickMethod(extent, interval) : !interval.range && [
          { range: interval },
          skip
        ];
      if (method)
        interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function () {
      return format;
    };
    scale.copy = function () {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [
    1000,
    5000,
    15000,
    30000,
    60000,
    300000,
    900000,
    1800000,
    3600000,
    10800000,
    21600000,
    43200000,
    86400000,
    172800000,
    604800000,
    2592000000,
    7776000000,
    31536000000
  ];
  var d3_time_scaleLocalMethods = [
    [
      d3_time.second,
      1
    ],
    [
      d3_time.second,
      5
    ],
    [
      d3_time.second,
      15
    ],
    [
      d3_time.second,
      30
    ],
    [
      d3_time.minute,
      1
    ],
    [
      d3_time.minute,
      5
    ],
    [
      d3_time.minute,
      15
    ],
    [
      d3_time.minute,
      30
    ],
    [
      d3_time.hour,
      1
    ],
    [
      d3_time.hour,
      3
    ],
    [
      d3_time.hour,
      6
    ],
    [
      d3_time.hour,
      12
    ],
    [
      d3_time.day,
      1
    ],
    [
      d3_time.day,
      2
    ],
    [
      d3_time.week,
      1
    ],
    [
      d3_time.month,
      1
    ],
    [
      d3_time.month,
      3
    ],
    [
      d3_time.year,
      1
    ]
  ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([
    [
      '.%L',
      function (d) {
        return d.getMilliseconds();
      }
    ],
    [
      ':%S',
      function (d) {
        return d.getSeconds();
      }
    ],
    [
      '%I:%M',
      function (d) {
        return d.getMinutes();
      }
    ],
    [
      '%I %p',
      function (d) {
        return d.getHours();
      }
    ],
    [
      '%a %d',
      function (d) {
        return d.getDay() && d.getDate() != 1;
      }
    ],
    [
      '%b %d',
      function (d) {
        return d.getDate() != 1;
      }
    ],
    [
      '%B',
      function (d) {
        return d.getMonth();
      }
    ],
    [
      '%Y',
      d3_true
    ]
  ]);
  var d3_time_scaleMilliseconds = {
    range: function (start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function () {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {
    return [
      m[0].utc,
      m[1]
    ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([
    [
      '.%L',
      function (d) {
        return d.getUTCMilliseconds();
      }
    ],
    [
      ':%S',
      function (d) {
        return d.getUTCSeconds();
      }
    ],
    [
      '%I:%M',
      function (d) {
        return d.getUTCMinutes();
      }
    ],
    [
      '%I %p',
      function (d) {
        return d.getUTCHours();
      }
    ],
    [
      '%a %d',
      function (d) {
        return d.getUTCDay() && d.getUTCDate() != 1;
      }
    ],
    [
      '%b %d',
      function (d) {
        return d.getUTCDate() != 1;
      }
    ],
    [
      '%B',
      function (d) {
        return d.getUTCMonth();
      }
    ],
    [
      '%Y',
      d3_true
    ]
  ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function () {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function (request) {
    return request.responseText;
  });
  d3.json = function (url, callback) {
    return d3_xhr(url, 'application/json', d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function (url, callback) {
    return d3_xhr(url, 'text/html', d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function (request) {
    return request.responseXML;
  });
  if (true)
    oh_d3 = function () {
      return typeof d3 === 'function' ? d3() : d3;
    }();
  else if (typeof module === 'object' && module.exports)
    module.exports = d3;
  this.d3 = d3;
}();
//     Backbone.js 1.1.2
//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org
(function (root, factory) {
  // Set up Backbone appropriately for the environment. Start with AMD.
  if (true) {
    oh_backbone = function (_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
      return exports;
    }(oh_underscore, oh_jquery, oh_exports);
  } else if (typeof exports !== 'undefined') {
    var _ = oh_underscore;
    factory(root, exports, _);  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$);
  }
}(this, function (root, Backbone, _, $) {
  // Initial Setup
  // -------------
  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;
  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;
  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';
  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;
  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function () {
    root.Backbone = previousBackbone;
    return this;
  };
  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;
  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;
  // Backbone.Events
  // ---------------
  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {
    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function (name, callback, context) {
      if (!eventsApi(this, 'on', name, [
          callback,
          context
        ]) || !callback)
        return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    },
    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function (name, callback, context) {
      if (!eventsApi(this, 'once', name, [
          callback,
          context
        ]) || !callback)
        return this;
      var self = this;
      var once = _.once(function () {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },
    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function (name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [
          callback,
          context
        ]))
        return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length)
            delete this._events[name];
        }
      }
      return this;
    },
    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function (name) {
      if (!this._events)
        return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args))
        return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events)
        triggerEvents(events, args);
      if (allEvents)
        triggerEvents(allEvents, arguments);
      return this;
    },
    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function (obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo)
        return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object')
        callback = this;
      if (obj)
        (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events))
          delete this._listeningTo[id];
      }
      return this;
    }
  };
  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;
  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function (obj, action, name, rest) {
    if (!name)
      return true;
    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [
          key,
          name[key]
        ].concat(rest));
      }
      return false;
    }
    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }
    return true;
  };
  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function (events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
    case 0:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx);
      return;
    case 1:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1);
      return;
    case 2:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2);
      return;
    case 3:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
      return;
    default:
      while (++i < l)
        (ev = events[i]).callback.apply(ev.ctx, args);
      return;
    }
  };
  var listenMethods = {
    listenTo: 'on',
    listenToOnce: 'once'
  };
  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function (implementation, method) {
    Events[method] = function (obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object')
        callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });
  // Aliases for backwards compatibility.
  Events.bind = Events.on;
  Events.unbind = Events.off;
  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);
  // Backbone.Model
  // --------------
  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.
  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function (attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection)
      this.collection = options.collection;
    if (options.parse)
      attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };
  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {
    // A hash of attributes whose current and previous value differ.
    changed: null,
    // The value returned during the last failed validation.
    validationError: null,
    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function () {
    },
    // Return a copy of the model's `attributes` object.
    toJSON: function (options) {
      return _.clone(this.attributes);
    },
    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function () {
      return Backbone.sync.apply(this, arguments);
    },
    // Get the value of an attribute.
    get: function (attr) {
      return this.attributes[attr];
    },
    // Get the HTML-escaped value of an attribute.
    escape: function (attr) {
      return _.escape(this.get(attr));
    },
    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function (attr) {
      return this.get(attr) != null;
    },
    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function (key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null)
        return this;
      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }
      options || (options = {});
      // Run validation.
      if (!this._validate(attrs, options))
        return false;
      // Extract attributes and options.
      unset = options.unset;
      silent = options.silent;
      changes = [];
      changing = this._changing;
      this._changing = true;
      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;
      // Check for changes of `id`.
      if (this.idAttribute in attrs)
        this.id = attrs[this.idAttribute];
      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val))
          changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }
      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length)
          this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }
      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing)
        return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },
    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function (attr, options) {
      return this.set(attr, void 0, _.extend({}, options, { unset: true }));
    },
    // Clear all attributes on the model, firing `"change"`.
    clear: function (options) {
      var attrs = {};
      for (var key in this.attributes)
        attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, { unset: true }));
    },
    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function (attr) {
      if (attr == null)
        return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },
    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function (diff) {
      if (!diff)
        return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], val = diff[attr]))
          continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },
    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function (attr) {
      if (attr == null || !this._previousAttributes)
        return null;
      return this._previousAttributes[attr];
    },
    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function () {
      return _.clone(this._previousAttributes);
    },
    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function (options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0)
        options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function (resp) {
        if (!model.set(model.parse(resp, options), options))
          return false;
        if (success)
          success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },
    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function (key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;
      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }
      options = _.extend({ validate: true }, options);
      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options))
          return false;
      } else {
        if (!this._validate(attrs, options))
          return false;
      }
      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }
      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0)
        options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function (resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait)
          serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success)
          success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      method = this.isNew() ? 'create' : options.patch ? 'patch' : 'update';
      if (method === 'patch')
        options.attrs = attrs;
      xhr = this.sync(method, this, options);
      // Restore attributes.
      if (attrs && options.wait)
        this.attributes = attributes;
      return xhr;
    },
    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function (options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var destroy = function () {
        model.trigger('destroy', model, model.collection, options);
      };
      options.success = function (resp) {
        if (options.wait || model.isNew())
          destroy();
        if (success)
          success(model, resp, options);
        if (!model.isNew())
          model.trigger('sync', model, resp, options);
      };
      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);
      var xhr = this.sync('delete', this, options);
      if (!options.wait)
        destroy();
      return xhr;
    },
    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function () {
      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
      if (this.isNew())
        return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },
    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function (resp, options) {
      return resp;
    },
    // Create a new model with identical attributes to this one.
    clone: function () {
      return new this.constructor(this.attributes);
    },
    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function () {
      return !this.has(this.idAttribute);
    },
    // Check if the model is currently in a valid state.
    isValid: function (options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },
    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function (attrs, options) {
      if (!options.validate || !this.validate)
        return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error)
        return true;
      this.trigger('invalid', this, error, _.extend(options, { validationError: error }));
      return false;
    }
  });
  // Underscore methods that we want to implement on the Model.
  var modelMethods = [
    'keys',
    'values',
    'pairs',
    'invert',
    'pick',
    'omit'
  ];
  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function (method) {
    Model.prototype[method] = function () {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });
  // Backbone.Collection
  // -------------------
  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.
  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function (models, options) {
    options || (options = {});
    if (options.model)
      this.model = options.model;
    if (options.comparator !== void 0)
      this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models)
      this.reset(models, _.extend({ silent: true }, options));
  };
  // Default options for `Collection#set`.
  var setOptions = {
    add: true,
    remove: true,
    merge: true
  };
  var addOptions = {
    add: true,
    remove: false
  };
  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {
    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function () {
    },
    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function (options) {
      return this.map(function (model) {
        return model.toJSON(options);
      });
    },
    // Proxy `Backbone.sync` by default.
    sync: function () {
      return Backbone.sync.apply(this, arguments);
    },
    // Add a model, or list of models to the set.
    add: function (models, options) {
      return this.set(models, _.extend({ merge: false }, options, addOptions));
    },
    // Remove a model, or a list of models from the set.
    remove: function (models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model)
          continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },
    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function (models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse)
        models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? models ? [models] : [] : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && at == null && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;
      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }
        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove)
            modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse)
              attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr))
              sort = true;
          }
          models[i] = existing;  // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model)
            continue;
          toAdd.push(model);
          this._addReference(model, options);
        }
        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id]))
          order.push(model);
        modelMap[model.id] = true;
      }
      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid])
            toRemove.push(model);
        }
        if (toRemove.length)
          this.remove(toRemove, options);
      }
      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || order && order.length) {
        if (sortable)
          sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order)
            this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }
      // Silently sort the collection if appropriate.
      if (sort)
        this.sort({ silent: true });
      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || order && order.length)
          this.trigger('sort', this, options);
      }
      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },
    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function (models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({ silent: true }, options));
      if (!options.silent)
        this.trigger('reset', this, options);
      return models;
    },
    // Add a model to the end of the collection.
    push: function (model, options) {
      return this.add(model, _.extend({ at: this.length }, options));
    },
    // Remove a model from the end of the collection.
    pop: function (options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },
    // Add a model to the beginning of the collection.
    unshift: function (model, options) {
      return this.add(model, _.extend({ at: 0 }, options));
    },
    // Remove a model from the beginning of the collection.
    shift: function (options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },
    // Slice out a sub-array of models from the collection.
    slice: function () {
      return slice.apply(this.models, arguments);
    },
    // Get a model from the set by id.
    get: function (obj) {
      if (obj == null)
        return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },
    // Get the model at the given index.
    at: function (index) {
      return this.models[index];
    },
    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function (attrs, first) {
      if (_.isEmpty(attrs))
        return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function (model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key))
            return false;
        }
        return true;
      });
    },
    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function (attrs) {
      return this.where(attrs, true);
    },
    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function (options) {
      if (!this.comparator)
        throw new Error('Cannot sort a set without a comparator');
      options || (options = {});
      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }
      if (!options.silent)
        this.trigger('sort', this, options);
      return this;
    },
    // Pluck an attribute from each model in the collection.
    pluck: function (attr) {
      return _.invoke(this.models, 'get', attr);
    },
    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function (options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0)
        options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function (resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success)
          success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },
    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function (model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options)))
        return false;
      if (!options.wait)
        this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function (model, resp) {
        if (options.wait)
          collection.add(model, options);
        if (success)
          success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },
    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function (resp, options) {
      return resp;
    },
    // Create a new collection with an identical list of models as this one.
    clone: function () {
      return new this.constructor(this.models);
    },
    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function () {
      this.length = 0;
      this.models = [];
      this._byId = {};
    },
    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function (attrs, options) {
      if (attrs instanceof Model)
        return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError)
        return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },
    // Internal method to create a model's ties to a collection.
    _addReference: function (model, options) {
      this._byId[model.cid] = model;
      if (model.id != null)
        this._byId[model.id] = model;
      if (!model.collection)
        model.collection = this;
      model.on('all', this._onModelEvent, this);
    },
    // Internal method to sever a model's ties to a collection.
    _removeReference: function (model, options) {
      if (this === model.collection)
        delete model.collection;
      model.off('all', this._onModelEvent, this);
    },
    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function (event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this)
        return;
      if (event === 'destroy')
        this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null)
          this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }
  });
  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = [
    'forEach',
    'each',
    'map',
    'collect',
    'reduce',
    'foldl',
    'inject',
    'reduceRight',
    'foldr',
    'find',
    'detect',
    'filter',
    'select',
    'reject',
    'every',
    'all',
    'some',
    'any',
    'include',
    'contains',
    'invoke',
    'max',
    'min',
    'toArray',
    'size',
    'first',
    'head',
    'take',
    'initial',
    'rest',
    'tail',
    'drop',
    'last',
    'without',
    'difference',
    'indexOf',
    'shuffle',
    'lastIndexOf',
    'isEmpty',
    'chain',
    'sample'
  ];
  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function (method) {
    Collection.prototype[method] = function () {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });
  // Underscore methods that take a property name as an argument.
  var attributeMethods = [
    'groupBy',
    'countBy',
    'sortBy',
    'indexBy'
  ];
  // Use attributes instead of properties.
  _.each(attributeMethods, function (method) {
    Collection.prototype[method] = function (value, context) {
      var iterator = _.isFunction(value) ? value : function (model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });
  // Backbone.View
  // -------------
  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.
  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function (options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };
  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  // List of view options to be merged as properties.
  var viewOptions = [
    'model',
    'collection',
    'el',
    'id',
    'attributes',
    'className',
    'tagName',
    'events'
  ];
  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {
    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',
    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function (selector) {
      return this.$el.find(selector);
    },
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function () {
    },
    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function () {
      return this;
    },
    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function () {
      this.$el.remove();
      this.stopListening();
      return this;
    },
    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function (element, delegate) {
      if (this.$el)
        this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false)
        this.delegateEvents();
      return this;
    },
    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function (events) {
      if (!(events || (events = _.result(this, 'events'))))
        return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method))
          method = this[events[key]];
        if (!method)
          continue;
        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },
    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function () {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },
    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function () {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id)
          attrs.id = _.result(this, 'id');
        if (this.className)
          attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }
  });
  // Backbone.sync
  // -------------
  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function (method, model, options) {
    var type = methodMap[method];
    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });
    // Default JSON-request options.
    var params = {
      type: type,
      dataType: 'json'
    };
    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }
    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }
    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? { model: params.data } : {};
    }
    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON)
        params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function (xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend)
          return beforeSend.apply(this, arguments);
      };
    }
    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }
    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function () {
        return new ActiveXObject('Microsoft.XMLHTTP');
      };
    }
    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };
  var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent);
  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch': 'PATCH',
    'delete': 'DELETE',
    'read': 'GET'
  };
  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function () {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };
  // Backbone.Router
  // ---------------
  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function (options) {
    options || (options = {});
    if (options.routes)
      this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };
  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam = /(\(\?)?:\w+/g;
  var splatParam = /\*\w+/g;
  var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function () {
    },
    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function (route, name, callback) {
      if (!_.isRegExp(route))
        route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback)
        callback = this[name];
      var router = this;
      Backbone.history.route(route, function (fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },
    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function (callback, args) {
      if (callback)
        callback.apply(this, args);
    },
    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function (fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },
    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function () {
      if (!this.routes)
        return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },
    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function (route) {
      route = route.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function (match, optional) {
        return optional ? match : '([^/?]+)';
      }).replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },
    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function (route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function (param, i) {
        // Don't decode the search params.
        if (i === params.length - 1)
          return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }
  });
  // Backbone.History
  // ----------------
  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function () {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');
    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };
  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;
  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;
  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;
  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;
  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;
  // Has the history handling already been started?
  History.started = false;
  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {
    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,
    // Are we at the app root?
    atRoot: function () {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },
    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function (window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },
    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function (fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root))
            fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },
    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function (options) {
      if (History.started)
        throw new Error('Backbone.history has already been started');
      History.started = true;
      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options = _.extend({ root: '/' }, this.options, options);
      this.root = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState = !!this.options.pushState;
      this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment = this.getFragment();
      var docMode = document.documentMode;
      var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');
      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }
      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && 'onhashchange' in window && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }
      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;
      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {
        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;  // Or if we've started out with a hash-based route, but we're currently
                        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }
      }
      if (!this.options.silent)
        return this.loadUrl();
    },
    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function () {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval)
        clearInterval(this._checkUrlInterval);
      History.started = false;
    },
    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function (route, callback) {
      this.handlers.unshift({
        route: route,
        callback: callback
      });
    },
    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function (e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment)
        return false;
      if (this.iframe)
        this.navigate(current);
      this.loadUrl();
    },
    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function (fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function (handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },
    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function (fragment, options) {
      if (!History.started)
        return false;
      if (!options || options === true)
        options = { trigger: !!options };
      var url = this.root + (fragment = this.getFragment(fragment || ''));
      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');
      if (this.fragment === fragment)
        return;
      this.fragment = fragment;
      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/')
        url = url.slice(0, -1);
      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);  // If hash changes haven't been explicitly disabled, update the hash
                                                                                                // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && fragment !== this.getFragment(this.getHash(this.iframe))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace)
            this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }  // If you've told us that you explicitly don't want fallback hashchange-
           // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger)
        return this.loadUrl(fragment);
    },
    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function (location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }
  });
  // Create the default Backbone.history.
  Backbone.history = new History();
  // Helpers
  // -------
  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function (protoProps, staticProps) {
    var parent = this;
    var child;
    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function () {
        return parent.apply(this, arguments);
      };
    }
    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);
    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function () {
      this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate();
    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps)
      _.extend(child.prototype, protoProps);
    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;
    return child;
  };
  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function () {
    throw new Error('A "url" property or function must be specified');
  };
  // Wrap an optional error callback with a fallback error event.
  var wrapError = function (model, options) {
    var error = options.error;
    options.error = function (resp) {
      if (error)
        error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };
  return Backbone;
}));
//! moment.js
//! version : 2.8.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function (undefined) {
  /************************************
      Constants
  ************************************/
  var moment, VERSION = '2.8.4',
    // the global-scope this is NOT the global object in Node.js
    globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, hasOwnProperty = Object.prototype.hasOwnProperty, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6,
    // internal storage for locale config files
    locales = {},
    // extra moment internal properties (plugins register props here)
    momentProperties = [],
    // check for nodeJS
    hasModule = typeof module !== 'undefined' && module && module.exports,
    // ASP.NET json date format regex
    aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,
    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,
    // format tokens
    formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
    // parsing token regexes
    parseTokenOneOrTwoDigits = /\d\d?/,
    // 0 - 99
    parseTokenOneToThreeDigits = /\d{1,3}/,
    // 0 - 999
    parseTokenOneToFourDigits = /\d{1,4}/,
    // 0 - 9999
    parseTokenOneToSixDigits = /[+\-]?\d{1,6}/,
    // -999,999 - 999,999
    parseTokenDigits = /\d+/,
    // nonzero number of digits
    parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
    // any word (or two) characters or numbers including two/three word month in arabic.
    parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi,
    // +00:00 -00:00 +0000 -0000 or Z
    parseTokenT = /T/i,
    // T (ISO separator)
    parseTokenOffsetMs = /[\+\-]?\d+/,
    // 1234567890123
    parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/,
    // 123456789 123456789.123
    //strict parsing regexes
    parseTokenOneDigit = /\d/,
    // 0 - 9
    parseTokenTwoDigits = /\d\d/,
    // 00 - 99
    parseTokenThreeDigits = /\d{3}/,
    // 000 - 999
    parseTokenFourDigits = /\d{4}/,
    // 0000 - 9999
    parseTokenSixDigits = /[+-]?\d{6}/,
    // -999,999 - 999,999
    parseTokenSignedNumber = /[+-]?\d+/,
    // -inf - inf
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [
      [
        'YYYYYY-MM-DD',
        /[+-]\d{6}-\d{2}-\d{2}/
      ],
      [
        'YYYY-MM-DD',
        /\d{4}-\d{2}-\d{2}/
      ],
      [
        'GGGG-[W]WW-E',
        /\d{4}-W\d{2}-\d/
      ],
      [
        'GGGG-[W]WW',
        /\d{4}-W\d{2}/
      ],
      [
        'YYYY-DDD',
        /\d{4}-\d{3}/
      ]
    ],
    // iso time formats and regexes
    isoTimes = [
      [
        'HH:mm:ss.SSSS',
        /(T| )\d\d:\d\d:\d\d\.\d+/
      ],
      [
        'HH:mm:ss',
        /(T| )\d\d:\d\d:\d\d/
      ],
      [
        'HH:mm',
        /(T| )\d\d:\d\d/
      ],
      [
        'HH',
        /(T| )\d\d/
      ]
    ],
    // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-15', '30']
    parseTimezoneChunker = /([\+\-]|\d\d)/gi,
    // getter and setter names
    proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = {
      'Milliseconds': 1,
      'Seconds': 1000,
      'Minutes': 60000,
      'Hours': 3600000,
      'Days': 86400000,
      'Months': 2592000000,
      'Years': 31536000000
    }, unitAliases = {
      ms: 'millisecond',
      s: 'second',
      m: 'minute',
      h: 'hour',
      d: 'day',
      D: 'date',
      w: 'week',
      W: 'isoWeek',
      M: 'month',
      Q: 'quarter',
      y: 'year',
      DDD: 'dayOfYear',
      e: 'weekday',
      E: 'isoWeekday',
      gg: 'weekYear',
      GG: 'isoWeekYear'
    }, camelFunctions = {
      dayofyear: 'dayOfYear',
      isoweekday: 'isoWeekday',
      isoweek: 'isoWeek',
      weekyear: 'weekYear',
      isoweekyear: 'isoWeekYear'
    },
    // format function strings
    formatFunctions = {},
    // default relative time thresholds
    relativeTimeThresholds = {
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month
      M: 11  // months to year
    },
    // tokens to ordinalize and pad
    ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
      M: function () {
        return this.month() + 1;
      },
      MMM: function (format) {
        return this.localeData().monthsShort(this, format);
      },
      MMMM: function (format) {
        return this.localeData().months(this, format);
      },
      D: function () {
        return this.date();
      },
      DDD: function () {
        return this.dayOfYear();
      },
      d: function () {
        return this.day();
      },
      dd: function (format) {
        return this.localeData().weekdaysMin(this, format);
      },
      ddd: function (format) {
        return this.localeData().weekdaysShort(this, format);
      },
      dddd: function (format) {
        return this.localeData().weekdays(this, format);
      },
      w: function () {
        return this.week();
      },
      W: function () {
        return this.isoWeek();
      },
      YY: function () {
        return leftZeroFill(this.year() % 100, 2);
      },
      YYYY: function () {
        return leftZeroFill(this.year(), 4);
      },
      YYYYY: function () {
        return leftZeroFill(this.year(), 5);
      },
      YYYYYY: function () {
        var y = this.year(), sign = y >= 0 ? '+' : '-';
        return sign + leftZeroFill(Math.abs(y), 6);
      },
      gg: function () {
        return leftZeroFill(this.weekYear() % 100, 2);
      },
      gggg: function () {
        return leftZeroFill(this.weekYear(), 4);
      },
      ggggg: function () {
        return leftZeroFill(this.weekYear(), 5);
      },
      GG: function () {
        return leftZeroFill(this.isoWeekYear() % 100, 2);
      },
      GGGG: function () {
        return leftZeroFill(this.isoWeekYear(), 4);
      },
      GGGGG: function () {
        return leftZeroFill(this.isoWeekYear(), 5);
      },
      e: function () {
        return this.weekday();
      },
      E: function () {
        return this.isoWeekday();
      },
      a: function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), true);
      },
      A: function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), false);
      },
      H: function () {
        return this.hours();
      },
      h: function () {
        return this.hours() % 12 || 12;
      },
      m: function () {
        return this.minutes();
      },
      s: function () {
        return this.seconds();
      },
      S: function () {
        return toInt(this.milliseconds() / 100);
      },
      SS: function () {
        return leftZeroFill(toInt(this.milliseconds() / 10), 2);
      },
      SSS: function () {
        return leftZeroFill(this.milliseconds(), 3);
      },
      SSSS: function () {
        return leftZeroFill(this.milliseconds(), 3);
      },
      Z: function () {
        var a = -this.zone(), b = '+';
        if (a < 0) {
          a = -a;
          b = '-';
        }
        return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
      },
      ZZ: function () {
        var a = -this.zone(), b = '+';
        if (a < 0) {
          a = -a;
          b = '-';
        }
        return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
      },
      z: function () {
        return this.zoneAbbr();
      },
      zz: function () {
        return this.zoneName();
      },
      x: function () {
        return this.valueOf();
      },
      X: function () {
        return this.unix();
      },
      Q: function () {
        return this.quarter();
      }
    }, deprecations = {}, lists = [
      'months',
      'monthsShort',
      'weekdays',
      'weekdaysShort',
      'weekdaysMin'
    ];
  // Pick the first defined of two or three arguments. dfl comes from
  // default.
  function dfl(a, b, c) {
    switch (arguments.length) {
    case 2:
      return a != null ? a : b;
    case 3:
      return a != null ? a : b != null ? b : c;
    default:
      throw new Error('Implement me');
    }
  }
  function hasOwnProp(a, b) {
    return hasOwnProperty.call(a, b);
  }
  function defaultParsingFlags() {
    // We need to deep clone this object, and es5 standard is not very
    // helpful.
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false
    };
  }
  function printMsg(msg) {
    if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
      console.warn('Deprecation warning: ' + msg);
    }
  }
  function deprecate(msg, fn) {
    var firstTime = true;
    return extend(function () {
      if (firstTime) {
        printMsg(msg);
        firstTime = false;
      }
      return fn.apply(this, arguments);
    }, fn);
  }
  function deprecateSimple(name, msg) {
    if (!deprecations[name]) {
      printMsg(msg);
      deprecations[name] = true;
    }
  }
  function padToken(func, count) {
    return function (a) {
      return leftZeroFill(func.call(this, a), count);
    };
  }
  function ordinalizeToken(func, period) {
    return function (a) {
      return this.localeData().ordinal(func.call(this, a), period);
    };
  }
  while (ordinalizeTokens.length) {
    i = ordinalizeTokens.pop();
    formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
  }
  while (paddedTokens.length) {
    i = paddedTokens.pop();
    formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
  }
  formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
  /************************************
      Constructors
  ************************************/
  function Locale() {
  }
  // Moment prototype object
  function Moment(config, skipOverflow) {
    if (skipOverflow !== false) {
      checkOverflow(config);
    }
    copyConfig(this, config);
    this._d = new Date(+config._d);
  }
  // Duration Constructor
  function Duration(duration) {
    var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
    // representation for dateAddRemove
    this._milliseconds = +milliseconds + seconds * 1000 + // 1000
    minutes * 60000 + // 1000 * 60
    hours * 3600000;
    // 1000 * 60 * 60
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days + weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months + quarters * 3 + years * 12;
    this._data = {};
    this._locale = moment.localeData();
    this._bubble();
  }
  /************************************
      Helpers
  ************************************/
  function extend(a, b) {
    for (var i in b) {
      if (hasOwnProp(b, i)) {
        a[i] = b[i];
      }
    }
    if (hasOwnProp(b, 'toString')) {
      a.toString = b.toString;
    }
    if (hasOwnProp(b, 'valueOf')) {
      a.valueOf = b.valueOf;
    }
    return a;
  }
  function copyConfig(to, from) {
    var i, prop, val;
    if (typeof from._isAMomentObject !== 'undefined') {
      to._isAMomentObject = from._isAMomentObject;
    }
    if (typeof from._i !== 'undefined') {
      to._i = from._i;
    }
    if (typeof from._f !== 'undefined') {
      to._f = from._f;
    }
    if (typeof from._l !== 'undefined') {
      to._l = from._l;
    }
    if (typeof from._strict !== 'undefined') {
      to._strict = from._strict;
    }
    if (typeof from._tzm !== 'undefined') {
      to._tzm = from._tzm;
    }
    if (typeof from._isUTC !== 'undefined') {
      to._isUTC = from._isUTC;
    }
    if (typeof from._offset !== 'undefined') {
      to._offset = from._offset;
    }
    if (typeof from._pf !== 'undefined') {
      to._pf = from._pf;
    }
    if (typeof from._locale !== 'undefined') {
      to._locale = from._locale;
    }
    if (momentProperties.length > 0) {
      for (i in momentProperties) {
        prop = momentProperties[i];
        val = from[prop];
        if (typeof val !== 'undefined') {
          to[prop] = val;
        }
      }
    }
    return to;
  }
  function absRound(number) {
    if (number < 0) {
      return Math.ceil(number);
    } else {
      return Math.floor(number);
    }
  }
  // left zero fill a number
  // see http://jsperf.com/left-zero-filling for performance comparison
  function leftZeroFill(number, targetLength, forceSign) {
    var output = '' + Math.abs(number), sign = number >= 0;
    while (output.length < targetLength) {
      output = '0' + output;
    }
    return (sign ? forceSign ? '+' : '' : '-') + output;
  }
  function positiveMomentsDifference(base, other) {
    var res = {
      milliseconds: 0,
      months: 0
    };
    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
      --res.months;
    }
    res.milliseconds = +other - +base.clone().add(res.months, 'M');
    return res;
  }
  function momentsDifference(base, other) {
    var res;
    other = makeAs(other, base);
    if (base.isBefore(other)) {
      res = positiveMomentsDifference(base, other);
    } else {
      res = positiveMomentsDifference(other, base);
      res.milliseconds = -res.milliseconds;
      res.months = -res.months;
    }
    return res;
  }
  // TODO: remove 'name' arg after deprecation is removed
  function createAdder(direction, name) {
    return function (val, period) {
      var dur, tmp;
      //invert the arguments, but complain about it
      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
        tmp = val;
        val = period;
        period = tmp;
      }
      val = typeof val === 'string' ? +val : val;
      dur = moment.duration(val, period);
      addOrSubtractDurationFromMoment(this, dur, direction);
      return this;
    };
  }
  function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
    updateOffset = updateOffset == null ? true : updateOffset;
    if (milliseconds) {
      mom._d.setTime(+mom._d + milliseconds * isAdding);
    }
    if (days) {
      rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
    }
    if (months) {
      rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
      moment.updateOffset(mom, days || months);
    }
  }
  // check if is an array
  function isArray(input) {
    return Object.prototype.toString.call(input) === '[object Array]';
  }
  function isDate(input) {
    return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
  }
  // compare two arrays, return the number of differences
  function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
    for (i = 0; i < len; i++) {
      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
        diffs++;
      }
    }
    return diffs + lengthDiff;
  }
  function normalizeUnits(units) {
    if (units) {
      var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
      units = unitAliases[units] || camelFunctions[lowered] || lowered;
    }
    return units;
  }
  function normalizeObjectUnits(inputObject) {
    var normalizedInput = {}, normalizedProp, prop;
    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);
        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }
    return normalizedInput;
  }
  function makeList(field) {
    var count, setter;
    if (field.indexOf('week') === 0) {
      count = 7;
      setter = 'day';
    } else if (field.indexOf('month') === 0) {
      count = 12;
      setter = 'month';
    } else {
      return;
    }
    moment[field] = function (format, index) {
      var i, getter, method = moment._locale[field], results = [];
      if (typeof format === 'number') {
        index = format;
        format = undefined;
      }
      getter = function (i) {
        var m = moment().utc().set(setter, i);
        return method.call(moment._locale, m, format || '');
      };
      if (index != null) {
        return getter(index);
      } else {
        for (i = 0; i < count; i++) {
          results.push(getter(i));
        }
        return results;
      }
    };
  }
  function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion, value = 0;
    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      if (coercedNumber >= 0) {
        value = Math.floor(coercedNumber);
      } else {
        value = Math.ceil(coercedNumber);
      }
    }
    return value;
  }
  function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
  }
  function weeksInYear(year, dow, doy) {
    return weekOfYear(moment([
      year,
      11,
      31 + dow - doy
    ]), dow, doy).week;
  }
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  function checkOverflow(m) {
    var overflow;
    if (m._a && m._pf.overflow === -2) {
      overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 24 || m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 || m._a[SECOND] !== 0 || m._a[MILLISECOND] !== 0) ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
      if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }
      m._pf.overflow = overflow;
    }
  }
  function isValid(m) {
    if (m._isValid == null) {
      m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
      if (m._strict) {
        m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0 && m._pf.bigHour === undefined;
      }
    }
    return m._isValid;
  }
  function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
  }
  // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  function chooseLocale(names) {
    var i = 0, j, next, locale, split;
    while (i < names.length) {
      split = normalizeLocale(names[i]).split('-');
      j = split.length;
      next = normalizeLocale(names[i + 1]);
      next = next ? next.split('-') : null;
      while (j > 0) {
        locale = loadLocale(split.slice(0, j).join('-'));
        if (locale) {
          return locale;
        }
        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
          //the next array item is better than a shallower substring of this one
          break;
        }
        j--;
      }
      i++;
    }
    return null;
  }
  function loadLocale(name) {
    var oldLocale = null;
    if (!locales[name] && hasModule) {
      try {
        oldLocale = moment.locale();
        // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
        moment.locale(oldLocale);
      } catch (e) {
      }
    }
    return locales[name];
  }
  // Return a moment from input, that is local/utc/zone equivalent to model.
  function makeAs(input, model) {
    var res, diff;
    if (model._isUTC) {
      res = model.clone();
      diff = (moment.isMoment(input) || isDate(input) ? +input : +moment(input)) - +res;
      // Use low-level api, because this fn is low-level api.
      res._d.setTime(+res._d + diff);
      moment.updateOffset(res, false);
      return res;
    } else {
      return moment(input).local();
    }
  }
  /************************************
      Locale
  ************************************/
  extend(Locale.prototype, {
    set: function (config) {
      var prop, i;
      for (i in config) {
        prop = config[i];
        if (typeof prop === 'function') {
          this[i] = prop;
        } else {
          this['_' + i] = prop;
        }
      }
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _ordinalParseLenient.
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
    },
    _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    months: function (m) {
      return this._months[m.month()];
    },
    _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    monthsShort: function (m) {
      return this._monthsShort[m.month()];
    },
    monthsParse: function (monthName, format, strict) {
      var i, mom, regex;
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = moment.utc([
          2000,
          i
        ]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    },
    _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdays: function (m) {
      return this._weekdays[m.day()];
    },
    _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysShort: function (m) {
      return this._weekdaysShort[m.day()];
    },
    _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    weekdaysMin: function (m) {
      return this._weekdaysMin[m.day()];
    },
    weekdaysParse: function (weekdayName) {
      var i, mom, regex;
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        if (!this._weekdaysParse[i]) {
          mom = moment([
            2000,
            1
          ]).day(i);
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    },
    _longDateFormat: {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY LT',
      LLLL: 'dddd, MMMM D, YYYY LT'
    },
    longDateFormat: function (key) {
      var output = this._longDateFormat[key];
      if (!output && this._longDateFormat[key.toUpperCase()]) {
        output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
        });
        this._longDateFormat[key] = output;
      }
      return output;
    },
    isPM: function (input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p';
    },
    _meridiemParse: /[ap]\.?m?\.?/i,
    meridiem: function (hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    },
    _calendar: {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    },
    calendar: function (key, mom, now) {
      var output = this._calendar[key];
      return typeof output === 'function' ? output.apply(mom, [now]) : output;
    },
    _relativeTime: {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    },
    relativeTime: function (number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    },
    pastFuture: function (diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    },
    ordinal: function (number) {
      return this._ordinal.replace('%d', number);
    },
    _ordinal: '%d',
    _ordinalParse: /\d{1,2}/,
    preparse: function (string) {
      return string;
    },
    postformat: function (string) {
      return string;
    },
    week: function (mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    },
    _week: {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6  // The week that contains Jan 1st is the first week of the year.
    },
    _invalidDate: 'Invalid date',
    invalidDate: function () {
      return this._invalidDate;
    }
  });
  /************************************
      Formatting
  ************************************/
  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
  }
  function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;
    for (i = 0, length = array.length; i < length; i++) {
      if (formatTokenFunctions[array[i]]) {
        array[i] = formatTokenFunctions[array[i]];
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }
    return function (mom) {
      var output = '';
      for (i = 0; i < length; i++) {
        output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
      }
      return output;
    };
  }
  // format date using native date object
  function formatMoment(m, format) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }
    format = expandFormat(format, m.localeData());
    if (!formatFunctions[format]) {
      formatFunctions[format] = makeFormatFunction(format);
    }
    return formatFunctions[format](m);
  }
  function expandFormat(format, locale) {
    var i = 5;
    function replaceLongDateFormatTokens(input) {
      return locale.longDateFormat(input) || input;
    }
    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i -= 1;
    }
    return format;
  }
  /************************************
      Parsing
  ************************************/
  // get the regex to find the next token
  function getParseRegexForToken(token, config) {
    var a, strict = config._strict;
    switch (token) {
    case 'Q':
      return parseTokenOneDigit;
    case 'DDDD':
      return parseTokenThreeDigits;
    case 'YYYY':
    case 'GGGG':
    case 'gggg':
      return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
    case 'Y':
    case 'G':
    case 'g':
      return parseTokenSignedNumber;
    case 'YYYYYY':
    case 'YYYYY':
    case 'GGGGG':
    case 'ggggg':
      return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
    case 'S':
      if (strict) {
        return parseTokenOneDigit;
      }
    /* falls through */
    case 'SS':
      if (strict) {
        return parseTokenTwoDigits;
      }
    /* falls through */
    case 'SSS':
      if (strict) {
        return parseTokenThreeDigits;
      }
    /* falls through */
    case 'DDD':
      return parseTokenOneToThreeDigits;
    case 'MMM':
    case 'MMMM':
    case 'dd':
    case 'ddd':
    case 'dddd':
      return parseTokenWord;
    case 'a':
    case 'A':
      return config._locale._meridiemParse;
    case 'x':
      return parseTokenOffsetMs;
    case 'X':
      return parseTokenTimestampMs;
    case 'Z':
    case 'ZZ':
      return parseTokenTimezone;
    case 'T':
      return parseTokenT;
    case 'SSSS':
      return parseTokenDigits;
    case 'MM':
    case 'DD':
    case 'YY':
    case 'GG':
    case 'gg':
    case 'HH':
    case 'hh':
    case 'mm':
    case 'ss':
    case 'ww':
    case 'WW':
      return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
    case 'M':
    case 'D':
    case 'd':
    case 'H':
    case 'h':
    case 'm':
    case 's':
    case 'w':
    case 'W':
    case 'e':
    case 'E':
      return parseTokenOneOrTwoDigits;
    case 'Do':
      return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
    default:
      a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
      return a;
    }
  }
  function timezoneMinutesFromString(string) {
    string = string || '';
    var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || [
        '-',
        0,
        0
      ], minutes = +(parts[1] * 60) + toInt(parts[2]);
    return parts[0] === '+' ? -minutes : minutes;
  }
  // function to convert string input to date
  function addTimeToArrayFromToken(token, input, config) {
    var a, datePartArray = config._a;
    switch (token) {
    // QUARTER
    case 'Q':
      if (input != null) {
        datePartArray[MONTH] = (toInt(input) - 1) * 3;
      }
      break;
    // MONTH
    case 'M':
    // fall through to MM
    case 'MM':
      if (input != null) {
        datePartArray[MONTH] = toInt(input) - 1;
      }
      break;
    case 'MMM':
    // fall through to MMMM
    case 'MMMM':
      a = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (a != null) {
        datePartArray[MONTH] = a;
      } else {
        config._pf.invalidMonth = input;
      }
      break;
    // DAY OF MONTH
    case 'D':
    // fall through to DD
    case 'DD':
      if (input != null) {
        datePartArray[DATE] = toInt(input);
      }
      break;
    case 'Do':
      if (input != null) {
        datePartArray[DATE] = toInt(parseInt(input.match(/\d{1,2}/)[0], 10));
      }
      break;
    // DAY OF YEAR
    case 'DDD':
    // fall through to DDDD
    case 'DDDD':
      if (input != null) {
        config._dayOfYear = toInt(input);
      }
      break;
    // YEAR
    case 'YY':
      datePartArray[YEAR] = moment.parseTwoDigitYear(input);
      break;
    case 'YYYY':
    case 'YYYYY':
    case 'YYYYYY':
      datePartArray[YEAR] = toInt(input);
      break;
    // AM / PM
    case 'a':
    // fall through to A
    case 'A':
      config._isPm = config._locale.isPM(input);
      break;
    // HOUR
    case 'h':
    // fall through to hh
    case 'hh':
      config._pf.bigHour = true;
    /* falls through */
    case 'H':
    // fall through to HH
    case 'HH':
      datePartArray[HOUR] = toInt(input);
      break;
    // MINUTE
    case 'm':
    // fall through to mm
    case 'mm':
      datePartArray[MINUTE] = toInt(input);
      break;
    // SECOND
    case 's':
    // fall through to ss
    case 'ss':
      datePartArray[SECOND] = toInt(input);
      break;
    // MILLISECOND
    case 'S':
    case 'SS':
    case 'SSS':
    case 'SSSS':
      datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
      break;
    // UNIX OFFSET (MILLISECONDS)
    case 'x':
      config._d = new Date(toInt(input));
      break;
    // UNIX TIMESTAMP WITH MS
    case 'X':
      config._d = new Date(parseFloat(input) * 1000);
      break;
    // TIMEZONE
    case 'Z':
    // fall through to ZZ
    case 'ZZ':
      config._useUTC = true;
      config._tzm = timezoneMinutesFromString(input);
      break;
    // WEEKDAY - human
    case 'dd':
    case 'ddd':
    case 'dddd':
      a = config._locale.weekdaysParse(input);
      // if we didn't get a weekday name, mark the date as invalid
      if (a != null) {
        config._w = config._w || {};
        config._w['d'] = a;
      } else {
        config._pf.invalidWeekday = input;
      }
      break;
    // WEEK, WEEK DAY - numeric
    case 'w':
    case 'ww':
    case 'W':
    case 'WW':
    case 'd':
    case 'e':
    case 'E':
      token = token.substr(0, 1);
    /* falls through */
    case 'gggg':
    case 'GGGG':
    case 'GGGGG':
      token = token.substr(0, 2);
      if (input) {
        config._w = config._w || {};
        config._w[token] = toInt(input);
      }
      break;
    case 'gg':
    case 'GG':
      config._w = config._w || {};
      config._w[token] = moment.parseTwoDigitYear(input);
    }
  }
  function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp;
    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4;
      // TODO: We need to take the current isoWeekYear, but that depends on
      // how we interpret now (local, utc, fixed offset). So create
      // a now version of current config (take local/utc/offset flags, and
      // create now).
      weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
      week = dfl(w.W, 1);
      weekday = dfl(w.E, 1);
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;
      weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
      week = dfl(w.w, 1);
      if (w.d != null) {
        // weekday -- low day numbers are considered next week
        weekday = w.d;
        if (weekday < dow) {
          ++week;
        }
      } else if (w.e != null) {
        // local weekday -- counting starts from begining of week
        weekday = w.e + dow;
      } else {
        // default to begining of week
        weekday = dow;
      }
    }
    temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
  // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]
  function dateFromConfig(config) {
    var i, date, input = [], currentDate, yearToUse;
    if (config._d) {
      return;
    }
    currentDate = currentDateArray(config);
    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    }
    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
      yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
      if (config._dayOfYear > daysInYear(yearToUse)) {
        config._pf._overflowDayOfYear = true;
      }
      date = makeUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    }
    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
      config._a[i] = input[i] = currentDate[i];
    }
    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
    }
    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }
    config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
    // Apply timezone offset from input. The actual zone can be changed
    // with parseZone.
    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
    }
    if (config._nextDay) {
      config._a[HOUR] = 24;
    }
  }
  function dateFromObject(config) {
    var normalizedInput;
    if (config._d) {
      return;
    }
    normalizedInput = normalizeObjectUnits(config._i);
    config._a = [
      normalizedInput.year,
      normalizedInput.month,
      normalizedInput.day || normalizedInput.date,
      normalizedInput.hour,
      normalizedInput.minute,
      normalizedInput.second,
      normalizedInput.millisecond
    ];
    dateFromConfig(config);
  }
  function currentDateArray(config) {
    var now = new Date();
    if (config._useUTC) {
      return [
        now.getUTCFullYear(),
        now.getUTCMonth(),
        now.getUTCDate()
      ];
    } else {
      return [
        now.getFullYear(),
        now.getMonth(),
        now.getDate()
      ];
    }
  }
  // date from string and format string
  function makeDateFromStringAndFormat(config) {
    if (config._f === moment.ISO_8601) {
      parseISO(config);
      return;
    }
    config._a = [];
    config._pf.empty = true;
    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));
        if (skipped.length > 0) {
          config._pf.unusedInput.push(skipped);
        }
        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      }
      // don't parse if it's not a known token
      if (formatTokenFunctions[token]) {
        if (parsedInput) {
          config._pf.empty = false;
        } else {
          config._pf.unusedTokens.push(token);
        }
        addTimeToArrayFromToken(token, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        config._pf.unusedTokens.push(token);
      }
    }
    // add remaining unparsed input length to the string
    config._pf.charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
      config._pf.unusedInput.push(string);
    }
    // clear _12h flag if hour is <= 12
    if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
      config._pf.bigHour = undefined;
    }
    // handle am pm
    if (config._isPm && config._a[HOUR] < 12) {
      config._a[HOUR] += 12;
    }
    // if is 12 am, change hours to 0
    if (config._isPm === false && config._a[HOUR] === 12) {
      config._a[HOUR] = 0;
    }
    dateFromConfig(config);
    checkOverflow(config);
  }
  function unescapeFormat(s) {
    return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
      return p1 || p2 || p3 || p4;
    });
  }
  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  function regexpEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  // date from string and array of format strings
  function makeDateFromStringAndArray(config) {
    var tempConfig, bestMoment, scoreToBeat, i, currentScore;
    if (config._f.length === 0) {
      config._pf.invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }
    for (i = 0; i < config._f.length; i++) {
      currentScore = 0;
      tempConfig = copyConfig({}, config);
      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }
      tempConfig._pf = defaultParsingFlags();
      tempConfig._f = config._f[i];
      makeDateFromStringAndFormat(tempConfig);
      if (!isValid(tempConfig)) {
        continue;
      }
      // if there is any input that was not parsed add a penalty for that format
      currentScore += tempConfig._pf.charsLeftOver;
      //or tokens
      currentScore += tempConfig._pf.unusedTokens.length * 10;
      tempConfig._pf.score = currentScore;
      if (scoreToBeat == null || currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
    extend(config, bestMoment || tempConfig);
  }
  // date from iso format
  function parseISO(config) {
    var i, l, string = config._i, match = isoRegex.exec(string);
    if (match) {
      config._pf.iso = true;
      for (i = 0, l = isoDates.length; i < l; i++) {
        if (isoDates[i][1].exec(string)) {
          // match[5] should be 'T' or undefined
          config._f = isoDates[i][0] + (match[6] || ' ');
          break;
        }
      }
      for (i = 0, l = isoTimes.length; i < l; i++) {
        if (isoTimes[i][1].exec(string)) {
          config._f += isoTimes[i][0];
          break;
        }
      }
      if (string.match(parseTokenTimezone)) {
        config._f += 'Z';
      }
      makeDateFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  }
  // date from iso format or fallback
  function makeDateFromString(config) {
    parseISO(config);
    if (config._isValid === false) {
      delete config._isValid;
      moment.createFromInputFallback(config);
    }
  }
  function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
      res.push(fn(arr[i], i));
    }
    return res;
  }
  function makeDateFromInput(config) {
    var input = config._i, matched;
    if (input === undefined) {
      config._d = new Date();
    } else if (isDate(input)) {
      config._d = new Date(+input);
    } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
      config._d = new Date(+matched[1]);
    } else if (typeof input === 'string') {
      makeDateFromString(config);
    } else if (isArray(input)) {
      config._a = map(input.slice(0), function (obj) {
        return parseInt(obj, 10);
      });
      dateFromConfig(config);
    } else if (typeof input === 'object') {
      dateFromObject(config);
    } else if (typeof input === 'number') {
      // from milliseconds
      config._d = new Date(input);
    } else {
      moment.createFromInputFallback(config);
    }
  }
  function makeDate(y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);
    //the date constructor doesn't accept years < 1970
    if (y < 1970) {
      date.setFullYear(y);
    }
    return date;
  }
  function makeUTCDate(y) {
    var date = new Date(Date.UTC.apply(null, arguments));
    if (y < 1970) {
      date.setUTCFullYear(y);
    }
    return date;
  }
  function parseWeekday(input, locale) {
    if (typeof input === 'string') {
      if (!isNaN(input)) {
        input = parseInt(input, 10);
      } else {
        input = locale.weekdaysParse(input);
        if (typeof input !== 'number') {
          return null;
        }
      }
    }
    return input;
  }
  /************************************
      Relative Time
  ************************************/
  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }
  function relativeTime(posNegDuration, withoutSuffix, locale) {
    var duration = moment.duration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), years = round(duration.as('y')), args = seconds < relativeTimeThresholds.s && [
        's',
        seconds
      ] || minutes === 1 && ['m'] || minutes < relativeTimeThresholds.m && [
        'mm',
        minutes
      ] || hours === 1 && ['h'] || hours < relativeTimeThresholds.h && [
        'hh',
        hours
      ] || days === 1 && ['d'] || days < relativeTimeThresholds.d && [
        'dd',
        days
      ] || months === 1 && ['M'] || months < relativeTimeThresholds.M && [
        'MM',
        months
      ] || years === 1 && ['y'] || [
        'yy',
        years
      ];
    args[2] = withoutSuffix;
    args[3] = +posNegDuration > 0;
    args[4] = locale;
    return substituteTimeAgo.apply({}, args);
  }
  /************************************
      Week of Year
  ************************************/
  // firstDayOfWeek       0 = sun, 6 = sat
  //                      the day of the week that starts the week
  //                      (usually sunday or monday)
  // firstDayOfWeekOfYear 0 = sun, 6 = sat
  //                      the first week is the week that contains the first
  //                      of this day of the week
  //                      (eg. ISO weeks use thursday (4))
  function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
    var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
    if (daysToDayOfWeek > end) {
      daysToDayOfWeek -= 7;
    }
    if (daysToDayOfWeek < end - 7) {
      daysToDayOfWeek += 7;
    }
    adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
    return {
      week: Math.ceil(adjustedMoment.dayOfYear() / 7),
      year: adjustedMoment.year()
    };
  }
  //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
    var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
    d = d === 0 ? 7 : d;
    weekday = weekday != null ? weekday : firstDayOfWeek;
    daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
    dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
    return {
      year: dayOfYear > 0 ? year : year - 1,
      dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
    };
  }
  /************************************
      Top Level Functions
  ************************************/
  function makeMoment(config) {
    var input = config._i, format = config._f, res;
    config._locale = config._locale || moment.localeData(config._l);
    if (input === null || format === undefined && input === '') {
      return moment.invalid({ nullInput: true });
    }
    if (typeof input === 'string') {
      config._i = input = config._locale.preparse(input);
    }
    if (moment.isMoment(input)) {
      return new Moment(input, true);
    } else if (format) {
      if (isArray(format)) {
        makeDateFromStringAndArray(config);
      } else {
        makeDateFromStringAndFormat(config);
      }
    } else {
      makeDateFromInput(config);
    }
    res = new Moment(config);
    if (res._nextDay) {
      // Adding is smart enough around DST
      res.add(1, 'd');
      res._nextDay = undefined;
    }
    return res;
  }
  moment = function (input, format, locale, strict) {
    var c;
    if (typeof locale === 'boolean') {
      strict = locale;
      locale = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c = {};
    c._isAMomentObject = true;
    c._i = input;
    c._f = format;
    c._l = locale;
    c._strict = strict;
    c._isUTC = false;
    c._pf = defaultParsingFlags();
    return makeMoment(c);
  };
  moment.suppressDeprecationWarnings = false;
  moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
  });
  // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.
  function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
      moments = moments[0];
    }
    if (!moments.length) {
      return moment();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
      if (moments[i][fn](res)) {
        res = moments[i];
      }
    }
    return res;
  }
  moment.min = function () {
    var args = [].slice.call(arguments, 0);
    return pickBy('isBefore', args);
  };
  moment.max = function () {
    var args = [].slice.call(arguments, 0);
    return pickBy('isAfter', args);
  };
  // creating with utc
  moment.utc = function (input, format, locale, strict) {
    var c;
    if (typeof locale === 'boolean') {
      strict = locale;
      locale = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c = {};
    c._isAMomentObject = true;
    c._useUTC = true;
    c._isUTC = true;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    c._pf = defaultParsingFlags();
    return makeMoment(c).utc();
  };
  // creating with unix timestamp (in seconds)
  moment.unix = function (input) {
    return moment(input * 1000);
  };
  // duration
  moment.duration = function (input, key) {
    var duration = input,
      // matching against regexp is expensive, do it on demand
      match = null, sign, ret, parseIso, diffRes;
    if (moment.isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months
      };
    } else if (typeof input === 'number') {
      duration = {};
      if (key) {
        duration[key] = input;
      } else {
        duration.milliseconds = input;
      }
    } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign,
        h: toInt(match[HOUR]) * sign,
        m: toInt(match[MINUTE]) * sign,
        s: toInt(match[SECOND]) * sign,
        ms: toInt(match[MILLISECOND]) * sign
      };
    } else if (!!(match = isoDurationRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : 1;
      parseIso = function (inp) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
      };
      duration = {
        y: parseIso(match[2]),
        M: parseIso(match[3]),
        d: parseIso(match[4]),
        h: parseIso(match[5]),
        m: parseIso(match[6]),
        s: parseIso(match[7]),
        w: parseIso(match[8])
      };
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
      diffRes = momentsDifference(moment(duration.from), moment(duration.to));
      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }
    ret = new Duration(duration);
    if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
      ret._locale = input._locale;
    }
    return ret;
  };
  // version number
  moment.version = VERSION;
  // default format
  moment.defaultFormat = isoFormat;
  // constant that refers to the ISO standard
  moment.ISO_8601 = function () {
  };
  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  moment.momentProperties = momentProperties;
  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.
  moment.updateOffset = function () {
  };
  // This function allows you to set a threshold for relative time strings
  moment.relativeTimeThreshold = function (threshold, limit) {
    if (relativeTimeThresholds[threshold] === undefined) {
      return false;
    }
    if (limit === undefined) {
      return relativeTimeThresholds[threshold];
    }
    relativeTimeThresholds[threshold] = limit;
    return true;
  };
  moment.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', function (key, value) {
    return moment.locale(key, value);
  });
  // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.
  moment.locale = function (key, values) {
    var data;
    if (key) {
      if (typeof values !== 'undefined') {
        data = moment.defineLocale(key, values);
      } else {
        data = moment.localeData(key);
      }
      if (data) {
        moment.duration._locale = moment._locale = data;
      }
    }
    return moment._locale._abbr;
  };
  moment.defineLocale = function (name, values) {
    if (values !== null) {
      values.abbr = name;
      if (!locales[name]) {
        locales[name] = new Locale();
      }
      locales[name].set(values);
      // backwards compat for now: also set the locale
      moment.locale(name);
      return locales[name];
    } else {
      // useful for testing
      delete locales[name];
      return null;
    }
  };
  moment.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', function (key) {
    return moment.localeData(key);
  });
  // returns locale data
  moment.localeData = function (key) {
    var locale;
    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }
    if (!key) {
      return moment._locale;
    }
    if (!isArray(key)) {
      //short-circuit everything else
      locale = loadLocale(key);
      if (locale) {
        return locale;
      }
      key = [key];
    }
    return chooseLocale(key);
  };
  // compare moment object
  moment.isMoment = function (obj) {
    return obj instanceof Moment || obj != null && hasOwnProp(obj, '_isAMomentObject');
  };
  // for typechecking Duration objects
  moment.isDuration = function (obj) {
    return obj instanceof Duration;
  };
  for (i = lists.length - 1; i >= 0; --i) {
    makeList(lists[i]);
  }
  moment.normalizeUnits = function (units) {
    return normalizeUnits(units);
  };
  moment.invalid = function (flags) {
    var m = moment.utc(NaN);
    if (flags != null) {
      extend(m._pf, flags);
    } else {
      m._pf.userInvalidated = true;
    }
    return m;
  };
  moment.parseZone = function () {
    return moment.apply(null, arguments).parseZone();
  };
  moment.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };
  /************************************
      Moment Prototype
  ************************************/
  extend(moment.fn = Moment.prototype, {
    clone: function () {
      return moment(this);
    },
    valueOf: function () {
      return +this._d + (this._offset || 0) * 60000;
    },
    unix: function () {
      return Math.floor(+this / 1000);
    },
    toString: function () {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    },
    toDate: function () {
      return this._offset ? new Date(+this) : this._d;
    },
    toISOString: function () {
      var m = moment(this).utc();
      if (0 < m.year() && m.year() <= 9999) {
        if ('function' === typeof Date.prototype.toISOString) {
          // native implementation is ~50x faster, use it when we can
          return this.toDate().toISOString();
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
    },
    toArray: function () {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hours(),
        m.minutes(),
        m.seconds(),
        m.milliseconds()
      ];
    },
    isValid: function () {
      return isValid(this);
    },
    isDSTShifted: function () {
      if (this._a) {
        return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
      }
      return false;
    },
    parsingFlags: function () {
      return extend({}, this._pf);
    },
    invalidAt: function () {
      return this._pf.overflow;
    },
    utc: function (keepLocalTime) {
      return this.zone(0, keepLocalTime);
    },
    local: function (keepLocalTime) {
      if (this._isUTC) {
        this.zone(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.add(this._dateTzOffset(), 'm');
        }
      }
      return this;
    },
    format: function (inputString) {
      var output = formatMoment(this, inputString || moment.defaultFormat);
      return this.localeData().postformat(output);
    },
    add: createAdder(1, 'add'),
    subtract: createAdder(-1, 'subtract'),
    diff: function (input, units, asFloat) {
      var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 60000, diff, output, daysAdjust;
      units = normalizeUnits(units);
      if (units === 'year' || units === 'month') {
        // average number of days in the months in the given dates
        diff = (this.daysInMonth() + that.daysInMonth()) * 43200000;
        // 24 * 60 * 60 * 1000 / 2
        // difference in months
        output = (this.year() - that.year()) * 12 + (this.month() - that.month());
        // adjust by taking difference in days, average number of days
        // and dst in the given months.
        daysAdjust = this - moment(this).startOf('month') - (that - moment(that).startOf('month'));
        // same as above but with zones, to negate all dst
        daysAdjust -= (this.zone() - moment(this).startOf('month').zone() - (that.zone() - moment(that).startOf('month').zone())) * 60000;
        output += daysAdjust / diff;
        if (units === 'year') {
          output = output / 12;
        }
      } else {
        diff = this - that;
        output = units === 'second' ? diff / 1000 : // 1000
        units === 'minute' ? diff / 60000 : // 1000 * 60
        units === 'hour' ? diff / 3600000 : // 1000 * 60 * 60
        units === 'day' ? (diff - zoneDiff) / 86400000 : // 1000 * 60 * 60 * 24, negate dst
        units === 'week' ? (diff - zoneDiff) / 604800000 : // 1000 * 60 * 60 * 24 * 7, negate dst
        diff;
      }
      return asFloat ? output : absRound(output);
    },
    from: function (time, withoutSuffix) {
      return moment.duration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    },
    fromNow: function (withoutSuffix) {
      return this.from(moment(), withoutSuffix);
    },
    calendar: function (time) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're zone'd or not.
      var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      return this.format(this.localeData().calendar(format, this, moment(now)));
    },
    isLeapYear: function () {
      return isLeapYear(this.year());
    },
    isDST: function () {
      return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
    },
    day: function (input) {
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    },
    month: makeAccessor('Month', true),
    startOf: function (units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
      case 'year':
        this.month(0);
      /* falls through */
      case 'quarter':
      case 'month':
        this.date(1);
      /* falls through */
      case 'week':
      case 'isoWeek':
      case 'day':
        this.hours(0);
      /* falls through */
      case 'hour':
        this.minutes(0);
      /* falls through */
      case 'minute':
        this.seconds(0);
      /* falls through */
      case 'second':
        this.milliseconds(0);  /* falls through */
      }
      // weeks are a special case
      if (units === 'week') {
        this.weekday(0);
      } else if (units === 'isoWeek') {
        this.isoWeekday(1);
      }
      // quarters are also special
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
      }
      return this;
    },
    endOf: function (units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this;
      }
      return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    },
    isAfter: function (input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = moment.isMoment(input) ? input : moment(input);
        return +this > +input;
      } else {
        inputMs = moment.isMoment(input) ? +input : +moment(input);
        return inputMs < +this.clone().startOf(units);
      }
    },
    isBefore: function (input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = moment.isMoment(input) ? input : moment(input);
        return +this < +input;
      } else {
        inputMs = moment.isMoment(input) ? +input : +moment(input);
        return +this.clone().endOf(units) < inputMs;
      }
    },
    isSame: function (input, units) {
      var inputMs;
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        input = moment.isMoment(input) ? input : moment(input);
        return +this === +input;
      } else {
        inputMs = +moment(input);
        return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
      }
    },
    min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function (other) {
      other = moment.apply(null, arguments);
      return other < this ? this : other;
    }),
    max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function (other) {
      other = moment.apply(null, arguments);
      return other > this ? this : other;
    }),
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    zone: function (input, keepLocalTime) {
      var offset = this._offset || 0, localAdjust;
      if (input != null) {
        if (typeof input === 'string') {
          input = timezoneMinutesFromString(input);
        }
        if (Math.abs(input) < 16) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = this._dateTzOffset();
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.subtract(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            moment.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
      } else {
        return this._isUTC ? offset : this._dateTzOffset();
      }
      return this;
    },
    zoneAbbr: function () {
      return this._isUTC ? 'UTC' : '';
    },
    zoneName: function () {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    },
    parseZone: function () {
      if (this._tzm) {
        this.zone(this._tzm);
      } else if (typeof this._i === 'string') {
        this.zone(this._i);
      }
      return this;
    },
    hasAlignedHourOffset: function (input) {
      if (!input) {
        input = 0;
      } else {
        input = moment(input).zone();
      }
      return (this.zone() - input) % 60 === 0;
    },
    daysInMonth: function () {
      return daysInMonth(this.year(), this.month());
    },
    dayOfYear: function (input) {
      var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 86400000) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    },
    quarter: function (input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    },
    weekYear: function (input) {
      var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add(input - year, 'y');
    },
    isoWeekYear: function (input) {
      var year = weekOfYear(this, 1, 4).year;
      return input == null ? year : this.add(input - year, 'y');
    },
    week: function (input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    },
    isoWeek: function (input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    },
    weekday: function (input) {
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    },
    isoWeekday: function (input) {
      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    },
    isoWeeksInYear: function () {
      return weeksInYear(this.year(), 1, 4);
    },
    weeksInYear: function () {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    },
    get: function (units) {
      units = normalizeUnits(units);
      return this[units]();
    },
    set: function (units, value) {
      units = normalizeUnits(units);
      if (typeof this[units] === 'function') {
        this[units](value);
      }
      return this;
    },
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    locale: function (key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = moment.localeData(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    },
    lang: deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === undefined) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    }),
    localeData: function () {
      return this._locale;
    },
    _dateTzOffset: function () {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return Math.round(this._d.getTimezoneOffset() / 15) * 15;
    }
  });
  function rawMonthSetter(mom, value) {
    var dayOfMonth;
    // TODO: Move this out of here!
    if (typeof value === 'string') {
      value = mom.localeData().monthsParse(value);
      // TODO: Another silent failure?
      if (typeof value !== 'number') {
        return mom;
      }
    }
    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
  }
  function rawGetter(mom, unit) {
    return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
  }
  function rawSetter(mom, unit, value) {
    if (unit === 'Month') {
      return rawMonthSetter(mom, value);
    } else {
      return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
  }
  function makeAccessor(unit, keepTime) {
    return function (value) {
      if (value != null) {
        rawSetter(this, unit, value);
        moment.updateOffset(this, keepTime);
        return this;
      } else {
        return rawGetter(this, unit);
      }
    };
  }
  moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
  moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
  moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
  // Setting the hour should keep the time, because the user explicitly
  // specified which hour he wants. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.
  moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
  // moment.fn.month is defined separately
  moment.fn.date = makeAccessor('Date', true);
  moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
  moment.fn.year = makeAccessor('FullYear', true);
  moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));
  // add plural methods
  moment.fn.days = moment.fn.day;
  moment.fn.months = moment.fn.month;
  moment.fn.weeks = moment.fn.week;
  moment.fn.isoWeeks = moment.fn.isoWeek;
  moment.fn.quarters = moment.fn.quarter;
  // add aliased format methods
  moment.fn.toJSON = moment.fn.toISOString;
  /************************************
      Duration Prototype
  ************************************/
  function daysToYears(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    return days * 400 / 146097;
  }
  function yearsToDays(years) {
    // years * 365 + absRound(years / 4) -
    //     absRound(years / 100) + absRound(years / 400);
    return years * 146097 / 400;
  }
  extend(moment.duration.fn = Duration.prototype, {
    _bubble: function () {
      var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years = 0;
      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
      seconds = absRound(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absRound(seconds / 60);
      data.minutes = minutes % 60;
      hours = absRound(minutes / 60);
      data.hours = hours % 24;
      days += absRound(hours / 24);
      // Accurately convert days to years, assume start from year 0.
      years = absRound(daysToYears(days));
      days -= absRound(yearsToDays(years));
      // 30 days to a month
      // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
      months += absRound(days / 30);
      days %= 30;
      // 12 months -> 1 year
      years += absRound(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
    },
    abs: function () {
      this._milliseconds = Math.abs(this._milliseconds);
      this._days = Math.abs(this._days);
      this._months = Math.abs(this._months);
      this._data.milliseconds = Math.abs(this._data.milliseconds);
      this._data.seconds = Math.abs(this._data.seconds);
      this._data.minutes = Math.abs(this._data.minutes);
      this._data.hours = Math.abs(this._data.hours);
      this._data.months = Math.abs(this._data.months);
      this._data.years = Math.abs(this._data.years);
      return this;
    },
    weeks: function () {
      return absRound(this.days() / 7);
    },
    valueOf: function () {
      return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    },
    humanize: function (withSuffix) {
      var output = relativeTime(this, !withSuffix, this.localeData());
      if (withSuffix) {
        output = this.localeData().pastFuture(+this, output);
      }
      return this.localeData().postformat(output);
    },
    add: function (input, val) {
      // supports only 2.0-style add(1, 's') or add(moment)
      var dur = moment.duration(input, val);
      this._milliseconds += dur._milliseconds;
      this._days += dur._days;
      this._months += dur._months;
      this._bubble();
      return this;
    },
    subtract: function (input, val) {
      var dur = moment.duration(input, val);
      this._milliseconds -= dur._milliseconds;
      this._days -= dur._days;
      this._months -= dur._months;
      this._bubble();
      return this;
    },
    get: function (units) {
      units = normalizeUnits(units);
      return this[units.toLowerCase() + 's']();
    },
    as: function (units) {
      var days, months;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'year') {
        days = this._days + this._milliseconds / 86400000;
        months = this._months + daysToYears(days) * 12;
        return units === 'month' ? months : months / 12;
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(yearsToDays(this._months / 12));
        switch (units) {
        case 'week':
          return days / 7 + this._milliseconds / 604800000;
        case 'day':
          return days + this._milliseconds / 86400000;
        case 'hour':
          return days * 24 + this._milliseconds / 3600000;
        case 'minute':
          return days * 24 * 60 + this._milliseconds / 60000;
        case 'second':
          return days * 24 * 60 * 60 + this._milliseconds / 1000;
        // Math.floor prevents floating point math errors here
        case 'millisecond':
          return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
        default:
          throw new Error('Unknown unit ' + units);
        }
      }
    },
    lang: moment.fn.lang,
    locale: moment.fn.locale,
    toIsoString: deprecate('toIsoString() is deprecated. Please use toISOString() instead ' + '(notice the capitals)', function () {
      return this.toISOString();
    }),
    toISOString: function () {
      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);
      if (!this.asSeconds()) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
      }
      return (this.asSeconds() < 0 ? '-' : '') + 'P' + (years ? years + 'Y' : '') + (months ? months + 'M' : '') + (days ? days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hours + 'H' : '') + (minutes ? minutes + 'M' : '') + (seconds ? seconds + 'S' : '');
    },
    localeData: function () {
      return this._locale;
    }
  });
  moment.duration.fn.toString = moment.duration.fn.toISOString;
  function makeDurationGetter(name) {
    moment.duration.fn[name] = function () {
      return this._data[name];
    };
  }
  for (i in unitMillisecondFactors) {
    if (hasOwnProp(unitMillisecondFactors, i)) {
      makeDurationGetter(i.toLowerCase());
    }
  }
  moment.duration.fn.asMilliseconds = function () {
    return this.as('ms');
  };
  moment.duration.fn.asSeconds = function () {
    return this.as('s');
  };
  moment.duration.fn.asMinutes = function () {
    return this.as('m');
  };
  moment.duration.fn.asHours = function () {
    return this.as('h');
  };
  moment.duration.fn.asDays = function () {
    return this.as('d');
  };
  moment.duration.fn.asWeeks = function () {
    return this.as('weeks');
  };
  moment.duration.fn.asMonths = function () {
    return this.as('M');
  };
  moment.duration.fn.asYears = function () {
    return this.as('y');
  };
  /************************************
      Default Locale
  ************************************/
  // Set default locale, other locale will inherit from English.
  moment.locale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function (number) {
      var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
      return number + output;
    }
  });
  /* EMBED_LOCALES */
  /************************************
      Exposing Moment
  ************************************/
  function makeGlobal(shouldDeprecate) {
    /*global ender:false */
    if (typeof ender !== 'undefined') {
      return;
    }
    oldGlobalMoment = globalScope.moment;
    if (shouldDeprecate) {
      globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment);
    } else {
      globalScope.moment = moment;
    }
  }
  // CommonJS module is defined
  if (hasModule) {
    module.exports = moment;
  } else if (true) {
    oh_moment = function (require, exports, module) {
      if (module.config && module.config() && module.config().noGlobal === true) {
        // release the global variable
        globalScope.moment = oldGlobalMoment;
      }
      return moment;
    }(oh_require, oh_exports, oh_module);
    makeGlobal(true);
  } else {
    makeGlobal();
  }
}.call(this));
//! moment-timezone.js
//! version : 0.2.5
//! author : Tim Wood
//! license : MIT
//! github.com/moment/moment-timezone
(function (root, factory) {
  
  /*global define*/
  if (true) {
    oh_moment_timezone = function (oh_moment) {
      return typeof factory === 'function' ? factory(oh_moment) : factory;
    }(oh_moment);
  } else if (typeof exports === 'object') {
    module.exports = factory(oh_moment);  // Node
  } else {
    factory(root.moment);  // Browser
  }
}(this, function (moment) {
  
  // Do not load moment-timezone a second time.
  if (moment.tz !== undefined) {
    return moment;
  }
  var VERSION = '0.2.5', zones = {}, links = {}, momentVersion = moment.version.split('.'), major = +momentVersion[0], minor = +momentVersion[1];
  // Moment.js version check
  if (major < 2 || major === 2 && minor < 6) {
    logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
  }
  /************************************
  		Unpacking
  	************************************/
  function charCodeToInt(charCode) {
    if (charCode > 96) {
      return charCode - 87;
    } else if (charCode > 64) {
      return charCode - 29;
    }
    return charCode - 48;
  }
  function unpackBase60(string) {
    var i = 0, parts = string.split('.'), whole = parts[0], fractional = parts[1] || '', multiplier = 1, num, out = 0, sign = 1;
    // handle negative numbers
    if (string.charCodeAt(0) === 45) {
      i = 1;
      sign = -1;
    }
    // handle digits before the decimal
    for (i; i < whole.length; i++) {
      num = charCodeToInt(whole.charCodeAt(i));
      out = 60 * out + num;
    }
    // handle digits after the decimal
    for (i = 0; i < fractional.length; i++) {
      multiplier = multiplier / 60;
      num = charCodeToInt(fractional.charCodeAt(i));
      out += num * multiplier;
    }
    return out * sign;
  }
  function arrayToInt(array) {
    for (var i = 0; i < array.length; i++) {
      array[i] = unpackBase60(array[i]);
    }
  }
  function intToUntil(array, length) {
    for (var i = 0; i < length; i++) {
      array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000);  // minutes to milliseconds
    }
    array[length - 1] = Infinity;
  }
  function mapIndices(source, indices) {
    var out = [], i;
    for (i = 0; i < indices.length; i++) {
      out[i] = source[indices[i]];
    }
    return out;
  }
  function unpack(string) {
    var data = string.split('|'), offsets = data[2].split(' '), indices = data[3].split(''), untils = data[4].split(' ');
    arrayToInt(offsets);
    arrayToInt(indices);
    arrayToInt(untils);
    intToUntil(untils, indices.length);
    return {
      name: data[0],
      abbrs: mapIndices(data[1].split(' '), indices),
      offsets: mapIndices(offsets, indices),
      untils: untils
    };
  }
  /************************************
  		Zone object
  	************************************/
  function Zone(packedString) {
    if (packedString) {
      this._set(unpack(packedString));
    }
  }
  Zone.prototype = {
    _set: function (unpacked) {
      this.name = unpacked.name;
      this.abbrs = unpacked.abbrs;
      this.untils = unpacked.untils;
      this.offsets = unpacked.offsets;
    },
    _index: function (timestamp) {
      var target = +timestamp, untils = this.untils, i;
      for (i = 0; i < untils.length; i++) {
        if (target < untils[i]) {
          return i;
        }
      }
    },
    parse: function (timestamp) {
      var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
      for (i = 0; i < max; i++) {
        offset = offsets[i];
        offsetNext = offsets[i + 1];
        offsetPrev = offsets[i ? i - 1 : i];
        if (offset < offsetNext && tz.moveAmbiguousForward) {
          offset = offsetNext;
        } else if (offset > offsetPrev && tz.moveInvalidForward) {
          offset = offsetPrev;
        }
        if (target < untils[i] - offset * 60000) {
          return offsets[i];
        }
      }
      return offsets[max];
    },
    abbr: function (mom) {
      return this.abbrs[this._index(mom)];
    },
    offset: function (mom) {
      return this.offsets[this._index(mom)];
    }
  };
  /************************************
  		Global Methods
  	************************************/
  function normalizeName(name) {
    return (name || '').toLowerCase().replace(/\//g, '_');
  }
  function addZone(packed) {
    var i, zone, zoneName;
    if (typeof packed === 'string') {
      packed = [packed];
    }
    for (i = 0; i < packed.length; i++) {
      zone = new Zone(packed[i]);
      zoneName = normalizeName(zone.name);
      zones[zoneName] = zone;
      upgradeLinksToZones(zoneName);
    }
  }
  function getZone(name) {
    return zones[normalizeName(name)] || null;
  }
  function getNames() {
    var i, out = [];
    for (i in zones) {
      if (zones.hasOwnProperty(i) && zones[i]) {
        out.push(zones[i].name);
      }
    }
    return out.sort();
  }
  function addLink(aliases) {
    var i, alias;
    if (typeof aliases === 'string') {
      aliases = [aliases];
    }
    for (i = 0; i < aliases.length; i++) {
      alias = aliases[i].split('|');
      pushLink(alias[0], alias[1]);
      pushLink(alias[1], alias[0]);
    }
  }
  function upgradeLinksToZones(zoneName) {
    if (!links[zoneName]) {
      return;
    }
    var i, zone = zones[zoneName], linkNames = links[zoneName];
    for (i = 0; i < linkNames.length; i++) {
      copyZoneWithName(zone, linkNames[i]);
    }
    links[zoneName] = null;
  }
  function copyZoneWithName(zone, name) {
    var linkZone = zones[normalizeName(name)] = new Zone();
    linkZone._set(zone);
    linkZone.name = name;
  }
  function pushLink(zoneName, linkName) {
    zoneName = normalizeName(zoneName);
    if (zones[zoneName]) {
      copyZoneWithName(zones[zoneName], linkName);
    } else {
      links[zoneName] = links[zoneName] || [];
      links[zoneName].push(linkName);
    }
  }
  function loadData(data) {
    addZone(data.zones);
    addLink(data.links);
    tz.dataVersion = data.version;
  }
  function zoneExists(name) {
    if (!zoneExists.didShowError) {
      zoneExists.didShowError = true;
      logError('moment.tz.zoneExists(\'' + name + '\') has been deprecated in favor of !moment.tz.zone(\'' + name + '\')');
    }
    return !!getZone(name);
  }
  function needsOffset(m) {
    return !!(m._a && m._tzm === undefined);
  }
  function logError(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }
  }
  /************************************
  		moment.tz namespace
  	************************************/
  function tz() {
    var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
    if (zone && needsOffset(out)) {
      out.add(zone.parse(out), 'minutes');
    }
    out.tz(name);
    return out;
  }
  tz.version = VERSION;
  tz.dataVersion = '';
  tz._zones = zones;
  tz._links = links;
  tz.add = addZone;
  tz.link = addLink;
  tz.load = loadData;
  tz.zone = getZone;
  tz.zoneExists = zoneExists;
  // deprecated in 0.1.0
  tz.names = getNames;
  tz.Zone = Zone;
  tz.unpack = unpack;
  tz.unpackBase60 = unpackBase60;
  tz.needsOffset = needsOffset;
  tz.moveInvalidForward = true;
  tz.moveAmbiguousForward = false;
  /************************************
  		Interface with Moment.js
  	************************************/
  var fn = moment.fn;
  moment.tz = tz;
  moment.updateOffset = function (mom, keepTime) {
    var offset;
    if (mom._z) {
      offset = mom._z.offset(mom);
      if (Math.abs(offset) < 16) {
        offset = offset / 60;
      }
      mom.zone(offset, keepTime);
    }
  };
  fn.tz = function (name) {
    if (name) {
      this._z = getZone(name);
      if (this._z) {
        moment.updateOffset(this);
      } else {
        logError('Moment Timezone has no data for ' + name + '. See http://momentjs.com/timezone/docs/#/data-loading/.');
      }
      return this;
    }
    if (this._z) {
      return this._z.name;
    }
  };
  function abbrWrap(old) {
    return function () {
      if (this._z) {
        return this._z.abbr(this);
      }
      return old.call(this);
    };
  }
  function resetZoneWrap(old) {
    return function () {
      this._z = null;
      return old.apply(this, arguments);
    };
  }
  fn.zoneName = abbrWrap(fn.zoneName);
  fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
  fn.utc = resetZoneWrap(fn.utc);
  // Cloning a moment should include the _z property.
  var momentProperties = moment.momentProperties;
  if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
    // moment 2.8.1+
    momentProperties.push('_z');
    momentProperties.push('_a');
  } else if (momentProperties) {
    // moment 2.7.0
    momentProperties._z = null;
  }
  loadData({
    'version': '2014j',
    'zones': [
      'Africa/Abidjan|GMT|0|0|',
      'Africa/Addis_Ababa|EAT|-30|0|',
      'Africa/Algiers|CET|-10|0|',
      'Africa/Bangui|WAT|-10|0|',
      'Africa/Blantyre|CAT|-20|0|',
      'Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010|1Cby0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0 1o10 jz0 gN0 pb0 1qN0 dX0 e10 xz0 1o10 bb0 e10 An0 1o10 5z0 e10 FX0 1o10 2L0 e10 IL0 1C10 Lz0',
      'Africa/Casablanca|WET WEST|0 -10|01010101010101010101010101010101010101010|1Cco0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0',
      'Africa/Ceuta|CET CEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Africa/Johannesburg|SAST|-20|0|',
      'Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00',
      'Africa/Windhoek|WAST WAT|-20 -10|01010101010101010101010|1C1c0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0',
      'America/Adak|HAST HADT|a0 90|01010101010101010101010|1BR00 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1BQX0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Anguilla|AST|40|0|',
      'America/Araguaina|BRT BRST|30 20|010|1IdD0 Lz0',
      'America/Argentina/Buenos_Aires|ART|30|0|',
      'America/Asuncion|PYST PYT|30 40|01010101010101010101010|1C430 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0',
      'America/Atikokan|EST|50|0|',
      'America/Bahia|BRT BRST|30 20|010|1FJf0 Rb0',
      'America/Bahia_Banderas|MST CDT CST|70 50 60|01212121212121212121212|1C1l0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0',
      'America/Belem|BRT|30|0|',
      'America/Belize|CST|60|0|',
      'America/Boa_Vista|AMT|40|0|',
      'America/Bogota|COT|50|0|',
      'America/Boise|MST MDT|70 60|01010101010101010101010|1BQV0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Campo_Grande|AMST AMT|30 40|01010101010101010101010|1BIr0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10',
      'America/Cancun|CST CDT|60 50|01010101010101010101010|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0',
      'America/Caracas|VET|4u|0|',
      'America/Cayenne|GFT|30|0|',
      'America/Chicago|CST CDT|60 50|01010101010101010101010|1BQU0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Chihuahua|MST MDT|70 60|01010101010101010101010|1C1l0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0',
      'America/Creston|MST|70|0|',
      'America/Dawson|PST PDT|80 70|01010101010101010101010|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Detroit|EST EDT|50 40|01010101010101010101010|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Eirunepe|AMT ACT|40 50|01|1KLE0',
      'America/Glace_Bay|AST ADT|40 30|01010101010101010101010|1BQS0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Godthab|WGT WGST|30 20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'America/Goose_Bay|AST ADT|40 30|01010101010101010101010|1BQQ1 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Grand_Turk|EST EDT AST|50 40 40|0101010101012|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Guayaquil|ECT|50|0|',
      'America/Guyana|GYT|40|0|',
      'America/Havana|CST CDT|50 40|01010101010101010101010|1BQR0 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0',
      'America/La_Paz|BOT|40|0|',
      'America/Lima|PET|50|0|',
      'America/Metlakatla|PST|80|0|',
      'America/Miquelon|PMST PMDT|30 20|01010101010101010101010|1BQR0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Montevideo|UYST UYT|20 30|01010101010101010101010|1BQQ0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10',
      'America/Noronha|FNT|20|0|',
      'America/North_Dakota/Beulah|MST MDT CST CDT|70 60 60 50|01232323232323232323232|1BQV0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Paramaribo|SRT|30|0|',
      'America/Port-au-Prince|EST EDT|50 40|0101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'America/Santa_Isabel|PST PDT|80 70|01010101010101010101010|1C1m0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0',
      'America/Santiago|CLST CLT|30 40|01010101010101010101010|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0',
      'America/Sao_Paulo|BRST BRT|20 30|01010101010101010101010|1BIq0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10',
      'America/Scoresbysund|EGT EGST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1BQPv 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
      'Antarctica/Casey|CAST AWST|-b0 -80|0101|1BN30 40P0 KL0',
      'Antarctica/Davis|DAVT DAVT|-50 -70|0101|1BPw0 3Wn0 KN0',
      'Antarctica/DumontDUrville|DDUT|-a0|0|',
      'Antarctica/Macquarie|AEDT MIST|-b0 -b0|01|1C140',
      'Antarctica/Mawson|MAWT|-50|0|',
      'Antarctica/McMurdo|NZDT NZST|-d0 -c0|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00',
      'Antarctica/Rothera|ROTT|30|0|',
      'Antarctica/Syowa|SYOT|-30|0|',
      'Antarctica/Troll|UTC CEST|0 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Antarctica/Vostok|VOST|-60|0|',
      'Asia/Aden|AST|-30|0|',
      'Asia/Almaty|ALMT|-60|0|',
      'Asia/Amman|EET EEST|-20 -30|010101010101010101010|1BVy0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0',
      'Asia/Anadyr|ANAT ANAST ANAT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0',
      'Asia/Aqtau|AQTT|-50|0|',
      'Asia/Ashgabat|TMT|-50|0|',
      'Asia/Baku|AZT AZST|-40 -50|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Asia/Bangkok|ICT|-70|0|',
      'Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1BWm0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0',
      'Asia/Bishkek|KGT|-60|0|',
      'Asia/Brunei|BNT|-80|0|',
      'Asia/Calcutta|IST|-5u|0|',
      'Asia/Chita|YAKT YAKST YAKT IRKT|-90 -a0 -a0 -80|01023|1BWh0 1qM0 WM0 8Hz0',
      'Asia/Choibalsan|CHOT|-80|0|',
      'Asia/Chongqing|CST|-80|0|',
      'Asia/Dacca|BDT|-60|0|',
      'Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1C0m0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0',
      'Asia/Dili|TLT|-90|0|',
      'Asia/Dubai|GST|-40|0|',
      'Asia/Dushanbe|TJT|-50|0|',
      'Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1BVW1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0',
      'Asia/Hebron|EET EEST|-20 -30|0101010101010101010101010|1BVy0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0',
      'Asia/Hong_Kong|HKT|-80|0|',
      'Asia/Hovd|HOVT|-70|0|',
      'Asia/Irkutsk|IRKT IRKST IRKT|-80 -90 -90|01020|1BWi0 1qM0 WM0 8Hz0',
      'Asia/Istanbul|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Asia/Jakarta|WIB|-70|0|',
      'Asia/Jayapura|WIT|-90|0|',
      'Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1BVA0 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0',
      'Asia/Kabul|AFT|-4u|0|',
      'Asia/Kamchatka|PETT PETST PETT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0',
      'Asia/Karachi|PKT|-50|0|',
      'Asia/Kashgar|XJT|-60|0|',
      'Asia/Kathmandu|NPT|-5J|0|',
      'Asia/Khandyga|VLAT VLAST VLAT YAKT YAKT|-a0 -b0 -b0 -a0 -90|010234|1BWg0 1qM0 WM0 17V0 7zD0',
      'Asia/Krasnoyarsk|KRAT KRAST KRAT|-70 -80 -80|01020|1BWj0 1qM0 WM0 8Hz0',
      'Asia/Kuala_Lumpur|MYT|-80|0|',
      'Asia/Magadan|MAGT MAGST MAGT MAGT|-b0 -c0 -c0 -a0|01023|1BWf0 1qM0 WM0 8Hz0',
      'Asia/Makassar|WITA|-80|0|',
      'Asia/Manila|PHT|-80|0|',
      'Asia/Nicosia|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Asia/Novokuznetsk|KRAT NOVST NOVT NOVT|-70 -70 -60 -70|01230|1BWj0 1qN0 WM0 8Hz0',
      'Asia/Novosibirsk|NOVT NOVST NOVT|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0',
      'Asia/Omsk|OMST OMSST OMST|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0',
      'Asia/Oral|ORAT|-50|0|',
      'Asia/Pyongyang|KST|-90|0|',
      'Asia/Qyzylorda|QYZT|-60|0|',
      'Asia/Rangoon|MMT|-6u|0|',
      'Asia/Sakhalin|SAKT SAKST SAKT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0',
      'Asia/Samarkand|UZT|-50|0|',
      'Asia/Singapore|SGT|-80|0|',
      'Asia/Srednekolymsk|MAGT MAGST MAGT SRET|-b0 -c0 -c0 -b0|01023|1BWf0 1qM0 WM0 8Hz0',
      'Asia/Tbilisi|GET|-40|0|',
      'Asia/Tehran|IRST IRDT|-3u -4u|01010101010101010101010|1BTUu 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0',
      'Asia/Thimbu|BTT|-60|0|',
      'Asia/Tokyo|JST|-90|0|',
      'Asia/Ulaanbaatar|ULAT|-80|0|',
      'Asia/Ust-Nera|MAGT MAGST MAGT VLAT VLAT|-b0 -c0 -c0 -b0 -a0|010234|1BWf0 1qM0 WM0 17V0 7zD0',
      'Asia/Vladivostok|VLAT VLAST VLAT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0',
      'Asia/Yakutsk|YAKT YAKST YAKT|-90 -a0 -a0|01020|1BWh0 1qM0 WM0 8Hz0',
      'Asia/Yekaterinburg|YEKT YEKST YEKT|-50 -60 -60|01020|1BWl0 1qM0 WM0 8Hz0',
      'Asia/Yerevan|AMT AMST|-40 -50|01010|1BWm0 1qM0 WM0 1qM0',
      'Atlantic/Azores|AZOT AZOST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Atlantic/Canary|WET WEST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Atlantic/Cape_Verde|CVT|10|0|',
      'Atlantic/South_Georgia|GST|20|0|',
      'Atlantic/Stanley|FKST FKT|30 40|010|1C6R0 U10',
      'Australia/ACT|AEDT AEST|-b0 -a0|01010101010101010101010|1C140 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0',
      'Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1C14u 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0',
      'Australia/Brisbane|AEST|-a0|0|',
      'Australia/Darwin|ACST|-9u|0|',
      'Australia/Eucla|ACWST|-8J|0|',
      'Australia/LHI|LHDT LHST|-b0 -au|01010101010101010101010|1C130 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu',
      'Australia/Perth|AWST|-80|0|',
      'Chile/EasterIsland|EASST EAST|50 60|01010101010101010101010|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0',
      'Eire|GMT IST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Etc/GMT+1|GMT+1|10|0|',
      'Etc/GMT+10|GMT+10|a0|0|',
      'Etc/GMT+11|GMT+11|b0|0|',
      'Etc/GMT+12|GMT+12|c0|0|',
      'Etc/GMT+2|GMT+2|20|0|',
      'Etc/GMT+3|GMT+3|30|0|',
      'Etc/GMT+4|GMT+4|40|0|',
      'Etc/GMT+5|GMT+5|50|0|',
      'Etc/GMT+6|GMT+6|60|0|',
      'Etc/GMT+7|GMT+7|70|0|',
      'Etc/GMT+8|GMT+8|80|0|',
      'Etc/GMT+9|GMT+9|90|0|',
      'Etc/GMT-1|GMT-1|-10|0|',
      'Etc/GMT-10|GMT-10|-a0|0|',
      'Etc/GMT-11|GMT-11|-b0|0|',
      'Etc/GMT-12|GMT-12|-c0|0|',
      'Etc/GMT-13|GMT-13|-d0|0|',
      'Etc/GMT-14|GMT-14|-e0|0|',
      'Etc/GMT-2|GMT-2|-20|0|',
      'Etc/GMT-3|GMT-3|-30|0|',
      'Etc/GMT-4|GMT-4|-40|0|',
      'Etc/GMT-5|GMT-5|-50|0|',
      'Etc/GMT-6|GMT-6|-60|0|',
      'Etc/GMT-7|GMT-7|-70|0|',
      'Etc/GMT-8|GMT-8|-80|0|',
      'Etc/GMT-9|GMT-9|-90|0|',
      'Etc/UCT|UCT|0|0|',
      'Etc/UTC|UTC|0|0|',
      'Europe/Belfast|GMT BST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'Europe/Kaliningrad|EET EEST FET|-20 -30 -30|01020|1BWo0 1qM0 WM0 8Hz0',
      'Europe/Minsk|EET EEST FET MSK|-20 -30 -30 -30|01023|1BWo0 1qM0 WM0 8Hy0',
      'Europe/Moscow|MSK MSD MSK|-30 -40 -40|01020|1BWn0 1qM0 WM0 8Hz0',
      'Europe/Samara|SAMT SAMST SAMT|-40 -40 -30|0120|1BWm0 1qN0 WM0',
      'Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|01010101023|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0',
      'Europe/Volgograd|MSK MSK|-30 -40|01010|1BWn0 1qM0 WM0 8Hz0',
      'HST|HST|a0|0|',
      'Indian/Chagos|IOT|-60|0|',
      'Indian/Christmas|CXT|-70|0|',
      'Indian/Cocos|CCT|-6u|0|',
      'Indian/Kerguelen|TFT|-50|0|',
      'Indian/Mahe|SCT|-40|0|',
      'Indian/Maldives|MVT|-50|0|',
      'Indian/Mauritius|MUT|-40|0|',
      'Indian/Reunion|RET|-40|0|',
      'Kwajalein|MHT|-c0|0|',
      'MET|MET MEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
      'NZ-CHAT|CHADT CHAST|-dJ -cJ|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00',
      'Pacific/Apia|SST SDT WSDT WSST|b0 a0 -e0 -d0|01012323232323232323232|1Dbn0 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00',
      'Pacific/Bougainville|PGT BST|-a0 -b0|01|1NwE0',
      'Pacific/Chuuk|CHUT|-a0|0|',
      'Pacific/Efate|VUT|-b0|0|',
      'Pacific/Enderbury|PHOT|-d0|0|',
      'Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0',
      'Pacific/Fiji|FJST FJT|-d0 -c0|01010101010101010101010|1BWe0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0',
      'Pacific/Funafuti|TVT|-c0|0|',
      'Pacific/Galapagos|GALT|60|0|',
      'Pacific/Gambier|GAMT|90|0|',
      'Pacific/Guadalcanal|SBT|-b0|0|',
      'Pacific/Guam|ChST|-a0|0|',
      'Pacific/Kiritimati|LINT|-e0|0|',
      'Pacific/Kosrae|KOST|-b0|0|',
      'Pacific/Marquesas|MART|9u|0|',
      'Pacific/Midway|SST|b0|0|',
      'Pacific/Nauru|NRT|-c0|0|',
      'Pacific/Niue|NUT|b0|0|',
      'Pacific/Norfolk|NFT|-bu|0|',
      'Pacific/Noumea|NCT|-b0|0|',
      'Pacific/Palau|PWT|-90|0|',
      'Pacific/Pohnpei|PONT|-b0|0|',
      'Pacific/Port_Moresby|PGT|-a0|0|',
      'Pacific/Rarotonga|CKT|a0|0|',
      'Pacific/Tahiti|TAHT|a0|0|',
      'Pacific/Tarawa|GILT|-c0|0|',
      'Pacific/Tongatapu|TOT|-d0|0|',
      'Pacific/Wake|WAKT|-c0|0|',
      'Pacific/Wallis|WFT|-c0|0|'
    ],
    'links': [
      'Africa/Abidjan|Africa/Accra',
      'Africa/Abidjan|Africa/Bamako',
      'Africa/Abidjan|Africa/Banjul',
      'Africa/Abidjan|Africa/Bissau',
      'Africa/Abidjan|Africa/Conakry',
      'Africa/Abidjan|Africa/Dakar',
      'Africa/Abidjan|Africa/Freetown',
      'Africa/Abidjan|Africa/Lome',
      'Africa/Abidjan|Africa/Monrovia',
      'Africa/Abidjan|Africa/Nouakchott',
      'Africa/Abidjan|Africa/Ouagadougou',
      'Africa/Abidjan|Africa/Sao_Tome',
      'Africa/Abidjan|Africa/Timbuktu',
      'Africa/Abidjan|America/Danmarkshavn',
      'Africa/Abidjan|Atlantic/Reykjavik',
      'Africa/Abidjan|Atlantic/St_Helena',
      'Africa/Abidjan|Etc/GMT',
      'Africa/Abidjan|Etc/GMT+0',
      'Africa/Abidjan|Etc/GMT-0',
      'Africa/Abidjan|Etc/GMT0',
      'Africa/Abidjan|Etc/Greenwich',
      'Africa/Abidjan|GMT',
      'Africa/Abidjan|GMT+0',
      'Africa/Abidjan|GMT-0',
      'Africa/Abidjan|GMT0',
      'Africa/Abidjan|Greenwich',
      'Africa/Abidjan|Iceland',
      'Africa/Addis_Ababa|Africa/Asmara',
      'Africa/Addis_Ababa|Africa/Asmera',
      'Africa/Addis_Ababa|Africa/Dar_es_Salaam',
      'Africa/Addis_Ababa|Africa/Djibouti',
      'Africa/Addis_Ababa|Africa/Juba',
      'Africa/Addis_Ababa|Africa/Kampala',
      'Africa/Addis_Ababa|Africa/Khartoum',
      'Africa/Addis_Ababa|Africa/Mogadishu',
      'Africa/Addis_Ababa|Africa/Nairobi',
      'Africa/Addis_Ababa|Indian/Antananarivo',
      'Africa/Addis_Ababa|Indian/Comoro',
      'Africa/Addis_Ababa|Indian/Mayotte',
      'Africa/Algiers|Africa/Tunis',
      'Africa/Bangui|Africa/Brazzaville',
      'Africa/Bangui|Africa/Douala',
      'Africa/Bangui|Africa/Kinshasa',
      'Africa/Bangui|Africa/Lagos',
      'Africa/Bangui|Africa/Libreville',
      'Africa/Bangui|Africa/Luanda',
      'Africa/Bangui|Africa/Malabo',
      'Africa/Bangui|Africa/Ndjamena',
      'Africa/Bangui|Africa/Niamey',
      'Africa/Bangui|Africa/Porto-Novo',
      'Africa/Blantyre|Africa/Bujumbura',
      'Africa/Blantyre|Africa/Gaborone',
      'Africa/Blantyre|Africa/Harare',
      'Africa/Blantyre|Africa/Kigali',
      'Africa/Blantyre|Africa/Lubumbashi',
      'Africa/Blantyre|Africa/Lusaka',
      'Africa/Blantyre|Africa/Maputo',
      'Africa/Cairo|Egypt',
      'Africa/Casablanca|Africa/El_Aaiun',
      'Africa/Ceuta|Arctic/Longyearbyen',
      'Africa/Ceuta|Atlantic/Jan_Mayen',
      'Africa/Ceuta|CET',
      'Africa/Ceuta|Europe/Amsterdam',
      'Africa/Ceuta|Europe/Andorra',
      'Africa/Ceuta|Europe/Belgrade',
      'Africa/Ceuta|Europe/Berlin',
      'Africa/Ceuta|Europe/Bratislava',
      'Africa/Ceuta|Europe/Brussels',
      'Africa/Ceuta|Europe/Budapest',
      'Africa/Ceuta|Europe/Busingen',
      'Africa/Ceuta|Europe/Copenhagen',
      'Africa/Ceuta|Europe/Gibraltar',
      'Africa/Ceuta|Europe/Ljubljana',
      'Africa/Ceuta|Europe/Luxembourg',
      'Africa/Ceuta|Europe/Madrid',
      'Africa/Ceuta|Europe/Malta',
      'Africa/Ceuta|Europe/Monaco',
      'Africa/Ceuta|Europe/Oslo',
      'Africa/Ceuta|Europe/Paris',
      'Africa/Ceuta|Europe/Podgorica',
      'Africa/Ceuta|Europe/Prague',
      'Africa/Ceuta|Europe/Rome',
      'Africa/Ceuta|Europe/San_Marino',
      'Africa/Ceuta|Europe/Sarajevo',
      'Africa/Ceuta|Europe/Skopje',
      'Africa/Ceuta|Europe/Stockholm',
      'Africa/Ceuta|Europe/Tirane',
      'Africa/Ceuta|Europe/Vaduz',
      'Africa/Ceuta|Europe/Vatican',
      'Africa/Ceuta|Europe/Vienna',
      'Africa/Ceuta|Europe/Warsaw',
      'Africa/Ceuta|Europe/Zagreb',
      'Africa/Ceuta|Europe/Zurich',
      'Africa/Ceuta|Poland',
      'Africa/Johannesburg|Africa/Maseru',
      'Africa/Johannesburg|Africa/Mbabane',
      'Africa/Tripoli|Libya',
      'America/Adak|America/Atka',
      'America/Adak|US/Aleutian',
      'America/Anchorage|America/Juneau',
      'America/Anchorage|America/Nome',
      'America/Anchorage|America/Sitka',
      'America/Anchorage|America/Yakutat',
      'America/Anchorage|US/Alaska',
      'America/Anguilla|America/Antigua',
      'America/Anguilla|America/Aruba',
      'America/Anguilla|America/Barbados',
      'America/Anguilla|America/Blanc-Sablon',
      'America/Anguilla|America/Curacao',
      'America/Anguilla|America/Dominica',
      'America/Anguilla|America/Grenada',
      'America/Anguilla|America/Guadeloupe',
      'America/Anguilla|America/Kralendijk',
      'America/Anguilla|America/Lower_Princes',
      'America/Anguilla|America/Marigot',
      'America/Anguilla|America/Martinique',
      'America/Anguilla|America/Montserrat',
      'America/Anguilla|America/Port_of_Spain',
      'America/Anguilla|America/Puerto_Rico',
      'America/Anguilla|America/Santo_Domingo',
      'America/Anguilla|America/St_Barthelemy',
      'America/Anguilla|America/St_Kitts',
      'America/Anguilla|America/St_Lucia',
      'America/Anguilla|America/St_Thomas',
      'America/Anguilla|America/St_Vincent',
      'America/Anguilla|America/Tortola',
      'America/Anguilla|America/Virgin',
      'America/Argentina/Buenos_Aires|America/Argentina/Catamarca',
      'America/Argentina/Buenos_Aires|America/Argentina/ComodRivadavia',
      'America/Argentina/Buenos_Aires|America/Argentina/Cordoba',
      'America/Argentina/Buenos_Aires|America/Argentina/Jujuy',
      'America/Argentina/Buenos_Aires|America/Argentina/La_Rioja',
      'America/Argentina/Buenos_Aires|America/Argentina/Mendoza',
      'America/Argentina/Buenos_Aires|America/Argentina/Rio_Gallegos',
      'America/Argentina/Buenos_Aires|America/Argentina/Salta',
      'America/Argentina/Buenos_Aires|America/Argentina/San_Juan',
      'America/Argentina/Buenos_Aires|America/Argentina/San_Luis',
      'America/Argentina/Buenos_Aires|America/Argentina/Tucuman',
      'America/Argentina/Buenos_Aires|America/Argentina/Ushuaia',
      'America/Argentina/Buenos_Aires|America/Buenos_Aires',
      'America/Argentina/Buenos_Aires|America/Catamarca',
      'America/Argentina/Buenos_Aires|America/Cordoba',
      'America/Argentina/Buenos_Aires|America/Jujuy',
      'America/Argentina/Buenos_Aires|America/Mendoza',
      'America/Argentina/Buenos_Aires|America/Rosario',
      'America/Atikokan|America/Cayman',
      'America/Atikokan|America/Coral_Harbour',
      'America/Atikokan|America/Jamaica',
      'America/Atikokan|America/Panama',
      'America/Atikokan|EST',
      'America/Atikokan|Jamaica',
      'America/Belem|America/Fortaleza',
      'America/Belem|America/Maceio',
      'America/Belem|America/Recife',
      'America/Belem|America/Santarem',
      'America/Belize|America/Costa_Rica',
      'America/Belize|America/El_Salvador',
      'America/Belize|America/Guatemala',
      'America/Belize|America/Managua',
      'America/Belize|America/Regina',
      'America/Belize|America/Swift_Current',
      'America/Belize|America/Tegucigalpa',
      'America/Belize|Canada/East-Saskatchewan',
      'America/Belize|Canada/Saskatchewan',
      'America/Boa_Vista|America/Manaus',
      'America/Boa_Vista|America/Porto_Velho',
      'America/Boa_Vista|Brazil/West',
      'America/Boise|America/Cambridge_Bay',
      'America/Boise|America/Denver',
      'America/Boise|America/Edmonton',
      'America/Boise|America/Inuvik',
      'America/Boise|America/Ojinaga',
      'America/Boise|America/Shiprock',
      'America/Boise|America/Yellowknife',
      'America/Boise|Canada/Mountain',
      'America/Boise|MST7MDT',
      'America/Boise|Navajo',
      'America/Boise|US/Mountain',
      'America/Campo_Grande|America/Cuiaba',
      'America/Cancun|America/Merida',
      'America/Cancun|America/Mexico_City',
      'America/Cancun|America/Monterrey',
      'America/Cancun|Mexico/General',
      'America/Chicago|America/Indiana/Knox',
      'America/Chicago|America/Indiana/Tell_City',
      'America/Chicago|America/Knox_IN',
      'America/Chicago|America/Matamoros',
      'America/Chicago|America/Menominee',
      'America/Chicago|America/North_Dakota/Center',
      'America/Chicago|America/North_Dakota/New_Salem',
      'America/Chicago|America/Rainy_River',
      'America/Chicago|America/Rankin_Inlet',
      'America/Chicago|America/Resolute',
      'America/Chicago|America/Winnipeg',
      'America/Chicago|CST6CDT',
      'America/Chicago|Canada/Central',
      'America/Chicago|US/Central',
      'America/Chicago|US/Indiana-Starke',
      'America/Chihuahua|America/Mazatlan',
      'America/Chihuahua|Mexico/BajaSur',
      'America/Creston|America/Dawson_Creek',
      'America/Creston|America/Hermosillo',
      'America/Creston|America/Phoenix',
      'America/Creston|MST',
      'America/Creston|US/Arizona',
      'America/Dawson|America/Ensenada',
      'America/Dawson|America/Los_Angeles',
      'America/Dawson|America/Tijuana',
      'America/Dawson|America/Vancouver',
      'America/Dawson|America/Whitehorse',
      'America/Dawson|Canada/Pacific',
      'America/Dawson|Canada/Yukon',
      'America/Dawson|Mexico/BajaNorte',
      'America/Dawson|PST8PDT',
      'America/Dawson|US/Pacific',
      'America/Dawson|US/Pacific-New',
      'America/Detroit|America/Fort_Wayne',
      'America/Detroit|America/Indiana/Indianapolis',
      'America/Detroit|America/Indiana/Marengo',
      'America/Detroit|America/Indiana/Petersburg',
      'America/Detroit|America/Indiana/Vevay',
      'America/Detroit|America/Indiana/Vincennes',
      'America/Detroit|America/Indiana/Winamac',
      'America/Detroit|America/Indianapolis',
      'America/Detroit|America/Iqaluit',
      'America/Detroit|America/Kentucky/Louisville',
      'America/Detroit|America/Kentucky/Monticello',
      'America/Detroit|America/Louisville',
      'America/Detroit|America/Montreal',
      'America/Detroit|America/Nassau',
      'America/Detroit|America/New_York',
      'America/Detroit|America/Nipigon',
      'America/Detroit|America/Pangnirtung',
      'America/Detroit|America/Thunder_Bay',
      'America/Detroit|America/Toronto',
      'America/Detroit|Canada/Eastern',
      'America/Detroit|EST5EDT',
      'America/Detroit|US/East-Indiana',
      'America/Detroit|US/Eastern',
      'America/Detroit|US/Michigan',
      'America/Eirunepe|America/Porto_Acre',
      'America/Eirunepe|America/Rio_Branco',
      'America/Eirunepe|Brazil/Acre',
      'America/Glace_Bay|America/Halifax',
      'America/Glace_Bay|America/Moncton',
      'America/Glace_Bay|America/Thule',
      'America/Glace_Bay|Atlantic/Bermuda',
      'America/Glace_Bay|Canada/Atlantic',
      'America/Havana|Cuba',
      'America/Metlakatla|Pacific/Pitcairn',
      'America/Noronha|Brazil/DeNoronha',
      'America/Santiago|Antarctica/Palmer',
      'America/Santiago|Chile/Continental',
      'America/Sao_Paulo|Brazil/East',
      'America/St_Johns|Canada/Newfoundland',
      'Antarctica/McMurdo|Antarctica/South_Pole',
      'Antarctica/McMurdo|NZ',
      'Antarctica/McMurdo|Pacific/Auckland',
      'Asia/Aden|Asia/Baghdad',
      'Asia/Aden|Asia/Bahrain',
      'Asia/Aden|Asia/Kuwait',
      'Asia/Aden|Asia/Qatar',
      'Asia/Aden|Asia/Riyadh',
      'Asia/Aqtau|Asia/Aqtobe',
      'Asia/Ashgabat|Asia/Ashkhabad',
      'Asia/Bangkok|Asia/Ho_Chi_Minh',
      'Asia/Bangkok|Asia/Phnom_Penh',
      'Asia/Bangkok|Asia/Saigon',
      'Asia/Bangkok|Asia/Vientiane',
      'Asia/Calcutta|Asia/Colombo',
      'Asia/Calcutta|Asia/Kolkata',
      'Asia/Chongqing|Asia/Chungking',
      'Asia/Chongqing|Asia/Harbin',
      'Asia/Chongqing|Asia/Macao',
      'Asia/Chongqing|Asia/Macau',
      'Asia/Chongqing|Asia/Shanghai',
      'Asia/Chongqing|Asia/Taipei',
      'Asia/Chongqing|PRC',
      'Asia/Chongqing|ROC',
      'Asia/Dacca|Asia/Dhaka',
      'Asia/Dubai|Asia/Muscat',
      'Asia/Hong_Kong|Hongkong',
      'Asia/Istanbul|Europe/Istanbul',
      'Asia/Istanbul|Turkey',
      'Asia/Jakarta|Asia/Pontianak',
      'Asia/Jerusalem|Asia/Tel_Aviv',
      'Asia/Jerusalem|Israel',
      'Asia/Kashgar|Asia/Urumqi',
      'Asia/Kathmandu|Asia/Katmandu',
      'Asia/Kuala_Lumpur|Asia/Kuching',
      'Asia/Makassar|Asia/Ujung_Pandang',
      'Asia/Nicosia|EET',
      'Asia/Nicosia|Europe/Athens',
      'Asia/Nicosia|Europe/Bucharest',
      'Asia/Nicosia|Europe/Chisinau',
      'Asia/Nicosia|Europe/Helsinki',
      'Asia/Nicosia|Europe/Kiev',
      'Asia/Nicosia|Europe/Mariehamn',
      'Asia/Nicosia|Europe/Nicosia',
      'Asia/Nicosia|Europe/Riga',
      'Asia/Nicosia|Europe/Sofia',
      'Asia/Nicosia|Europe/Tallinn',
      'Asia/Nicosia|Europe/Tiraspol',
      'Asia/Nicosia|Europe/Uzhgorod',
      'Asia/Nicosia|Europe/Vilnius',
      'Asia/Nicosia|Europe/Zaporozhye',
      'Asia/Pyongyang|Asia/Seoul',
      'Asia/Pyongyang|ROK',
      'Asia/Samarkand|Asia/Tashkent',
      'Asia/Singapore|Singapore',
      'Asia/Tehran|Iran',
      'Asia/Thimbu|Asia/Thimphu',
      'Asia/Tokyo|Japan',
      'Asia/Ulaanbaatar|Asia/Ulan_Bator',
      'Atlantic/Canary|Atlantic/Faeroe',
      'Atlantic/Canary|Atlantic/Faroe',
      'Atlantic/Canary|Atlantic/Madeira',
      'Atlantic/Canary|Europe/Lisbon',
      'Atlantic/Canary|Portugal',
      'Atlantic/Canary|WET',
      'Australia/ACT|Australia/Canberra',
      'Australia/ACT|Australia/Currie',
      'Australia/ACT|Australia/Hobart',
      'Australia/ACT|Australia/Melbourne',
      'Australia/ACT|Australia/NSW',
      'Australia/ACT|Australia/Sydney',
      'Australia/ACT|Australia/Tasmania',
      'Australia/ACT|Australia/Victoria',
      'Australia/Adelaide|Australia/Broken_Hill',
      'Australia/Adelaide|Australia/South',
      'Australia/Adelaide|Australia/Yancowinna',
      'Australia/Brisbane|Australia/Lindeman',
      'Australia/Brisbane|Australia/Queensland',
      'Australia/Darwin|Australia/North',
      'Australia/LHI|Australia/Lord_Howe',
      'Australia/Perth|Australia/West',
      'Chile/EasterIsland|Pacific/Easter',
      'Eire|Europe/Dublin',
      'Etc/UCT|UCT',
      'Etc/UTC|Etc/Universal',
      'Etc/UTC|Etc/Zulu',
      'Etc/UTC|UTC',
      'Etc/UTC|Universal',
      'Etc/UTC|Zulu',
      'Europe/Belfast|Europe/Guernsey',
      'Europe/Belfast|Europe/Isle_of_Man',
      'Europe/Belfast|Europe/Jersey',
      'Europe/Belfast|Europe/London',
      'Europe/Belfast|GB',
      'Europe/Belfast|GB-Eire',
      'Europe/Moscow|W-SU',
      'HST|Pacific/Honolulu',
      'HST|Pacific/Johnston',
      'HST|US/Hawaii',
      'Kwajalein|Pacific/Kwajalein',
      'Kwajalein|Pacific/Majuro',
      'NZ-CHAT|Pacific/Chatham',
      'Pacific/Chuuk|Pacific/Truk',
      'Pacific/Chuuk|Pacific/Yap',
      'Pacific/Guam|Pacific/Saipan',
      'Pacific/Midway|Pacific/Pago_Pago',
      'Pacific/Midway|Pacific/Samoa',
      'Pacific/Midway|US/Samoa',
      'Pacific/Pohnpei|Pacific/Ponape'
    ]
  });
  return moment;
}));
(function (root, factory) {
  if (true) {
    oh_rickshaw = function (d3) {
      return root.Rickshaw = factory(d3);
    }(oh_d3);
  } else if (typeof exports === 'object') {
    module.exports = factory(oh_d3);
  } else {
    root.Rickshaw = factory(d3);
  }
}(this, function (d3) {
  /* jshint -W079 */
  var Rickshaw = {
    namespace: function (namespace, obj) {
      var parts = namespace.split('.');
      var parent = Rickshaw;
      for (var i = 1, length = parts.length; i < length; i++) {
        var currentPart = parts[i];
        parent[currentPart] = parent[currentPart] || {};
        parent = parent[currentPart];
      }
      return parent;
    },
    keys: function (obj) {
      var keys = [];
      for (var key in obj)
        keys.push(key);
      return keys;
    },
    extend: function (destination, source) {
      for (var property in source) {
        destination[property] = source[property];
      }
      return destination;
    },
    clone: function (obj) {
      return JSON.parse(JSON.stringify(obj));
    }
  };
  /* Adapted from https://github.com/Jakobo/PTClass */
  /*
  Copyright (c) 2005-2010 Sam Stephenson
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  */
  /* Based on Alex Arnell's inheritance implementation. */
  /** section: Language
   * class Class
   *
   *  Manages Prototype's class-based OOP system.
   *
   *  Refer to Prototype's web site for a [tutorial on classes and
   *  inheritance](http://prototypejs.org/learn/class-inheritance).
  **/
  (function (globalContext) {
    /* ------------------------------------ */
    /* Import from object.js                */
    /* ------------------------------------ */
    var _toString = Object.prototype.toString, NULL_TYPE = 'Null', UNDEFINED_TYPE = 'Undefined', BOOLEAN_TYPE = 'Boolean', NUMBER_TYPE = 'Number', STRING_TYPE = 'String', OBJECT_TYPE = 'Object', FUNCTION_CLASS = '[object Function]';
    function isFunction(object) {
      return _toString.call(object) === FUNCTION_CLASS;
    }
    function extend(destination, source) {
      for (var property in source)
        if (source.hasOwnProperty(property))
          // modify protect primitive slaughter
          destination[property] = source[property];
      return destination;
    }
    function keys(object) {
      if (Type(object) !== OBJECT_TYPE) {
        throw new TypeError();
      }
      var results = [];
      for (var property in object) {
        if (object.hasOwnProperty(property)) {
          results.push(property);
        }
      }
      return results;
    }
    function Type(o) {
      switch (o) {
      case null:
        return NULL_TYPE;
      case void 0:
        return UNDEFINED_TYPE;
      }
      var type = typeof o;
      switch (type) {
      case 'boolean':
        return BOOLEAN_TYPE;
      case 'number':
        return NUMBER_TYPE;
      case 'string':
        return STRING_TYPE;
      }
      return OBJECT_TYPE;
    }
    function isUndefined(object) {
      return typeof object === 'undefined';
    }
    /* ------------------------------------ */
    /* Import from Function.js              */
    /* ------------------------------------ */
    var slice = Array.prototype.slice;
    function argumentNames(fn) {
      var names = fn.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '').replace(/\s+/g, '').split(',');
      return names.length == 1 && !names[0] ? [] : names;
    }
    function wrap(fn, wrapper) {
      var __method = fn;
      return function () {
        var a = update([bind(__method, this)], arguments);
        return wrapper.apply(this, a);
      };
    }
    function update(array, args) {
      var arrayLength = array.length, length = args.length;
      while (length--)
        array[arrayLength + length] = args[length];
      return array;
    }
    function merge(array, args) {
      array = slice.call(array, 0);
      return update(array, args);
    }
    function bind(fn, context) {
      if (arguments.length < 2 && isUndefined(arguments[0]))
        return this;
      var __method = fn, args = slice.call(arguments, 2);
      return function () {
        var a = merge(args, arguments);
        return __method.apply(context, a);
      };
    }
    /* ------------------------------------ */
    /* Import from Prototype.js             */
    /* ------------------------------------ */
    var emptyFunction = function () {
    };
    var Class = function () {
      // Some versions of JScript fail to enumerate over properties, names of which 
      // correspond to non-enumerable properties in the prototype chain
      var IS_DONTENUM_BUGGY = function () {
        for (var p in { toString: 1 }) {
          // check actual property name, so that it works with augmented Object.prototype
          if (p === 'toString')
            return false;
        }
        return true;
      }();
      function subclass() {
      }
      function create() {
        var parent = null, properties = [].slice.apply(arguments);
        if (isFunction(properties[0]))
          parent = properties.shift();
        function klass() {
          this.initialize.apply(this, arguments);
        }
        extend(klass, Class.Methods);
        klass.superclass = parent;
        klass.subclasses = [];
        if (parent) {
          subclass.prototype = parent.prototype;
          klass.prototype = new subclass();
          try {
            parent.subclasses.push(klass);
          } catch (e) {
          }
        }
        for (var i = 0, length = properties.length; i < length; i++)
          klass.addMethods(properties[i]);
        if (!klass.prototype.initialize)
          klass.prototype.initialize = emptyFunction;
        klass.prototype.constructor = klass;
        return klass;
      }
      function addMethods(source) {
        var ancestor = this.superclass && this.superclass.prototype, properties = keys(source);
        // IE6 doesn't enumerate `toString` and `valueOf` (among other built-in `Object.prototype`) properties,
        // Force copy if they're not Object.prototype ones.
        // Do not copy other Object.prototype.* for performance reasons
        if (IS_DONTENUM_BUGGY) {
          if (source.toString != Object.prototype.toString)
            properties.push('toString');
          if (source.valueOf != Object.prototype.valueOf)
            properties.push('valueOf');
        }
        for (var i = 0, length = properties.length; i < length; i++) {
          var property = properties[i], value = source[property];
          if (ancestor && isFunction(value) && argumentNames(value)[0] == '$super') {
            var method = value;
            value = wrap(function (m) {
              return function () {
                return ancestor[m].apply(this, arguments);
              };
            }(property), method);
            value.valueOf = bind(method.valueOf, method);
            value.toString = bind(method.toString, method);
          }
          this.prototype[property] = value;
        }
        return this;
      }
      return {
        create: create,
        Methods: { addMethods: addMethods }
      };
    }();
    if (globalContext.exports) {
      globalContext.exports.Class = Class;
    } else {
      globalContext.Class = Class;
    }
  }(Rickshaw));
  Rickshaw.namespace('Rickshaw.Compat.ClassList');
  Rickshaw.Compat.ClassList = function () {
    /* adapted from http://purl.eligrey.com/github/classList.js/blob/master/classList.js */
    if (typeof document !== 'undefined' && !('classList' in document.createElement('a'))) {
      (function (view) {
        
        var classListProp = 'classList', protoProp = 'prototype', elemCtrProto = (view.HTMLElement || view.Element)[protoProp], objCtr = Object, strTrim = String[protoProp].trim || function () {
            return this.replace(/^\s+|\s+$/g, '');
          }, arrIndexOf = Array[protoProp].indexOf || function (item) {
            var i = 0, len = this.length;
            for (; i < len; i++) {
              if (i in this && this[i] === item) {
                return i;
              }
            }
            return -1;
          }  // Vendors: please allow content code to instantiate DOMExceptions
, DOMEx = function (type, message) {
            this.name = type;
            this.code = DOMException[type];
            this.message = message;
          }, checkTokenAndGetIndex = function (classList, token) {
            if (token === '') {
              throw new DOMEx('SYNTAX_ERR', 'An invalid or illegal string was specified');
            }
            if (/\s/.test(token)) {
              throw new DOMEx('INVALID_CHARACTER_ERR', 'String contains an invalid character');
            }
            return arrIndexOf.call(classList, token);
          }, ClassList = function (elem) {
            var trimmedClasses = strTrim.call(elem.className), classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [], i = 0, len = classes.length;
            for (; i < len; i++) {
              this.push(classes[i]);
            }
            this._updateClassName = function () {
              elem.className = this.toString();
            };
          }, classListProto = ClassList[protoProp] = [], classListGetter = function () {
            return new ClassList(this);
          };
        // Most DOMException implementations don't allow calling DOMException's toString()
        // on non-DOMExceptions. Error's toString() is sufficient here.
        DOMEx[protoProp] = Error[protoProp];
        classListProto.item = function (i) {
          return this[i] || null;
        };
        classListProto.contains = function (token) {
          token += '';
          return checkTokenAndGetIndex(this, token) !== -1;
        };
        classListProto.add = function (token) {
          token += '';
          if (checkTokenAndGetIndex(this, token) === -1) {
            this.push(token);
            this._updateClassName();
          }
        };
        classListProto.remove = function (token) {
          token += '';
          var index = checkTokenAndGetIndex(this, token);
          if (index !== -1) {
            this.splice(index, 1);
            this._updateClassName();
          }
        };
        classListProto.toggle = function (token) {
          token += '';
          if (checkTokenAndGetIndex(this, token) === -1) {
            this.add(token);
          } else {
            this.remove(token);
          }
        };
        classListProto.toString = function () {
          return this.join(' ');
        };
        if (objCtr.defineProperty) {
          var classListPropDesc = {
            get: classListGetter,
            enumerable: true,
            configurable: true
          };
          try {
            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
          } catch (ex) {
            // IE 8 doesn't support enumerable:true
            if (ex.number === -2146823252) {
              classListPropDesc.enumerable = false;
              objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
            }
          }
        } else if (objCtr[protoProp].__defineGetter__) {
          elemCtrProto.__defineGetter__(classListProp, classListGetter);
        }
      }(window));
    }
  };
  if (typeof RICKSHAW_NO_COMPAT !== 'undefined' && !RICKSHAW_NO_COMPAT || typeof RICKSHAW_NO_COMPAT === 'undefined') {
    new Rickshaw.Compat.ClassList();
  }
  Rickshaw.namespace('Rickshaw.Graph');
  Rickshaw.Graph = function (args) {
    var self = this;
    this.initialize = function (args) {
      if (!args.element)
        throw 'Rickshaw.Graph needs a reference to an element';
      if (args.element.nodeType !== 1)
        throw 'Rickshaw.Graph element was defined but not an HTML element';
      this.element = args.element;
      this.series = args.series;
      this.window = {};
      this.updateCallbacks = [];
      this.configureCallbacks = [];
      this.defaults = {
        interpolation: 'cardinal',
        offset: 'zero',
        min: undefined,
        max: undefined,
        preserve: false,
        xScale: undefined,
        yScale: undefined,
        stack: true
      };
      this._loadRenderers();
      this.configure(args);
      this.validateSeries(args.series);
      this.series.active = function () {
        return self.series.filter(function (s) {
          return !s.disabled;
        });
      };
      this.setSize({
        width: args.width,
        height: args.height
      });
      this.element.classList.add('rickshaw_graph');
      this.vis = d3.select(this.element).append('svg:svg').attr('width', this.width).attr('height', this.height);
      this.discoverRange();
    };
    this._loadRenderers = function () {
      for (var name in Rickshaw.Graph.Renderer) {
        if (!name || !Rickshaw.Graph.Renderer.hasOwnProperty(name))
          continue;
        var r = Rickshaw.Graph.Renderer[name];
        if (!r || !r.prototype || !r.prototype.render)
          continue;
        self.registerRenderer(new r({ graph: self }));
      }
    };
    this.validateSeries = function (series) {
      if (!Array.isArray(series) && !(series instanceof Rickshaw.Series)) {
        var seriesSignature = Object.prototype.toString.apply(series);
        throw 'series is not an array: ' + seriesSignature;
      }
      var pointsCount;
      series.forEach(function (s) {
        if (!(s instanceof Object)) {
          throw 'series element is not an object: ' + s;
        }
        if (!s.data) {
          throw 'series has no data: ' + JSON.stringify(s);
        }
        if (!Array.isArray(s.data)) {
          throw 'series data is not an array: ' + JSON.stringify(s.data);
        }
        if (s.data.length > 0) {
          var x = s.data[0].x;
          var y = s.data[0].y;
          if (typeof x != 'number' || typeof y != 'number' && y !== null) {
            throw 'x and y properties of points should be numbers instead of ' + typeof x + ' and ' + typeof y;
          }
        }
        if (s.data.length >= 3) {
          // probe to sanity check sort order
          if (s.data[2].x < s.data[1].x || s.data[1].x < s.data[0].x || s.data[s.data.length - 1].x < s.data[0].x) {
            throw 'series data needs to be sorted on x values for series name: ' + s.name;
          }
        }
      }, this);
    };
    this.dataDomain = function () {
      var data = this.series.map(function (s) {
        return s.data;
      });
      var min = d3.min(data.map(function (d) {
        return d[0].x;
      }));
      var max = d3.max(data.map(function (d) {
        return d[d.length - 1].x;
      }));
      return [
        min,
        max
      ];
    };
    this.discoverRange = function () {
      var domain = this.renderer.domain();
      // this.*Scale is coming from the configuration dictionary
      // which may be referenced by the Graph creator, or shared
      // with other Graphs. We need to ensure we copy the scale
      // so that our mutations do not change the object given to us.
      // Hence the .copy()
      this.x = (this.xScale || d3.scale.linear()).copy().domain(domain.x).range([
        0,
        this.width
      ]);
      this.y = (this.yScale || d3.scale.linear()).copy().domain(domain.y).range([
        this.height,
        0
      ]);
      this.x.magnitude = d3.scale.linear().domain([
        domain.x[0] - domain.x[0],
        domain.x[1] - domain.x[0]
      ]).range([
        0,
        this.width
      ]);
      this.y.magnitude = d3.scale.linear().domain([
        domain.y[0] - domain.y[0],
        domain.y[1] - domain.y[0]
      ]).range([
        0,
        this.height
      ]);
    };
    this.render = function () {
      var stackedData = this.stackData();
      this.discoverRange();
      this.renderer.render();
      this.updateCallbacks.forEach(function (callback) {
        callback();
      });
    };
    this.update = this.render;
    this.stackData = function () {
      var data = this.series.active().map(function (d) {
        return d.data;
      }).map(function (d) {
        return d.filter(function (d) {
          return this._slice(d);
        }, this);
      }, this);
      var preserve = this.preserve;
      if (!preserve) {
        this.series.forEach(function (series) {
          if (series.scale) {
            // data must be preserved when a scale is used
            preserve = true;
          }
        });
      }
      data = preserve ? Rickshaw.clone(data) : data;
      this.series.active().forEach(function (series, index) {
        if (series.scale) {
          // apply scale to each series
          var seriesData = data[index];
          if (seriesData) {
            seriesData.forEach(function (d) {
              d.y = series.scale(d.y);
            });
          }
        }
      });
      this.stackData.hooks.data.forEach(function (entry) {
        data = entry.f.apply(self, [data]);
      });
      var stackedData;
      if (!this.renderer.unstack) {
        this._validateStackable();
        var layout = d3.layout.stack();
        layout.offset(self.offset);
        stackedData = layout(data);
      }
      stackedData = stackedData || data;
      if (this.renderer.unstack) {
        stackedData.forEach(function (seriesData) {
          seriesData.forEach(function (d) {
            d.y0 = d.y0 === undefined ? 0 : d.y0;
          });
        });
      }
      this.stackData.hooks.after.forEach(function (entry) {
        stackedData = entry.f.apply(self, [data]);
      });
      var i = 0;
      this.series.forEach(function (series) {
        if (series.disabled)
          return;
        series.stack = stackedData[i++];
      });
      this.stackedData = stackedData;
      return stackedData;
    };
    this._validateStackable = function () {
      var series = this.series;
      var pointsCount;
      series.forEach(function (s) {
        pointsCount = pointsCount || s.data.length;
        if (pointsCount && s.data.length != pointsCount) {
          throw 'stacked series cannot have differing numbers of points: ' + pointsCount + ' vs ' + s.data.length + '; see Rickshaw.Series.fill()';
        }
      }, this);
    };
    this.stackData.hooks = {
      data: [],
      after: []
    };
    this._slice = function (d) {
      if (this.window.xMin || this.window.xMax) {
        var isInRange = true;
        if (this.window.xMin && d.x < this.window.xMin)
          isInRange = false;
        if (this.window.xMax && d.x > this.window.xMax)
          isInRange = false;
        return isInRange;
      }
      return true;
    };
    this.onUpdate = function (callback) {
      this.updateCallbacks.push(callback);
    };
    this.onConfigure = function (callback) {
      this.configureCallbacks.push(callback);
    };
    this.registerRenderer = function (renderer) {
      this._renderers = this._renderers || {};
      this._renderers[renderer.name] = renderer;
    };
    this.configure = function (args) {
      this.config = this.config || {};
      if (args.width || args.height) {
        this.setSize(args);
      }
      Rickshaw.keys(this.defaults).forEach(function (k) {
        this.config[k] = k in args ? args[k] : k in this ? this[k] : this.defaults[k];
      }, this);
      Rickshaw.keys(this.config).forEach(function (k) {
        this[k] = this.config[k];
      }, this);
      if ('stack' in args)
        args.unstack = !args.stack;
      var renderer = args.renderer || this.renderer && this.renderer.name || 'stack';
      this.setRenderer(renderer, args);
      this.configureCallbacks.forEach(function (callback) {
        callback(args);
      });
    };
    this.setRenderer = function (r, args) {
      if (typeof r == 'function') {
        this.renderer = new r({ graph: self });
        this.registerRenderer(this.renderer);
      } else {
        if (!this._renderers[r]) {
          throw 'couldn\'t find renderer ' + r;
        }
        this.renderer = this._renderers[r];
      }
      if (typeof args == 'object') {
        this.renderer.configure(args);
      }
    };
    this.setSize = function (args) {
      args = args || {};
      if (typeof window !== 'undefined') {
        var style = window.getComputedStyle(this.element, null);
        var elementWidth = parseInt(style.getPropertyValue('width'), 10);
        var elementHeight = parseInt(style.getPropertyValue('height'), 10);
      }
      this.width = args.width || elementWidth || 400;
      this.height = args.height || elementHeight || 250;
      this.vis && this.vis.attr('width', this.width).attr('height', this.height);
    };
    this.initialize(args);
  };
  Rickshaw.namespace('Rickshaw.Fixtures.Color');
  Rickshaw.Fixtures.Color = function () {
    this.schemes = {};
    this.schemes.spectrum14 = [
      '#ecb796',
      '#dc8f70',
      '#b2a470',
      '#92875a',
      '#716c49',
      '#d2ed82',
      '#bbe468',
      '#a1d05d',
      '#e7cbe6',
      '#d8aad6',
      '#a888c2',
      '#9dc2d3',
      '#649eb9',
      '#387aa3'
    ].reverse();
    this.schemes.spectrum2000 = [
      '#57306f',
      '#514c76',
      '#646583',
      '#738394',
      '#6b9c7d',
      '#84b665',
      '#a7ca50',
      '#bfe746',
      '#e2f528',
      '#fff726',
      '#ecdd00',
      '#d4b11d',
      '#de8800',
      '#de4800',
      '#c91515',
      '#9a0000',
      '#7b0429',
      '#580839',
      '#31082b'
    ];
    this.schemes.spectrum2001 = [
      '#2f243f',
      '#3c2c55',
      '#4a3768',
      '#565270',
      '#6b6b7c',
      '#72957f',
      '#86ad6e',
      '#a1bc5e',
      '#b8d954',
      '#d3e04e',
      '#ccad2a',
      '#cc8412',
      '#c1521d',
      '#ad3821',
      '#8a1010',
      '#681717',
      '#531e1e',
      '#3d1818',
      '#320a1b'
    ];
    this.schemes.classic9 = [
      '#423d4f',
      '#4a6860',
      '#848f39',
      '#a2b73c',
      '#ddcb53',
      '#c5a32f',
      '#7d5836',
      '#963b20',
      '#7c2626',
      '#491d37',
      '#2f254a'
    ].reverse();
    this.schemes.httpStatus = {
      503: '#ea5029',
      502: '#d23f14',
      500: '#bf3613',
      410: '#efacea',
      409: '#e291dc',
      403: '#f457e8',
      408: '#e121d2',
      401: '#b92dae',
      405: '#f47ceb',
      404: '#a82a9f',
      400: '#b263c6',
      301: '#6fa024',
      302: '#87c32b',
      307: '#a0d84c',
      304: '#28b55c',
      200: '#1a4f74',
      206: '#27839f',
      201: '#52adc9',
      202: '#7c979f',
      203: '#a5b8bd',
      204: '#c1cdd1'
    };
    this.schemes.colorwheel = [
      '#b5b6a9',
      '#858772',
      '#785f43',
      '#96557e',
      '#4682b4',
      '#65b9ac',
      '#73c03a',
      '#cb513a'
    ].reverse();
    this.schemes.cool = [
      '#5e9d2f',
      '#73c03a',
      '#4682b4',
      '#7bc3b8',
      '#a9884e',
      '#c1b266',
      '#a47493',
      '#c09fb5'
    ];
    this.schemes.munin = [
      '#00cc00',
      '#0066b3',
      '#ff8000',
      '#ffcc00',
      '#330099',
      '#990099',
      '#ccff00',
      '#ff0000',
      '#808080',
      '#008f00',
      '#00487d',
      '#b35a00',
      '#b38f00',
      '#6b006b',
      '#8fb300',
      '#b30000',
      '#bebebe',
      '#80ff80',
      '#80c9ff',
      '#ffc080',
      '#ffe680',
      '#aa80ff',
      '#ee00cc',
      '#ff8080',
      '#666600',
      '#ffbfff',
      '#00ffcc',
      '#cc6699',
      '#999900'
    ];
  };
  Rickshaw.namespace('Rickshaw.Fixtures.RandomData');
  Rickshaw.Fixtures.RandomData = function (timeInterval) {
    var addData;
    timeInterval = timeInterval || 1;
    var lastRandomValue = 200;
    var timeBase = Math.floor(new Date().getTime() / 1000);
    this.addData = function (data) {
      var randomValue = Math.random() * 100 + 15 + lastRandomValue;
      var index = data[0].length;
      var counter = 1;
      data.forEach(function (series) {
        var randomVariance = Math.random() * 20;
        var v = randomValue / 25 + counter++ + (Math.cos(index * counter * 11 / 960) + 2) * 15 + (Math.cos(index / 7) + 2) * 7 + (Math.cos(index / 17) + 2) * 1;
        series.push({
          x: index * timeInterval + timeBase,
          y: v + randomVariance
        });
      });
      lastRandomValue = randomValue * 0.85;
    };
    this.removeData = function (data) {
      data.forEach(function (series) {
        series.shift();
      });
      timeBase += timeInterval;
    };
  };
  Rickshaw.namespace('Rickshaw.Fixtures.Time');
  Rickshaw.Fixtures.Time = function () {
    var self = this;
    this.months = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec'
    ];
    this.units = [
      {
        name: 'decade',
        seconds: 86400 * 365.25 * 10,
        formatter: function (d) {
          return parseInt(d.getUTCFullYear() / 10, 10) * 10;
        }
      },
      {
        name: 'year',
        seconds: 86400 * 365.25,
        formatter: function (d) {
          return d.getUTCFullYear();
        }
      },
      {
        name: 'month',
        seconds: 86400 * 30.5,
        formatter: function (d) {
          return self.months[d.getUTCMonth()];
        }
      },
      {
        name: 'week',
        seconds: 86400 * 7,
        formatter: function (d) {
          return self.formatDate(d);
        }
      },
      {
        name: 'day',
        seconds: 86400,
        formatter: function (d) {
          return d.getUTCDate();
        }
      },
      {
        name: '6 hour',
        seconds: 3600 * 6,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: 'hour',
        seconds: 3600,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: '15 minute',
        seconds: 60 * 15,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: 'minute',
        seconds: 60,
        formatter: function (d) {
          return d.getUTCMinutes();
        }
      },
      {
        name: '15 second',
        seconds: 15,
        formatter: function (d) {
          return d.getUTCSeconds() + 's';
        }
      },
      {
        name: 'second',
        seconds: 1,
        formatter: function (d) {
          return d.getUTCSeconds() + 's';
        }
      },
      {
        name: 'decisecond',
        seconds: 1 / 10,
        formatter: function (d) {
          return d.getUTCMilliseconds() + 'ms';
        }
      },
      {
        name: 'centisecond',
        seconds: 1 / 100,
        formatter: function (d) {
          return d.getUTCMilliseconds() + 'ms';
        }
      }
    ];
    this.unit = function (unitName) {
      return this.units.filter(function (unit) {
        return unitName == unit.name;
      }).shift();
    };
    this.formatDate = function (d) {
      return d3.time.format('%b %e')(d);
    };
    this.formatTime = function (d) {
      return d.toUTCString().match(/(\d+:\d+):/)[1];
    };
    this.ceil = function (time, unit) {
      var date, floor, year;
      if (unit.name == 'month') {
        date = new Date(time * 1000);
        floor = Date.UTC(date.getUTCFullYear(), date.getUTCMonth()) / 1000;
        if (floor == time)
          return time;
        year = date.getUTCFullYear();
        var month = date.getUTCMonth();
        if (month == 11) {
          month = 0;
          year = year + 1;
        } else {
          month += 1;
        }
        return Date.UTC(year, month) / 1000;
      }
      if (unit.name == 'year') {
        date = new Date(time * 1000);
        floor = Date.UTC(date.getUTCFullYear(), 0) / 1000;
        if (floor == time)
          return time;
        year = date.getUTCFullYear() + 1;
        return Date.UTC(year, 0) / 1000;
      }
      return Math.ceil(time / unit.seconds) * unit.seconds;
    };
  };
  Rickshaw.namespace('Rickshaw.Fixtures.Time.Local');
  Rickshaw.Fixtures.Time.Local = function () {
    var self = this;
    this.months = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec'
    ];
    this.units = [
      {
        name: 'decade',
        seconds: 86400 * 365.25 * 10,
        formatter: function (d) {
          return parseInt(d.getFullYear() / 10, 10) * 10;
        }
      },
      {
        name: 'year',
        seconds: 86400 * 365.25,
        formatter: function (d) {
          return d.getFullYear();
        }
      },
      {
        name: 'month',
        seconds: 86400 * 30.5,
        formatter: function (d) {
          return self.months[d.getMonth()];
        }
      },
      {
        name: 'week',
        seconds: 86400 * 7,
        formatter: function (d) {
          return self.formatDate(d);
        }
      },
      {
        name: 'day',
        seconds: 86400,
        formatter: function (d) {
          return d.getDate();
        }
      },
      {
        name: '6 hour',
        seconds: 3600 * 6,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: 'hour',
        seconds: 3600,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: '15 minute',
        seconds: 60 * 15,
        formatter: function (d) {
          return self.formatTime(d);
        }
      },
      {
        name: 'minute',
        seconds: 60,
        formatter: function (d) {
          return d.getMinutes();
        }
      },
      {
        name: '15 second',
        seconds: 15,
        formatter: function (d) {
          return d.getSeconds() + 's';
        }
      },
      {
        name: 'second',
        seconds: 1,
        formatter: function (d) {
          return d.getSeconds() + 's';
        }
      },
      {
        name: 'decisecond',
        seconds: 1 / 10,
        formatter: function (d) {
          return d.getMilliseconds() + 'ms';
        }
      },
      {
        name: 'centisecond',
        seconds: 1 / 100,
        formatter: function (d) {
          return d.getMilliseconds() + 'ms';
        }
      }
    ];
    this.unit = function (unitName) {
      return this.units.filter(function (unit) {
        return unitName == unit.name;
      }).shift();
    };
    this.formatDate = function (d) {
      return d3.time.format('%b %e')(d);
    };
    this.formatTime = function (d) {
      return d.toString().match(/(\d+:\d+):/)[1];
    };
    this.ceil = function (time, unit) {
      var date, floor, year;
      if (unit.name == 'day') {
        var nearFuture = new Date((time + unit.seconds - 1) * 1000);
        var rounded = new Date(0);
        rounded.setMilliseconds(0);
        rounded.setSeconds(0);
        rounded.setMinutes(0);
        rounded.setHours(0);
        rounded.setDate(nearFuture.getDate());
        rounded.setMonth(nearFuture.getMonth());
        rounded.setFullYear(nearFuture.getFullYear());
        return rounded.getTime() / 1000;
      }
      if (unit.name == 'month') {
        date = new Date(time * 1000);
        floor = new Date(date.getFullYear(), date.getMonth()).getTime() / 1000;
        if (floor == time)
          return time;
        year = date.getFullYear();
        var month = date.getMonth();
        if (month == 11) {
          month = 0;
          year = year + 1;
        } else {
          month += 1;
        }
        return new Date(year, month).getTime() / 1000;
      }
      if (unit.name == 'year') {
        date = new Date(time * 1000);
        floor = new Date(date.getUTCFullYear(), 0).getTime() / 1000;
        if (floor == time)
          return time;
        year = date.getFullYear() + 1;
        return new Date(year, 0).getTime() / 1000;
      }
      return Math.ceil(time / unit.seconds) * unit.seconds;
    };
  };
  Rickshaw.namespace('Rickshaw.Fixtures.Number');
  Rickshaw.Fixtures.Number.formatKMBT = function (y) {
    var abs_y = Math.abs(y);
    if (abs_y >= 1000000000000) {
      return y / 1000000000000 + 'T';
    } else if (abs_y >= 1000000000) {
      return y / 1000000000 + 'B';
    } else if (abs_y >= 1000000) {
      return y / 1000000 + 'M';
    } else if (abs_y >= 1000) {
      return y / 1000 + 'K';
    } else if (abs_y < 1 && y > 0) {
      return y.toFixed(2);
    } else if (abs_y === 0) {
      return '';
    } else {
      return y;
    }
  };
  Rickshaw.Fixtures.Number.formatBase1024KMGTP = function (y) {
    var abs_y = Math.abs(y);
    if (abs_y >= 1125899906842624) {
      return y / 1125899906842624 + 'P';
    } else if (abs_y >= 1099511627776) {
      return y / 1099511627776 + 'T';
    } else if (abs_y >= 1073741824) {
      return y / 1073741824 + 'G';
    } else if (abs_y >= 1048576) {
      return y / 1048576 + 'M';
    } else if (abs_y >= 1024) {
      return y / 1024 + 'K';
    } else if (abs_y < 1 && y > 0) {
      return y.toFixed(2);
    } else if (abs_y === 0) {
      return '';
    } else {
      return y;
    }
  };
  Rickshaw.namespace('Rickshaw.Color.Palette');
  Rickshaw.Color.Palette = function (args) {
    var color = new Rickshaw.Fixtures.Color();
    args = args || {};
    this.schemes = {};
    this.scheme = color.schemes[args.scheme] || args.scheme || color.schemes.colorwheel;
    this.runningIndex = 0;
    this.generatorIndex = 0;
    if (args.interpolatedStopCount) {
      var schemeCount = this.scheme.length - 1;
      var i, j, scheme = [];
      for (i = 0; i < schemeCount; i++) {
        scheme.push(this.scheme[i]);
        var generator = d3.interpolateHsl(this.scheme[i], this.scheme[i + 1]);
        for (j = 1; j < args.interpolatedStopCount; j++) {
          scheme.push(generator(1 / args.interpolatedStopCount * j));
        }
      }
      scheme.push(this.scheme[this.scheme.length - 1]);
      this.scheme = scheme;
    }
    this.rotateCount = this.scheme.length;
    this.color = function (key) {
      return this.scheme[key] || this.scheme[this.runningIndex++] || this.interpolateColor() || '#808080';
    };
    this.interpolateColor = function () {
      if (!Array.isArray(this.scheme))
        return;
      var color;
      if (this.generatorIndex == this.rotateCount * 2 - 1) {
        color = d3.interpolateHsl(this.scheme[this.generatorIndex], this.scheme[0])(0.5);
        this.generatorIndex = 0;
        this.rotateCount *= 2;
      } else {
        color = d3.interpolateHsl(this.scheme[this.generatorIndex], this.scheme[this.generatorIndex + 1])(0.5);
        this.generatorIndex++;
      }
      this.scheme.push(color);
      return color;
    };
  };
  Rickshaw.namespace('Rickshaw.Graph.Ajax');
  Rickshaw.Graph.Ajax = Rickshaw.Class.create({
    initialize: function (args) {
      this.dataURL = args.dataURL;
      this.onData = args.onData || function (d) {
        return d;
      };
      this.onComplete = args.onComplete || function () {
      };
      this.onError = args.onError || function () {
      };
      this.args = args;
      // pass through to Rickshaw.Graph
      this.request();
    },
    request: function () {
      jQuery.ajax({
        url: this.dataURL,
        dataType: 'json',
        success: this.success.bind(this),
        error: this.error.bind(this)
      });
    },
    error: function () {
      console.log('error loading dataURL: ' + this.dataURL);
      this.onError(this);
    },
    success: function (data, status) {
      data = this.onData(data);
      this.args.series = this._splice({
        data: data,
        series: this.args.series
      });
      this.graph = this.graph || new Rickshaw.Graph(this.args);
      this.graph.render();
      this.onComplete(this);
    },
    _splice: function (args) {
      var data = args.data;
      var series = args.series;
      if (!args.series)
        return data;
      series.forEach(function (s) {
        var seriesKey = s.key || s.name;
        if (!seriesKey)
          throw 'series needs a key or a name';
        data.forEach(function (d) {
          var dataKey = d.key || d.name;
          if (!dataKey)
            throw 'data needs a key or a name';
          if (seriesKey == dataKey) {
            var properties = [
              'color',
              'name',
              'data'
            ];
            properties.forEach(function (p) {
              if (d[p])
                s[p] = d[p];
            });
          }
        });
      });
      return series;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Annotate');
  Rickshaw.Graph.Annotate = function (args) {
    var graph = this.graph = args.graph;
    this.elements = { timeline: args.element };
    var self = this;
    this.data = {};
    this.elements.timeline.classList.add('rickshaw_annotation_timeline');
    this.add = function (time, content, end_time) {
      self.data[time] = self.data[time] || { 'boxes': [] };
      self.data[time].boxes.push({
        content: content,
        end: end_time
      });
    };
    this.update = function () {
      Rickshaw.keys(self.data).forEach(function (time) {
        var annotation = self.data[time];
        var left = self.graph.x(time);
        if (left < 0 || left > self.graph.x.range()[1]) {
          if (annotation.element) {
            annotation.line.classList.add('offscreen');
            annotation.element.style.display = 'none';
          }
          annotation.boxes.forEach(function (box) {
            if (box.rangeElement)
              box.rangeElement.classList.add('offscreen');
          });
          return;
        }
        if (!annotation.element) {
          var element = annotation.element = document.createElement('div');
          element.classList.add('annotation');
          this.elements.timeline.appendChild(element);
          element.addEventListener('click', function (e) {
            element.classList.toggle('active');
            annotation.line.classList.toggle('active');
            annotation.boxes.forEach(function (box) {
              if (box.rangeElement)
                box.rangeElement.classList.toggle('active');
            });
          }, false);
        }
        annotation.element.style.left = left + 'px';
        annotation.element.style.display = 'block';
        annotation.boxes.forEach(function (box) {
          var element = box.element;
          if (!element) {
            element = box.element = document.createElement('div');
            element.classList.add('content');
            element.innerHTML = box.content;
            annotation.element.appendChild(element);
            annotation.line = document.createElement('div');
            annotation.line.classList.add('annotation_line');
            self.graph.element.appendChild(annotation.line);
            if (box.end) {
              box.rangeElement = document.createElement('div');
              box.rangeElement.classList.add('annotation_range');
              self.graph.element.appendChild(box.rangeElement);
            }
          }
          if (box.end) {
            var annotationRangeStart = left;
            var annotationRangeEnd = Math.min(self.graph.x(box.end), self.graph.x.range()[1]);
            // annotation makes more sense at end
            if (annotationRangeStart > annotationRangeEnd) {
              annotationRangeEnd = left;
              annotationRangeStart = Math.max(self.graph.x(box.end), self.graph.x.range()[0]);
            }
            var annotationRangeWidth = annotationRangeEnd - annotationRangeStart;
            box.rangeElement.style.left = annotationRangeStart + 'px';
            box.rangeElement.style.width = annotationRangeWidth + 'px';
            box.rangeElement.classList.remove('offscreen');
          }
          annotation.line.classList.remove('offscreen');
          annotation.line.style.left = left + 'px';
        });
      }, this);
    };
    this.graph.onUpdate(function () {
      self.update();
    });
  };
  Rickshaw.namespace('Rickshaw.Graph.Axis.Time');
  Rickshaw.Graph.Axis.Time = function (args) {
    var self = this;
    this.graph = args.graph;
    this.elements = [];
    this.ticksTreatment = args.ticksTreatment || 'plain';
    this.fixedTimeUnit = args.timeUnit;
    var time = args.timeFixture || new Rickshaw.Fixtures.Time();
    this.appropriateTimeUnit = function () {
      var unit;
      var units = time.units;
      var domain = this.graph.x.domain();
      var rangeSeconds = domain[1] - domain[0];
      units.forEach(function (u) {
        if (Math.floor(rangeSeconds / u.seconds) >= 2) {
          unit = unit || u;
        }
      });
      return unit || time.units[time.units.length - 1];
    };
    this.tickOffsets = function () {
      var domain = this.graph.x.domain();
      var unit = this.fixedTimeUnit || this.appropriateTimeUnit();
      var count = Math.ceil((domain[1] - domain[0]) / unit.seconds);
      var runningTick = domain[0];
      var offsets = [];
      for (var i = 0; i < count; i++) {
        var tickValue = time.ceil(runningTick, unit);
        runningTick = tickValue + unit.seconds / 2;
        offsets.push({
          value: tickValue,
          unit: unit
        });
      }
      return offsets;
    };
    this.render = function () {
      this.elements.forEach(function (e) {
        e.parentNode.removeChild(e);
      });
      this.elements = [];
      var offsets = this.tickOffsets();
      offsets.forEach(function (o) {
        if (self.graph.x(o.value) > self.graph.x.range()[1])
          return;
        var element = document.createElement('div');
        element.style.left = self.graph.x(o.value) + 'px';
        element.classList.add('x_tick');
        element.classList.add(self.ticksTreatment);
        var title = document.createElement('div');
        title.classList.add('title');
        title.innerHTML = o.unit.formatter(new Date(o.value * 1000));
        element.appendChild(title);
        self.graph.element.appendChild(element);
        self.elements.push(element);
      });
    };
    this.graph.onUpdate(function () {
      self.render();
    });
  };
  Rickshaw.namespace('Rickshaw.Graph.Axis.X');
  Rickshaw.Graph.Axis.X = function (args) {
    var self = this;
    var berthRate = 0.1;
    this.initialize = function (args) {
      this.graph = args.graph;
      this.orientation = args.orientation || 'top';
      this.pixelsPerTick = args.pixelsPerTick || 75;
      if (args.ticks)
        this.staticTicks = args.ticks;
      if (args.tickValues)
        this.tickValues = args.tickValues;
      this.tickSize = args.tickSize || 4;
      this.ticksTreatment = args.ticksTreatment || 'plain';
      if (args.element) {
        this.element = args.element;
        this._discoverSize(args.element, args);
        this.vis = d3.select(args.element).append('svg:svg').attr('height', this.height).attr('width', this.width).attr('class', 'rickshaw_graph x_axis_d3');
        this.element = this.vis[0][0];
        this.element.style.position = 'relative';
        this.setSize({
          width: args.width,
          height: args.height
        });
      } else {
        this.vis = this.graph.vis;
      }
      this.graph.onUpdate(function () {
        self.render();
      });
    };
    this.setSize = function (args) {
      args = args || {};
      if (!this.element)
        return;
      this._discoverSize(this.element.parentNode, args);
      this.vis.attr('height', this.height).attr('width', this.width * (1 + berthRate));
      var berth = Math.floor(this.width * berthRate / 2);
      this.element.style.left = -1 * berth + 'px';
    };
    this.render = function () {
      if (this._renderWidth !== undefined && this.graph.width !== this._renderWidth)
        this.setSize({ auto: true });
      var axis = d3.svg.axis().scale(this.graph.x).orient(this.orientation);
      axis.tickFormat(args.tickFormat || function (x) {
        return x;
      });
      if (this.tickValues)
        axis.tickValues(this.tickValues);
      this.ticks = this.staticTicks || Math.floor(this.graph.width / this.pixelsPerTick);
      var berth = Math.floor(this.width * berthRate / 2) || 0;
      var transform;
      if (this.orientation == 'top') {
        var yOffset = this.height || this.graph.height;
        transform = 'translate(' + berth + ',' + yOffset + ')';
      } else {
        transform = 'translate(' + berth + ', 0)';
      }
      if (this.element) {
        this.vis.selectAll('*').remove();
      }
      this.vis.append('svg:g').attr('class', [
        'x_ticks_d3',
        this.ticksTreatment
      ].join(' ')).attr('transform', transform).call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(this.tickSize));
      var gridSize = (this.orientation == 'bottom' ? 1 : -1) * this.graph.height;
      this.graph.vis.append('svg:g').attr('class', 'x_grid_d3').call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(gridSize)).selectAll('text').each(function () {
        this.parentNode.setAttribute('data-x-value', this.textContent);
      });
      this._renderHeight = this.graph.height;
    };
    this._discoverSize = function (element, args) {
      if (typeof window !== 'undefined') {
        var style = window.getComputedStyle(element, null);
        var elementHeight = parseInt(style.getPropertyValue('height'), 10);
        if (!args.auto) {
          var elementWidth = parseInt(style.getPropertyValue('width'), 10);
        }
      }
      this.width = (args.width || elementWidth || this.graph.width) * (1 + berthRate);
      this.height = args.height || elementHeight || 40;
    };
    this.initialize(args);
  };
  Rickshaw.namespace('Rickshaw.Graph.Axis.Y');
  Rickshaw.Graph.Axis.Y = Rickshaw.Class.create({
    initialize: function (args) {
      this.graph = args.graph;
      this.orientation = args.orientation || 'right';
      this.pixelsPerTick = args.pixelsPerTick || 75;
      if (args.ticks)
        this.staticTicks = args.ticks;
      if (args.tickValues)
        this.tickValues = args.tickValues;
      this.tickSize = args.tickSize || 4;
      this.ticksTreatment = args.ticksTreatment || 'plain';
      this.tickFormat = args.tickFormat || function (y) {
        return y;
      };
      this.berthRate = 0.1;
      if (args.element) {
        this.element = args.element;
        this.vis = d3.select(args.element).append('svg:svg').attr('class', 'rickshaw_graph y_axis');
        this.element = this.vis[0][0];
        this.element.style.position = 'relative';
        this.setSize({
          width: args.width,
          height: args.height
        });
      } else {
        this.vis = this.graph.vis;
      }
      var self = this;
      this.graph.onUpdate(function () {
        self.render();
      });
    },
    setSize: function (args) {
      args = args || {};
      if (!this.element)
        return;
      if (typeof window !== 'undefined') {
        var style = window.getComputedStyle(this.element.parentNode, null);
        var elementWidth = parseInt(style.getPropertyValue('width'), 10);
        if (!args.auto) {
          var elementHeight = parseInt(style.getPropertyValue('height'), 10);
        }
      }
      this.width = args.width || elementWidth || this.graph.width * this.berthRate;
      this.height = args.height || elementHeight || this.graph.height;
      this.vis.attr('width', this.width).attr('height', this.height * (1 + this.berthRate));
      var berth = this.height * this.berthRate;
      if (this.orientation == 'left') {
        this.element.style.top = -1 * berth + 'px';
      }
    },
    render: function () {
      if (this._renderHeight !== undefined && this.graph.height !== this._renderHeight)
        this.setSize({ auto: true });
      this.ticks = this.staticTicks || Math.floor(this.graph.height / this.pixelsPerTick);
      var axis = this._drawAxis(this.graph.y);
      this._drawGrid(axis);
      this._renderHeight = this.graph.height;
    },
    _drawAxis: function (scale) {
      var axis = d3.svg.axis().scale(scale).orient(this.orientation);
      axis.tickFormat(this.tickFormat);
      if (this.tickValues)
        axis.tickValues(this.tickValues);
      if (this.orientation == 'left') {
        var berth = this.height * this.berthRate;
        var transform = 'translate(' + this.width + ', ' + berth + ')';
      }
      if (this.element) {
        this.vis.selectAll('*').remove();
      }
      this.vis.append('svg:g').attr('class', [
        'y_ticks',
        this.ticksTreatment
      ].join(' ')).attr('transform', transform).call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(this.tickSize));
      return axis;
    },
    _drawGrid: function (axis) {
      var gridSize = (this.orientation == 'right' ? 1 : -1) * this.graph.width;
      this.graph.vis.append('svg:g').attr('class', 'y_grid').call(axis.ticks(this.ticks).tickSubdivide(0).tickSize(gridSize)).selectAll('text').each(function () {
        this.parentNode.setAttribute('data-y-value', this.textContent);
      });
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Axis.Y.Scaled');
  Rickshaw.Graph.Axis.Y.Scaled = Rickshaw.Class.create(Rickshaw.Graph.Axis.Y, {
    initialize: function ($super, args) {
      if (typeof args.scale === 'undefined') {
        throw new Error('Scaled requires scale');
      }
      this.scale = args.scale;
      if (typeof args.grid === 'undefined') {
        this.grid = true;
      } else {
        this.grid = args.grid;
      }
      $super(args);
    },
    _drawAxis: function ($super, scale) {
      // Adjust scale's domain to compensate for adjustments to the
      // renderer's domain (e.g. padding).
      var domain = this.scale.domain();
      var renderDomain = this.graph.renderer.domain().y;
      var extents = [
        Math.min.apply(Math, domain),
        Math.max.apply(Math, domain)
      ];
      // A mapping from the ideal render domain [0, 1] to the extent
      // of the original scale's domain.  This is used to calculate
      // the extents of the adjusted domain.
      var extentMap = d3.scale.linear().domain([
        0,
        1
      ]).range(extents);
      var adjExtents = [
        extentMap(renderDomain[0]),
        extentMap(renderDomain[1])
      ];
      // A mapping from the original domain to the adjusted domain.
      var adjustment = d3.scale.linear().domain(extents).range(adjExtents);
      // Make a copy of the custom scale, apply the adjusted domain, and
      // copy the range to match the graph's scale.
      var adjustedScale = this.scale.copy().domain(domain.map(adjustment)).range(scale.range());
      return $super(adjustedScale);
    },
    _drawGrid: function ($super, axis) {
      if (this.grid) {
        // only draw the axis if the grid option is true
        $super(axis);
      }
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Highlight');
  Rickshaw.Graph.Behavior.Series.Highlight = function (args) {
    this.graph = args.graph;
    this.legend = args.legend;
    var self = this;
    var colorSafe = {};
    var activeLine = null;
    var disabledColor = args.disabledColor || function (seriesColor) {
      return d3.interpolateRgb(seriesColor, d3.rgb('#d8d8d8'))(0.8).toString();
    };
    this.addHighlightEvents = function (l) {
      l.element.addEventListener('mouseover', function (e) {
        if (activeLine)
          return;
        else
          activeLine = l;
        self.legend.lines.forEach(function (line) {
          if (l === line) {
            // if we're not in a stacked renderer bring active line to the top
            if (self.graph.renderer.unstack && (line.series.renderer ? line.series.renderer.unstack : true)) {
              var seriesIndex = self.graph.series.indexOf(line.series);
              line.originalIndex = seriesIndex;
              var series = self.graph.series.splice(seriesIndex, 1)[0];
              self.graph.series.push(series);
            }
            return;
          }
          colorSafe[line.series.name] = colorSafe[line.series.name] || line.series.color;
          line.series.color = disabledColor(line.series.color);
        });
        self.graph.update();
      }, false);
      l.element.addEventListener('mouseout', function (e) {
        if (!activeLine)
          return;
        else
          activeLine = null;
        self.legend.lines.forEach(function (line) {
          // return reordered series to its original place
          if (l === line && line.hasOwnProperty('originalIndex')) {
            var series = self.graph.series.pop();
            self.graph.series.splice(line.originalIndex, 0, series);
            delete line.originalIndex;
          }
          if (colorSafe[line.series.name]) {
            line.series.color = colorSafe[line.series.name];
          }
        });
        self.graph.update();
      }, false);
    };
    if (this.legend) {
      this.legend.lines.forEach(function (l) {
        self.addHighlightEvents(l);
      });
    }
  };
  Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Order');
  Rickshaw.Graph.Behavior.Series.Order = function (args) {
    this.graph = args.graph;
    this.legend = args.legend;
    var self = this;
    if (typeof window.jQuery == 'undefined') {
      throw 'couldn\'t find jQuery at window.jQuery';
    }
    if (typeof window.jQuery.ui == 'undefined') {
      throw 'couldn\'t find jQuery UI at window.jQuery.ui';
    }
    jQuery(function () {
      jQuery(self.legend.list).sortable({
        containment: 'parent',
        tolerance: 'pointer',
        update: function (event, ui) {
          var series = [];
          jQuery(self.legend.list).find('li').each(function (index, item) {
            if (!item.series)
              return;
            series.push(item.series);
          });
          for (var i = self.graph.series.length - 1; i >= 0; i--) {
            self.graph.series[i] = series.shift();
          }
          self.graph.update();
        }
      });
      jQuery(self.legend.list).disableSelection();
    });
    //hack to make jquery-ui sortable behave
    this.graph.onUpdate(function () {
      var h = window.getComputedStyle(self.legend.element).height;
      self.legend.element.style.height = h;
    });
  };
  Rickshaw.namespace('Rickshaw.Graph.Behavior.Series.Toggle');
  Rickshaw.Graph.Behavior.Series.Toggle = function (args) {
    this.graph = args.graph;
    this.legend = args.legend;
    var self = this;
    this.addAnchor = function (line) {
      var anchor = document.createElement('a');
      anchor.innerHTML = '&#10004;';
      anchor.classList.add('action');
      line.element.insertBefore(anchor, line.element.firstChild);
      anchor.onclick = function (e) {
        if (line.series.disabled) {
          line.series.enable();
          line.element.classList.remove('disabled');
        } else {
          if (this.graph.series.filter(function (s) {
              return !s.disabled;
            }).length <= 1)
            return;
          line.series.disable();
          line.element.classList.add('disabled');
        }
        self.graph.update();
      }.bind(this);
      var label = line.element.getElementsByTagName('span')[0];
      label.onclick = function (e) {
        var disableAllOtherLines = line.series.disabled;
        if (!disableAllOtherLines) {
          for (var i = 0; i < self.legend.lines.length; i++) {
            var l = self.legend.lines[i];
            if (line.series === l.series) {
            } else if (l.series.disabled) {
            } else {
              disableAllOtherLines = true;
              break;
            }
          }
        }
        // show all or none
        if (disableAllOtherLines) {
          // these must happen first or else we try ( and probably fail ) to make a no line graph
          line.series.enable();
          line.element.classList.remove('disabled');
          self.legend.lines.forEach(function (l) {
            if (line.series === l.series) {
            } else {
              l.series.disable();
              l.element.classList.add('disabled');
            }
          });
        } else {
          self.legend.lines.forEach(function (l) {
            l.series.enable();
            l.element.classList.remove('disabled');
          });
        }
        self.graph.update();
      };
    };
    if (this.legend) {
      var $ = jQuery;
      if (typeof $ != 'undefined' && $(this.legend.list).sortable) {
        $(this.legend.list).sortable({
          start: function (event, ui) {
            ui.item.bind('no.onclick', function (event) {
              event.preventDefault();
            });
          },
          stop: function (event, ui) {
            setTimeout(function () {
              ui.item.unbind('no.onclick');
            }, 250);
          }
        });
      }
      this.legend.lines.forEach(function (l) {
        self.addAnchor(l);
      });
    }
    this._addBehavior = function () {
      this.graph.series.forEach(function (s) {
        s.disable = function () {
          if (self.graph.series.length <= 1) {
            throw 'only one series left';
          }
          s.disabled = true;
        };
        s.enable = function () {
          s.disabled = false;
        };
      });
    };
    this._addBehavior();
    this.updateBehaviour = function () {
      this._addBehavior();
    };
  };
  Rickshaw.namespace('Rickshaw.Graph.HoverDetail');
  Rickshaw.Graph.HoverDetail = Rickshaw.Class.create({
    initialize: function (args) {
      var graph = this.graph = args.graph;
      this.xFormatter = args.xFormatter || function (x) {
        return new Date(x * 1000).toUTCString();
      };
      this.yFormatter = args.yFormatter || function (y) {
        return y === null ? y : y.toFixed(2);
      };
      var element = this.element = document.createElement('div');
      element.className = 'detail';
      this.visible = true;
      graph.element.appendChild(element);
      this.lastEvent = null;
      this._addListeners();
      this.onShow = args.onShow;
      this.onHide = args.onHide;
      this.onRender = args.onRender;
      this.formatter = args.formatter || this.formatter;
    },
    formatter: function (series, x, y, formattedX, formattedY, d) {
      return series.name + ':&nbsp;' + formattedY;
    },
    update: function (e) {
      e = e || this.lastEvent;
      if (!e)
        return;
      this.lastEvent = e;
      if (!e.target.nodeName.match(/^(path|svg|rect|circle)$/))
        return;
      var graph = this.graph;
      var eventX = e.offsetX || e.layerX;
      var eventY = e.offsetY || e.layerY;
      var j = 0;
      var points = [];
      var nearestPoint;
      this.graph.series.active().forEach(function (series) {
        var data = this.graph.stackedData[j++];
        if (!data.length)
          return;
        var domainX = graph.x.invert(eventX);
        var domainIndexScale = d3.scale.linear().domain([
          data[0].x,
          data.slice(-1)[0].x
        ]).range([
          0,
          data.length - 1
        ]);
        var approximateIndex = Math.round(domainIndexScale(domainX));
        if (approximateIndex == data.length - 1)
          approximateIndex--;
        var dataIndex = Math.min(approximateIndex || 0, data.length - 1);
        for (var i = approximateIndex; i < data.length - 1;) {
          if (!data[i] || !data[i + 1])
            break;
          if (data[i].x <= domainX && data[i + 1].x > domainX) {
            dataIndex = Math.abs(domainX - data[i].x) < Math.abs(domainX - data[i + 1].x) ? i : i + 1;
            break;
          }
          if (data[i + 1].x <= domainX) {
            i++;
          } else {
            i--;
          }
        }
        if (dataIndex < 0)
          dataIndex = 0;
        var value = data[dataIndex];
        var distance = Math.sqrt(Math.pow(Math.abs(graph.x(value.x) - eventX), 2) + Math.pow(Math.abs(graph.y(value.y + value.y0) - eventY), 2));
        var xFormatter = series.xFormatter || this.xFormatter;
        var yFormatter = series.yFormatter || this.yFormatter;
        var point = {
          formattedXValue: xFormatter(value.x),
          formattedYValue: yFormatter(series.scale ? series.scale.invert(value.y) : value.y),
          series: series,
          value: value,
          distance: distance,
          order: j,
          name: series.name
        };
        if (!nearestPoint || distance < nearestPoint.distance) {
          nearestPoint = point;
        }
        points.push(point);
      }, this);
      if (!nearestPoint)
        return;
      nearestPoint.active = true;
      var domainX = nearestPoint.value.x;
      var formattedXValue = nearestPoint.formattedXValue;
      this.element.innerHTML = '';
      this.element.style.left = graph.x(domainX) + 'px';
      this.visible && this.render({
        points: points,
        detail: points,
        // for backwards compatibility
        mouseX: eventX,
        mouseY: eventY,
        formattedXValue: formattedXValue,
        domainX: domainX
      });
    },
    hide: function () {
      this.visible = false;
      this.element.classList.add('inactive');
      if (typeof this.onHide == 'function') {
        this.onHide();
      }
    },
    show: function () {
      this.visible = true;
      this.element.classList.remove('inactive');
      if (typeof this.onShow == 'function') {
        this.onShow();
      }
    },
    render: function (args) {
      var graph = this.graph;
      var points = args.points;
      var point = points.filter(function (p) {
        return p.active;
      }).shift();
      if (point.value.y === null)
        return;
      var formattedXValue = point.formattedXValue;
      var formattedYValue = point.formattedYValue;
      this.element.innerHTML = '';
      this.element.style.left = graph.x(point.value.x) + 'px';
      var xLabel = document.createElement('div');
      xLabel.className = 'x_label';
      xLabel.innerHTML = formattedXValue;
      this.element.appendChild(xLabel);
      var item = document.createElement('div');
      item.className = 'item';
      // invert the scale if this series displays using a scale
      var series = point.series;
      var actualY = series.scale ? series.scale.invert(point.value.y) : point.value.y;
      item.innerHTML = this.formatter(series, point.value.x, actualY, formattedXValue, formattedYValue, point);
      item.style.top = this.graph.y(point.value.y0 + point.value.y) + 'px';
      this.element.appendChild(item);
      var dot = document.createElement('div');
      dot.className = 'dot';
      dot.style.top = item.style.top;
      dot.style.borderColor = series.color;
      this.element.appendChild(dot);
      if (point.active) {
        item.classList.add('active');
        dot.classList.add('active');
      }
      // Assume left alignment until the element has been displayed and
      // bounding box calculations are possible.
      var alignables = [
        xLabel,
        item
      ];
      alignables.forEach(function (el) {
        el.classList.add('left');
      });
      this.show();
      // If left-alignment results in any error, try right-alignment.
      var leftAlignError = this._calcLayoutError(alignables);
      if (leftAlignError > 0) {
        alignables.forEach(function (el) {
          el.classList.remove('left');
          el.classList.add('right');
        });
        // If right-alignment is worse than left alignment, switch back.
        var rightAlignError = this._calcLayoutError(alignables);
        if (rightAlignError > leftAlignError) {
          alignables.forEach(function (el) {
            el.classList.remove('right');
            el.classList.add('left');
          });
        }
      }
      if (typeof this.onRender == 'function') {
        this.onRender(args);
      }
    },
    _calcLayoutError: function (alignables) {
      // Layout error is calculated as the number of linear pixels by which
      // an alignable extends past the left or right edge of the parent.
      var parentRect = this.element.parentNode.getBoundingClientRect();
      var error = 0;
      var alignRight = alignables.forEach(function (el) {
        var rect = el.getBoundingClientRect();
        if (!rect.width) {
          return;
        }
        if (rect.right > parentRect.right) {
          error += rect.right - parentRect.right;
        }
        if (rect.left < parentRect.left) {
          error += parentRect.left - rect.left;
        }
      });
      return error;
    },
    _addListeners: function () {
      this.graph.element.addEventListener('mousemove', function (e) {
        this.visible = true;
        this.update(e);
      }.bind(this), false);
      this.graph.onUpdate(function () {
        this.update();
      }.bind(this));
      this.graph.element.addEventListener('mouseout', function (e) {
        if (e.relatedTarget && !(e.relatedTarget.compareDocumentPosition(this.graph.element) & Node.DOCUMENT_POSITION_CONTAINS)) {
          this.hide();
        }
      }.bind(this), false);
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.JSONP');
  Rickshaw.Graph.JSONP = Rickshaw.Class.create(Rickshaw.Graph.Ajax, {
    request: function () {
      jQuery.ajax({
        url: this.dataURL,
        dataType: 'jsonp',
        success: this.success.bind(this),
        error: this.error.bind(this)
      });
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Legend');
  Rickshaw.Graph.Legend = Rickshaw.Class.create({
    className: 'rickshaw_legend',
    initialize: function (args) {
      this.element = args.element;
      this.graph = args.graph;
      this.naturalOrder = args.naturalOrder;
      this.element.classList.add(this.className);
      this.list = document.createElement('ul');
      this.element.appendChild(this.list);
      this.render();
      // we could bind this.render.bind(this) here
      // but triggering the re-render would lose the added
      // behavior of the series toggle
      this.graph.onUpdate(function () {
      });
    },
    render: function () {
      var self = this;
      while (this.list.firstChild) {
        this.list.removeChild(this.list.firstChild);
      }
      this.lines = [];
      var series = this.graph.series.map(function (s) {
        return s;
      });
      if (!this.naturalOrder) {
        series = series.reverse();
      }
      series.forEach(function (s) {
        self.addLine(s);
      });
    },
    addLine: function (series) {
      var line = document.createElement('li');
      line.className = 'line';
      if (series.disabled) {
        line.className += ' disabled';
      }
      if (series.className) {
        d3.select(line).classed(series.className, true);
      }
      var swatch = document.createElement('div');
      swatch.className = 'swatch';
      swatch.style.backgroundColor = series.color;
      line.appendChild(swatch);
      var label = document.createElement('span');
      label.className = 'label';
      label.innerHTML = series.name;
      line.appendChild(label);
      this.list.appendChild(line);
      line.series = series;
      if (series.noLegend) {
        line.style.display = 'none';
      }
      var _line = {
        element: line,
        series: series
      };
      if (this.shelving) {
        this.shelving.addAnchor(_line);
        this.shelving.updateBehaviour();
      }
      if (this.highlighter) {
        this.highlighter.addHighlightEvents(_line);
      }
      this.lines.push(_line);
      return line;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.RangeSlider');
  Rickshaw.Graph.RangeSlider = Rickshaw.Class.create({
    initialize: function (args) {
      var element = this.element = args.element;
      var graph = this.graph = args.graph;
      this.slideCallbacks = [];
      this.build();
      graph.onUpdate(function () {
        this.update();
      }.bind(this));
    },
    build: function () {
      var element = this.element;
      var graph = this.graph;
      var $ = jQuery;
      var domain = graph.dataDomain();
      var self = this;
      $(function () {
        $(element).slider({
          range: true,
          min: domain[0],
          max: domain[1],
          values: [
            domain[0],
            domain[1]
          ],
          slide: function (event, ui) {
            if (ui.values[1] <= ui.values[0])
              return;
            graph.window.xMin = ui.values[0];
            graph.window.xMax = ui.values[1];
            graph.update();
            var domain = graph.dataDomain();
            // if we're at an extreme, stick there
            if (domain[0] == ui.values[0]) {
              graph.window.xMin = undefined;
            }
            if (domain[1] == ui.values[1]) {
              graph.window.xMax = undefined;
            }
            self.slideCallbacks.forEach(function (callback) {
              callback(graph, graph.window.xMin, graph.window.xMax);
            });
          }
        });
      });
      $(element)[0].style.width = graph.width + 'px';
    },
    update: function () {
      var element = this.element;
      var graph = this.graph;
      var $ = jQuery;
      var values = $(element).slider('option', 'values');
      var domain = graph.dataDomain();
      $(element).slider('option', 'min', domain[0]);
      $(element).slider('option', 'max', domain[1]);
      if (graph.window.xMin == null) {
        values[0] = domain[0];
      }
      if (graph.window.xMax == null) {
        values[1] = domain[1];
      }
      $(element).slider('option', 'values', values);
    },
    onSlide: function (callback) {
      this.slideCallbacks.push(callback);
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.RangeSlider.Preview');
  Rickshaw.Graph.RangeSlider.Preview = Rickshaw.Class.create({
    initialize: function (args) {
      if (!args.element)
        throw 'Rickshaw.Graph.RangeSlider.Preview needs a reference to an element';
      if (!args.graph && !args.graphs)
        throw 'Rickshaw.Graph.RangeSlider.Preview needs a reference to an graph or an array of graphs';
      this.element = args.element;
      this.element.style.position = 'relative';
      this.graphs = args.graph ? [args.graph] : args.graphs;
      this.defaults = {
        height: 75,
        width: 400,
        gripperColor: undefined,
        frameTopThickness: 3,
        frameHandleThickness: 10,
        frameColor: '#d4d4d4',
        frameOpacity: 1,
        minimumFrameWidth: 0,
        heightRatio: 0.2
      };
      this.heightRatio = args.heightRatio || this.defaults.heightRatio;
      this.defaults.gripperColor = d3.rgb(this.defaults.frameColor).darker().toString();
      this.configureCallbacks = [];
      this.slideCallbacks = [];
      this.previews = [];
      if (!args.width)
        this.widthFromGraph = true;
      if (!args.height)
        this.heightFromGraph = true;
      if (this.widthFromGraph || this.heightFromGraph) {
        this.graphs[0].onConfigure(function () {
          this.configure(args);
          this.render();
        }.bind(this));
      }
      args.width = args.width || this.graphs[0].width || this.defaults.width;
      args.height = args.height || this.graphs[0].height * this.heightRatio || this.defaults.height;
      this.configure(args);
      this.render();
    },
    onSlide: function (callback) {
      this.slideCallbacks.push(callback);
    },
    onConfigure: function (callback) {
      this.configureCallbacks.push(callback);
    },
    configure: function (args) {
      this.config = this.config || {};
      this.configureCallbacks.forEach(function (callback) {
        callback(args);
      });
      Rickshaw.keys(this.defaults).forEach(function (k) {
        this.config[k] = k in args ? args[k] : k in this.config ? this.config[k] : this.defaults[k];
      }, this);
      if ('width' in args || 'height' in args) {
        if (this.widthFromGraph) {
          this.config.width = this.graphs[0].width;
        }
        if (this.heightFromGraph) {
          this.config.height = this.graphs[0].height * this.heightRatio;
          this.previewHeight = this.config.height;
        }
        this.previews.forEach(function (preview) {
          var height = this.previewHeight / this.graphs.length - this.config.frameTopThickness * 2;
          var width = this.config.width - this.config.frameHandleThickness * 2;
          preview.setSize({
            width: width,
            height: height
          });
          if (this.svg) {
            var svgHeight = height + this.config.frameHandleThickness * 2;
            var svgWidth = width + this.config.frameHandleThickness * 2;
            this.svg.style('width', svgWidth + 'px');
            this.svg.style('height', svgHeight + 'px');
          }
        }, this);
      }
    },
    render: function () {
      var self = this;
      this.svg = d3.select(this.element).selectAll('svg.rickshaw_range_slider_preview').data([null]);
      this.previewHeight = this.config.height - this.config.frameTopThickness * 2;
      this.previewWidth = this.config.width - this.config.frameHandleThickness * 2;
      this.currentFrame = [
        0,
        this.previewWidth
      ];
      var buildGraph = function (parent, index) {
        var graphArgs = Rickshaw.extend({}, parent.config);
        var height = self.previewHeight / self.graphs.length;
        var renderer = parent.renderer.name;
        Rickshaw.extend(graphArgs, {
          element: this.appendChild(document.createElement('div')),
          height: height,
          width: self.previewWidth,
          series: parent.series,
          renderer: renderer
        });
        var graph = new Rickshaw.Graph(graphArgs);
        self.previews.push(graph);
        parent.onUpdate(function () {
          graph.render();
          self.render();
        });
        parent.onConfigure(function (args) {
          // don't propagate height
          delete args.height;
          args.width = args.width - self.config.frameHandleThickness * 2;
          graph.configure(args);
          graph.render();
        });
        graph.render();
      };
      var graphContainer = d3.select(this.element).selectAll('div.rickshaw_range_slider_preview_container').data(this.graphs);
      var translateCommand = 'translate(' + this.config.frameHandleThickness + 'px, ' + this.config.frameTopThickness + 'px)';
      graphContainer.enter().append('div').classed('rickshaw_range_slider_preview_container', true).style('-webkit-transform', translateCommand).style('-moz-transform', translateCommand).style('-ms-transform', translateCommand).style('transform', translateCommand).each(buildGraph);
      graphContainer.exit().remove();
      // Use the first graph as the "master" for the frame state
      var masterGraph = this.graphs[0];
      var domainScale = d3.scale.linear().domain([
        0,
        this.previewWidth
      ]).range(masterGraph.dataDomain());
      var currentWindow = [
        masterGraph.window.xMin,
        masterGraph.window.xMax
      ];
      this.currentFrame[0] = currentWindow[0] === undefined ? 0 : Math.round(domainScale.invert(currentWindow[0]));
      if (this.currentFrame[0] < 0)
        this.currentFrame[0] = 0;
      this.currentFrame[1] = currentWindow[1] === undefined ? this.previewWidth : domainScale.invert(currentWindow[1]);
      if (this.currentFrame[1] - this.currentFrame[0] < self.config.minimumFrameWidth) {
        this.currentFrame[1] = (this.currentFrame[0] || 0) + self.config.minimumFrameWidth;
      }
      this.svg.enter().append('svg').classed('rickshaw_range_slider_preview', true).style('height', this.config.height + 'px').style('width', this.config.width + 'px').style('position', 'absolute').style('top', 0);
      this._renderDimming();
      this._renderFrame();
      this._renderGrippers();
      this._renderHandles();
      this._renderMiddle();
      this._registerMouseEvents();
    },
    _renderDimming: function () {
      var element = this.svg.selectAll('path.dimming').data([null]);
      element.enter().append('path').attr('fill', 'white').attr('fill-opacity', '0.7').attr('fill-rule', 'evenodd').classed('dimming', true);
      var path = '';
      path += ' M ' + this.config.frameHandleThickness + ' ' + this.config.frameTopThickness;
      path += ' h ' + this.previewWidth;
      path += ' v ' + this.previewHeight;
      path += ' h ' + -this.previewWidth;
      path += ' z ';
      path += ' M ' + Math.max(this.currentFrame[0], this.config.frameHandleThickness) + ' ' + this.config.frameTopThickness;
      path += ' H ' + Math.min(this.currentFrame[1] + this.config.frameHandleThickness * 2, this.previewWidth + this.config.frameHandleThickness);
      path += ' v ' + this.previewHeight;
      path += ' H ' + Math.max(this.currentFrame[0], this.config.frameHandleThickness);
      path += ' z';
      element.attr('d', path);
    },
    _renderFrame: function () {
      var element = this.svg.selectAll('path.frame').data([null]);
      element.enter().append('path').attr('stroke', 'white').attr('stroke-width', '1px').attr('stroke-linejoin', 'round').attr('fill', this.config.frameColor).attr('fill-opacity', this.config.frameOpacity).attr('fill-rule', 'evenodd').classed('frame', true);
      var path = '';
      path += ' M ' + this.currentFrame[0] + ' 0';
      path += ' H ' + (this.currentFrame[1] + this.config.frameHandleThickness * 2);
      path += ' V ' + this.config.height;
      path += ' H ' + this.currentFrame[0];
      path += ' z';
      path += ' M ' + (this.currentFrame[0] + this.config.frameHandleThickness) + ' ' + this.config.frameTopThickness;
      path += ' H ' + (this.currentFrame[1] + this.config.frameHandleThickness);
      path += ' v ' + this.previewHeight;
      path += ' H ' + (this.currentFrame[0] + this.config.frameHandleThickness);
      path += ' z';
      element.attr('d', path);
    },
    _renderGrippers: function () {
      var gripper = this.svg.selectAll('path.gripper').data([null]);
      gripper.enter().append('path').attr('stroke', this.config.gripperColor).classed('gripper', true);
      var path = '';
      [
        0.4,
        0.6
      ].forEach(function (spacing) {
        path += ' M ' + Math.round(this.currentFrame[0] + this.config.frameHandleThickness * spacing) + ' ' + Math.round(this.config.height * 0.3);
        path += ' V ' + Math.round(this.config.height * 0.7);
        path += ' M ' + Math.round(this.currentFrame[1] + this.config.frameHandleThickness * (1 + spacing)) + ' ' + Math.round(this.config.height * 0.3);
        path += ' V ' + Math.round(this.config.height * 0.7);
      }.bind(this));
      gripper.attr('d', path);
    },
    _renderHandles: function () {
      var leftHandle = this.svg.selectAll('rect.left_handle').data([null]);
      leftHandle.enter().append('rect').attr('width', this.config.frameHandleThickness).style('cursor', 'ew-resize').style('fill-opacity', '0').classed('left_handle', true);
      leftHandle.attr('x', this.currentFrame[0]).attr('height', this.config.height);
      var rightHandle = this.svg.selectAll('rect.right_handle').data([null]);
      rightHandle.enter().append('rect').attr('width', this.config.frameHandleThickness).style('cursor', 'ew-resize').style('fill-opacity', '0').classed('right_handle', true);
      rightHandle.attr('x', this.currentFrame[1] + this.config.frameHandleThickness).attr('height', this.config.height);
    },
    _renderMiddle: function () {
      var middleHandle = this.svg.selectAll('rect.middle_handle').data([null]);
      middleHandle.enter().append('rect').style('cursor', 'move').style('fill-opacity', '0').classed('middle_handle', true);
      middleHandle.attr('width', Math.max(0, this.currentFrame[1] - this.currentFrame[0])).attr('x', this.currentFrame[0] + this.config.frameHandleThickness).attr('height', this.config.height);
    },
    _registerMouseEvents: function () {
      var element = d3.select(this.element);
      var drag = {
        target: null,
        start: null,
        stop: null,
        left: false,
        right: false,
        rigid: false
      };
      var self = this;
      function onMousemove(datum, index) {
        drag.stop = self._getClientXFromEvent(d3.event, drag);
        var distanceTraveled = drag.stop - drag.start;
        var frameAfterDrag = self.frameBeforeDrag.slice(0);
        var minimumFrameWidth = self.config.minimumFrameWidth;
        if (drag.rigid) {
          minimumFrameWidth = self.frameBeforeDrag[1] - self.frameBeforeDrag[0];
        }
        if (drag.left) {
          frameAfterDrag[0] = Math.max(frameAfterDrag[0] + distanceTraveled, 0);
        }
        if (drag.right) {
          frameAfterDrag[1] = Math.min(frameAfterDrag[1] + distanceTraveled, self.previewWidth);
        }
        var currentFrameWidth = frameAfterDrag[1] - frameAfterDrag[0];
        if (currentFrameWidth <= minimumFrameWidth) {
          if (drag.left) {
            frameAfterDrag[0] = frameAfterDrag[1] - minimumFrameWidth;
          }
          if (drag.right) {
            frameAfterDrag[1] = frameAfterDrag[0] + minimumFrameWidth;
          }
          if (frameAfterDrag[0] <= 0) {
            frameAfterDrag[1] -= frameAfterDrag[0];
            frameAfterDrag[0] = 0;
          }
          if (frameAfterDrag[1] >= self.previewWidth) {
            frameAfterDrag[0] -= frameAfterDrag[1] - self.previewWidth;
            frameAfterDrag[1] = self.previewWidth;
          }
        }
        self.graphs.forEach(function (graph) {
          var domainScale = d3.scale.linear().interpolate(d3.interpolateNumber).domain([
            0,
            self.previewWidth
          ]).range(graph.dataDomain());
          var windowAfterDrag = [
            domainScale(frameAfterDrag[0]),
            domainScale(frameAfterDrag[1])
          ];
          self.slideCallbacks.forEach(function (callback) {
            callback(graph, windowAfterDrag[0], windowAfterDrag[1]);
          });
          if (frameAfterDrag[0] === 0) {
            windowAfterDrag[0] = undefined;
          }
          if (frameAfterDrag[1] === self.previewWidth) {
            windowAfterDrag[1] = undefined;
          }
          graph.window.xMin = windowAfterDrag[0];
          graph.window.xMax = windowAfterDrag[1];
          graph.update();
        });
      }
      function onMousedown() {
        drag.target = d3.event.target;
        drag.start = self._getClientXFromEvent(d3.event, drag);
        self.frameBeforeDrag = self.currentFrame.slice();
        d3.event.preventDefault ? d3.event.preventDefault() : d3.event.returnValue = false;
        d3.select(document).on('mousemove.rickshaw_range_slider_preview', onMousemove);
        d3.select(document).on('mouseup.rickshaw_range_slider_preview', onMouseup);
        d3.select(document).on('touchmove.rickshaw_range_slider_preview', onMousemove);
        d3.select(document).on('touchend.rickshaw_range_slider_preview', onMouseup);
        d3.select(document).on('touchcancel.rickshaw_range_slider_preview', onMouseup);
      }
      function onMousedownLeftHandle(datum, index) {
        drag.left = true;
        onMousedown();
      }
      function onMousedownRightHandle(datum, index) {
        drag.right = true;
        onMousedown();
      }
      function onMousedownMiddleHandle(datum, index) {
        drag.left = true;
        drag.right = true;
        drag.rigid = true;
        onMousedown();
      }
      function onMouseup(datum, index) {
        d3.select(document).on('mousemove.rickshaw_range_slider_preview', null);
        d3.select(document).on('mouseup.rickshaw_range_slider_preview', null);
        d3.select(document).on('touchmove.rickshaw_range_slider_preview', null);
        d3.select(document).on('touchend.rickshaw_range_slider_preview', null);
        d3.select(document).on('touchcancel.rickshaw_range_slider_preview', null);
        delete self.frameBeforeDrag;
        drag.left = false;
        drag.right = false;
        drag.rigid = false;
      }
      element.select('rect.left_handle').on('mousedown', onMousedownLeftHandle);
      element.select('rect.right_handle').on('mousedown', onMousedownRightHandle);
      element.select('rect.middle_handle').on('mousedown', onMousedownMiddleHandle);
      element.select('rect.left_handle').on('touchstart', onMousedownLeftHandle);
      element.select('rect.right_handle').on('touchstart', onMousedownRightHandle);
      element.select('rect.middle_handle').on('touchstart', onMousedownMiddleHandle);
    },
    _getClientXFromEvent: function (event, drag) {
      switch (event.type) {
      case 'touchstart':
      case 'touchmove':
        var touchList = event.changedTouches;
        var touch = null;
        for (var touchIndex = 0; touchIndex < touchList.length; touchIndex++) {
          if (touchList[touchIndex].target === drag.target) {
            touch = touchList[touchIndex];
            break;
          }
        }
        return touch !== null ? touch.clientX : undefined;
      default:
        return event.clientX;
      }
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer');
  Rickshaw.Graph.Renderer = Rickshaw.Class.create({
    initialize: function (args) {
      this.graph = args.graph;
      this.tension = args.tension || this.tension;
      this.configure(args);
    },
    seriesPathFactory: function () {
    },
    seriesStrokeFactory: function () {
    },
    defaults: function () {
      return {
        tension: 0.8,
        strokeWidth: 2,
        unstack: true,
        padding: {
          top: 0.01,
          right: 0,
          bottom: 0.01,
          left: 0
        },
        stroke: false,
        fill: false
      };
    },
    domain: function (data) {
      // Requires that at least one series contains some data
      var stackedData = data || this.graph.stackedData || this.graph.stackData();
      var xMin = +Infinity;
      var xMax = -Infinity;
      var yMin = +Infinity;
      var yMax = -Infinity;
      stackedData.forEach(function (series) {
        series.forEach(function (d) {
          if (d.y == null)
            return;
          var y = d.y + d.y0;
          if (y < yMin)
            yMin = y;
          if (y > yMax)
            yMax = y;
        });
        if (!series.length)
          return;
        if (series[0].x < xMin)
          xMin = series[0].x;
        if (series[series.length - 1].x > xMax)
          xMax = series[series.length - 1].x;
      });
      xMin -= (xMax - xMin) * this.padding.left;
      xMax += (xMax - xMin) * this.padding.right;
      yMin = this.graph.min === 'auto' ? yMin : this.graph.min || 0;
      yMax = this.graph.max === undefined ? yMax : this.graph.max;
      if (this.graph.min === 'auto' || yMin < 0) {
        yMin -= (yMax - yMin) * this.padding.bottom;
      }
      if (this.graph.max === undefined) {
        yMax += (yMax - yMin) * this.padding.top;
      }
      return {
        x: [
          xMin,
          xMax
        ],
        y: [
          yMin,
          yMax
        ]
      };
    },
    render: function (args) {
      args = args || {};
      var graph = this.graph;
      var series = args.series || graph.series;
      var vis = args.vis || graph.vis;
      vis.selectAll('*').remove();
      var data = series.filter(function (s) {
        return !s.disabled;
      }).map(function (s) {
        return s.stack;
      });
      var pathNodes = vis.selectAll('path.path').data(data).enter().append('svg:path').classed('path', true).attr('d', this.seriesPathFactory());
      if (this.stroke) {
        var strokeNodes = vis.selectAll('path.stroke').data(data).enter().append('svg:path').classed('stroke', true).attr('d', this.seriesStrokeFactory());
      }
      var i = 0;
      var j;
      series.forEach(function (series) {
        if (series.disabled)
          return;
        series.path = pathNodes[0][i];
        if (this.stroke)
          series.stroke = strokeNodes[0][i];
        this._styleSeries(series);
        i++;
        // support for a line breakpoint
        if (series.lineBreakPoint && series.data.length > series.lineBreakPoint && !series.noPrediction) {
          var pathStash = [];
          for (var j = series.path.pathSegList.numberOfItems; j > series.lineBreakPoint; j--) {
            pathStash.push(series.path.pathSegList.removeItem(series.path.pathSegList.numberOfItems - 1));
          }
          var len = series.path.getTotalLength();
          // This might crash Chrome<37/Webkit on certain lines
          //restore
          for (j = pathStash.length - 1; j >= 0; j--) {
            series.path.pathSegList.appendItem(pathStash[j]);
          }
          var len2 = series.path.getTotalLength();
          var times = (len2 - len) / 8 + 2;
          // get the times we need to add the dashed pattern plus a safety
          var strokes = [];
          for (j = 0; j < times; j++) {
            strokes.push('5,3');
          }
          series.path.setAttribute('style', 'stroke-dasharray:' + len + strokes.join(', '));
        }
      }, this);
    },
    _styleSeries: function (series) {
      var fill = this.fill ? series.color : 'none';
      var stroke = this.stroke ? series.color : 'none';
      series.path.setAttribute('fill', fill);
      series.path.setAttribute('stroke', stroke);
      series.path.setAttribute('stroke-width', this.strokeWidth);
      if (series.className) {
        d3.select(series.path).classed(series.className, true);
      }
      if (series.className && this.stroke) {
        d3.select(series.stroke).classed(series.className, true);
      }
    },
    configure: function (args) {
      args = args || {};
      Rickshaw.keys(this.defaults()).forEach(function (key) {
        if (!args.hasOwnProperty(key)) {
          this[key] = this[key] || this.graph[key] || this.defaults()[key];
          return;
        }
        if (typeof this.defaults()[key] == 'object') {
          Rickshaw.keys(this.defaults()[key]).forEach(function (k) {
            this[key][k] = args[key][k] !== undefined ? args[key][k] : this[key][k] !== undefined ? this[key][k] : this.defaults()[key][k];
          }, this);
        } else {
          this[key] = args[key] !== undefined ? args[key] : this[key] !== undefined ? this[key] : this.graph[key] !== undefined ? this.graph[key] : this.defaults()[key];
        }
      }, this);
    },
    setStrokeWidth: function (strokeWidth) {
      if (strokeWidth !== undefined) {
        this.strokeWidth = strokeWidth;
      }
    },
    setTension: function (tension) {
      if (tension !== undefined) {
        this.tension = tension;
      }
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.Line');
  Rickshaw.Graph.Renderer.Line = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'line',
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        unstack: true,
        fill: false,
        stroke: true
      });
    },
    seriesPathFactory: function () {
      var graph = this.graph;
      var factory = d3.svg.line().x(function (d) {
        return graph.x(d.x);
      }).y(function (d) {
        return graph.y(d.y);
      }).interpolate(this.graph.interpolation).tension(this.tension);
      factory.defined && factory.defined(function (d) {
        return d.y !== null;
      });
      return factory;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.Stack');
  Rickshaw.Graph.Renderer.Stack = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'stack',
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        fill: true,
        stroke: false,
        unstack: false
      });
    },
    seriesPathFactory: function () {
      var graph = this.graph;
      var factory = d3.svg.area().x(function (d) {
        return graph.x(d.x);
      }).y0(function (d) {
        return graph.y(d.y0);
      }).y1(function (d) {
        return graph.y(d.y + d.y0);
      }).interpolate(this.graph.interpolation).tension(this.tension);
      factory.defined && factory.defined(function (d) {
        return d.y !== null;
      });
      return factory;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.Bar');
  Rickshaw.Graph.Renderer.Bar = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'bar',
    defaults: function ($super) {
      var defaults = Rickshaw.extend($super(), {
        gapSize: 0.05,
        unstack: false
      });
      delete defaults.tension;
      return defaults;
    },
    initialize: function ($super, args) {
      args = args || {};
      this.gapSize = args.gapSize || this.gapSize;
      $super(args);
    },
    domain: function ($super) {
      var domain = $super();
      var frequentInterval = this._frequentInterval(this.graph.stackedData.slice(-1).shift());
      domain.x[1] += Number(frequentInterval.magnitude);
      return domain;
    },
    barWidth: function (series) {
      var frequentInterval = this._frequentInterval(series.stack);
      var barWidth = this.graph.x.magnitude(frequentInterval.magnitude) * (1 - this.gapSize);
      return barWidth;
    },
    render: function (args) {
      args = args || {};
      var graph = this.graph;
      var series = args.series || graph.series;
      var vis = args.vis || graph.vis;
      vis.selectAll('*').remove();
      var barWidth = this.barWidth(series.active()[0]);
      var barXOffset = 0;
      var activeSeriesCount = series.filter(function (s) {
        return !s.disabled;
      }).length;
      var seriesBarWidth = this.unstack ? barWidth / activeSeriesCount : barWidth;
      var transform = function (d) {
        // add a matrix transform for negative values
        var matrix = [
          1,
          0,
          0,
          d.y < 0 ? -1 : 1,
          0,
          d.y < 0 ? graph.y.magnitude(Math.abs(d.y)) * 2 : 0
        ];
        return 'matrix(' + matrix.join(',') + ')';
      };
      series.forEach(function (series) {
        if (series.disabled)
          return;
        var barWidth = this.barWidth(series);
        var nodes = vis.selectAll('path').data(series.stack.filter(function (d) {
          return d.y !== null;
        })).enter().append('svg:rect').attr('x', function (d) {
          return graph.x(d.x) + barXOffset;
        }).attr('y', function (d) {
          return graph.y(d.y0 + Math.abs(d.y)) * (d.y < 0 ? -1 : 1);
        }).attr('width', seriesBarWidth).attr('height', function (d) {
          return graph.y.magnitude(Math.abs(d.y));
        }).attr('transform', transform);
        Array.prototype.forEach.call(nodes[0], function (n) {
          n.setAttribute('fill', series.color);
        });
        if (this.unstack)
          barXOffset += seriesBarWidth;
      }, this);
    },
    _frequentInterval: function (data) {
      var intervalCounts = {};
      for (var i = 0; i < data.length - 1; i++) {
        var interval = data[i + 1].x - data[i].x;
        intervalCounts[interval] = intervalCounts[interval] || 0;
        intervalCounts[interval]++;
      }
      var frequentInterval = {
        count: 0,
        magnitude: 1
      };
      Rickshaw.keys(intervalCounts).forEach(function (i) {
        if (frequentInterval.count < intervalCounts[i]) {
          frequentInterval = {
            count: intervalCounts[i],
            magnitude: i
          };
        }
      });
      return frequentInterval;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.Area');
  Rickshaw.Graph.Renderer.Area = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'area',
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        unstack: false,
        fill: false,
        stroke: false
      });
    },
    seriesPathFactory: function () {
      var graph = this.graph;
      var factory = d3.svg.area().x(function (d) {
        return graph.x(d.x);
      }).y0(function (d) {
        return graph.y(d.y0);
      }).y1(function (d) {
        return graph.y(d.y + d.y0);
      }).interpolate(graph.interpolation).tension(this.tension);
      factory.defined && factory.defined(function (d) {
        return d.y !== null;
      });
      return factory;
    },
    seriesStrokeFactory: function () {
      var graph = this.graph;
      var factory = d3.svg.line().x(function (d) {
        return graph.x(d.x);
      }).y(function (d) {
        return graph.y(d.y + d.y0);
      }).interpolate(graph.interpolation).tension(this.tension);
      factory.defined && factory.defined(function (d) {
        return d.y !== null;
      });
      return factory;
    },
    render: function (args) {
      args = args || {};
      var graph = this.graph;
      var series = args.series || graph.series;
      var vis = args.vis || graph.vis;
      vis.selectAll('*').remove();
      // insert or stacked areas so strokes lay on top of areas
      var method = this.unstack ? 'append' : 'insert';
      var data = series.filter(function (s) {
        return !s.disabled;
      }).map(function (s) {
        return s.stack;
      });
      var nodes = vis.selectAll('path').data(data).enter()[method]('svg:g', 'g');
      nodes.append('svg:path').attr('d', this.seriesPathFactory()).attr('class', 'area');
      if (this.stroke) {
        nodes.append('svg:path').attr('d', this.seriesStrokeFactory()).attr('class', 'line');
      }
      var i = 0;
      series.forEach(function (series) {
        if (series.disabled)
          return;
        series.path = nodes[0][i++];
        this._styleSeries(series);
      }, this);
    },
    _styleSeries: function (series) {
      if (!series.path)
        return;
      d3.select(series.path).select('.area').attr('fill', series.color);
      if (this.stroke) {
        d3.select(series.path).select('.line').attr('fill', 'none').attr('stroke', series.stroke || d3.interpolateRgb(series.color, 'black')(0.125)).attr('stroke-width', this.strokeWidth);
      }
      if (series.className) {
        series.path.setAttribute('class', series.className);
      }
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.ScatterPlot');
  Rickshaw.Graph.Renderer.ScatterPlot = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'scatterplot',
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        unstack: true,
        fill: true,
        stroke: false,
        padding: {
          top: 0.01,
          right: 0.01,
          bottom: 0.01,
          left: 0.01
        },
        dotSize: 4
      });
    },
    initialize: function ($super, args) {
      $super(args);
    },
    render: function (args) {
      args = args || {};
      var graph = this.graph;
      var series = args.series || graph.series;
      var vis = args.vis || graph.vis;
      var dotSize = this.dotSize;
      vis.selectAll('*').remove();
      series.forEach(function (series) {
        if (series.disabled)
          return;
        var nodes = vis.selectAll('path').data(series.stack.filter(function (d) {
          return d.y !== null;
        })).enter().append('svg:circle').attr('cx', function (d) {
          return graph.x(d.x);
        }).attr('cy', function (d) {
          return graph.y(d.y);
        }).attr('r', function (d) {
          return 'r' in d ? d.r : dotSize;
        });
        if (series.className) {
          nodes.classed(series.className, true);
        }
        Array.prototype.forEach.call(nodes[0], function (n) {
          n.setAttribute('fill', series.color);
        });
      }, this);
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.Multi');
  Rickshaw.Graph.Renderer.Multi = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'multi',
    initialize: function ($super, args) {
      $super(args);
    },
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        unstack: true,
        fill: false,
        stroke: true
      });
    },
    configure: function ($super, args) {
      args = args || {};
      this.config = args;
      $super(args);
    },
    domain: function ($super) {
      this.graph.stackData();
      var domains = [];
      var groups = this._groups();
      this._stack(groups);
      groups.forEach(function (group) {
        var data = group.series.filter(function (s) {
          return !s.disabled;
        }).map(function (s) {
          return s.stack;
        });
        if (!data.length)
          return;
        var domain = null;
        if (group.renderer && group.renderer.domain) {
          domain = group.renderer.domain(data);
        } else {
          domain = $super(data);
        }
        domains.push(domain);
      });
      var xMin = d3.min(domains.map(function (d) {
        return d.x[0];
      }));
      var xMax = d3.max(domains.map(function (d) {
        return d.x[1];
      }));
      var yMin = d3.min(domains.map(function (d) {
        return d.y[0];
      }));
      var yMax = d3.max(domains.map(function (d) {
        return d.y[1];
      }));
      return {
        x: [
          xMin,
          xMax
        ],
        y: [
          yMin,
          yMax
        ]
      };
    },
    _groups: function () {
      var graph = this.graph;
      var renderGroups = {};
      graph.series.forEach(function (series) {
        if (series.disabled)
          return;
        if (!renderGroups[series.renderer]) {
          var ns = 'http://www.w3.org/2000/svg';
          var vis = document.createElementNS(ns, 'g');
          graph.vis[0][0].appendChild(vis);
          var renderer = graph._renderers[series.renderer];
          var config = {};
          var defaults = [
            this.defaults(),
            renderer.defaults(),
            this.config,
            this.graph
          ];
          defaults.forEach(function (d) {
            Rickshaw.extend(config, d);
          });
          renderer.configure(config);
          renderGroups[series.renderer] = {
            renderer: renderer,
            series: [],
            vis: d3.select(vis)
          };
        }
        renderGroups[series.renderer].series.push(series);
      }, this);
      var groups = [];
      Object.keys(renderGroups).forEach(function (key) {
        var group = renderGroups[key];
        groups.push(group);
      });
      return groups;
    },
    _stack: function (groups) {
      groups.forEach(function (group) {
        var series = group.series.filter(function (series) {
          return !series.disabled;
        });
        var data = series.map(function (series) {
          return series.stack;
        });
        if (!group.renderer.unstack) {
          var layout = d3.layout.stack();
          var stackedData = Rickshaw.clone(layout(data));
          series.forEach(function (series, index) {
            series._stack = Rickshaw.clone(stackedData[index]);
          });
        }
      }, this);
      return groups;
    },
    render: function () {
      this.graph.series.forEach(function (series) {
        if (!series.renderer) {
          throw new Error('Each series needs a renderer for graph \'multi\' renderer');
        }
      });
      this.graph.vis.selectAll('*').remove();
      var groups = this._groups();
      groups = this._stack(groups);
      groups.forEach(function (group) {
        var series = group.series.filter(function (series) {
          return !series.disabled;
        });
        series.active = function () {
          return series;
        };
        group.renderer.render({
          series: series,
          vis: group.vis
        });
        series.forEach(function (s) {
          s.stack = s._stack || s.stack || s.data;
        });
      });
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Renderer.LinePlot');
  Rickshaw.Graph.Renderer.LinePlot = Rickshaw.Class.create(Rickshaw.Graph.Renderer, {
    name: 'lineplot',
    defaults: function ($super) {
      return Rickshaw.extend($super(), {
        unstack: true,
        fill: false,
        stroke: true,
        padding: {
          top: 0.01,
          right: 0.01,
          bottom: 0.01,
          left: 0.01
        },
        dotSize: 3,
        strokeWidth: 2
      });
    },
    seriesPathFactory: function () {
      var graph = this.graph;
      var factory = d3.svg.line().x(function (d) {
        return graph.x(d.x);
      }).y(function (d) {
        return graph.y(d.y);
      }).interpolate(this.graph.interpolation).tension(this.tension);
      factory.defined && factory.defined(function (d) {
        return d.y !== null;
      });
      return factory;
    },
    render: function (args) {
      args = args || {};
      var graph = this.graph;
      var series = args.series || graph.series;
      var vis = args.vis || graph.vis;
      var dotSize = this.dotSize;
      vis.selectAll('*').remove();
      var data = series.filter(function (s) {
        return !s.disabled;
      }).map(function (s) {
        return s.stack;
      });
      var nodes = vis.selectAll('path').data(data).enter().append('svg:path').attr('d', this.seriesPathFactory());
      var i = 0;
      series.forEach(function (series) {
        if (series.disabled)
          return;
        series.path = nodes[0][i++];
        this._styleSeries(series);
      }, this);
      series.forEach(function (series) {
        if (series.disabled)
          return;
        var nodes = vis.selectAll('x').data(series.stack.filter(function (d) {
          return d.y !== null;
        })).enter().append('svg:circle').attr('cx', function (d) {
          return graph.x(d.x);
        }).attr('cy', function (d) {
          return graph.y(d.y);
        }).attr('r', function (d) {
          return 'r' in d ? d.r : dotSize;
        });
        Array.prototype.forEach.call(nodes[0], function (n) {
          if (!n)
            return;
          n.setAttribute('data-color', series.color);
          n.setAttribute('fill', 'white');
          n.setAttribute('stroke', series.color);
          n.setAttribute('stroke-width', this.strokeWidth);
        }.bind(this));
      }, this);
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Smoother');
  Rickshaw.Graph.Smoother = Rickshaw.Class.create({
    initialize: function (args) {
      this.graph = args.graph;
      this.element = args.element;
      this.aggregationScale = 1;
      this.build();
      this.graph.stackData.hooks.data.push({
        name: 'smoother',
        orderPosition: 50,
        f: this.transformer.bind(this)
      });
    },
    build: function () {
      var self = this;
      var $ = jQuery;
      if (this.element) {
        $(function () {
          $(self.element).slider({
            min: 1,
            max: 100,
            slide: function (event, ui) {
              self.setScale(ui.value);
            }
          });
        });
      }
    },
    setScale: function (scale) {
      if (scale < 1) {
        throw 'scale out of range: ' + scale;
      }
      this.aggregationScale = scale;
      this.graph.update();
    },
    transformer: function (data) {
      if (this.aggregationScale == 1)
        return data;
      var aggregatedData = [];
      data.forEach(function (seriesData) {
        var aggregatedSeriesData = [];
        while (seriesData.length) {
          var avgX = 0, avgY = 0;
          var slice = seriesData.splice(0, this.aggregationScale);
          slice.forEach(function (d) {
            avgX += d.x / slice.length;
            avgY += d.y / slice.length;
          });
          aggregatedSeriesData.push({
            x: avgX,
            y: avgY
          });
        }
        aggregatedData.push(aggregatedSeriesData);
      }.bind(this));
      return aggregatedData;
    }
  });
  Rickshaw.namespace('Rickshaw.Graph.Socketio');
  Rickshaw.Graph.Socketio = Rickshaw.Class.create(Rickshaw.Graph.Ajax, {
    request: function () {
      var socket = io.connect(this.dataURL);
      var self = this;
      socket.on('rickshaw', function (data) {
        self.success(data);
      });
    }
  });
  Rickshaw.namespace('Rickshaw.Series');
  Rickshaw.Series = Rickshaw.Class.create(Array, {
    initialize: function (data, palette, options) {
      options = options || {};
      this.palette = new Rickshaw.Color.Palette(palette);
      this.timeBase = typeof options.timeBase === 'undefined' ? Math.floor(new Date().getTime() / 1000) : options.timeBase;
      var timeInterval = typeof options.timeInterval == 'undefined' ? 1000 : options.timeInterval;
      this.setTimeInterval(timeInterval);
      if (data && typeof data == 'object' && Array.isArray(data)) {
        data.forEach(function (item) {
          this.addItem(item);
        }, this);
      }
    },
    addItem: function (item) {
      if (typeof item.name === 'undefined') {
        throw 'addItem() needs a name';
      }
      item.color = item.color || this.palette.color(item.name);
      item.data = item.data || [];
      // backfill, if necessary
      if (item.data.length === 0 && this.length && this.getIndex() > 0) {
        this[0].data.forEach(function (plot) {
          item.data.push({
            x: plot.x,
            y: 0
          });
        });
      } else if (item.data.length === 0) {
        item.data.push({
          x: this.timeBase - (this.timeInterval || 0),
          y: 0
        });
      }
      this.push(item);
      if (this.legend) {
        this.legend.addLine(this.itemByName(item.name));
      }
    },
    addData: function (data, x) {
      var index = this.getIndex();
      Rickshaw.keys(data).forEach(function (name) {
        if (!this.itemByName(name)) {
          this.addItem({ name: name });
        }
      }, this);
      this.forEach(function (item) {
        item.data.push({
          x: x || (index * this.timeInterval || 1) + this.timeBase,
          y: data[item.name] || 0
        });
      }, this);
    },
    getIndex: function () {
      return this[0] && this[0].data && this[0].data.length ? this[0].data.length : 0;
    },
    itemByName: function (name) {
      for (var i = 0; i < this.length; i++) {
        if (this[i].name == name)
          return this[i];
      }
    },
    setTimeInterval: function (iv) {
      this.timeInterval = iv / 1000;
    },
    setTimeBase: function (t) {
      this.timeBase = t;
    },
    dump: function () {
      var data = {
        timeBase: this.timeBase,
        timeInterval: this.timeInterval,
        items: []
      };
      this.forEach(function (item) {
        var newItem = {
          color: item.color,
          name: item.name,
          data: []
        };
        item.data.forEach(function (plot) {
          newItem.data.push({
            x: plot.x,
            y: plot.y
          });
        });
        data.items.push(newItem);
      });
      return data;
    },
    load: function (data) {
      if (data.timeInterval) {
        this.timeInterval = data.timeInterval;
      }
      if (data.timeBase) {
        this.timeBase = data.timeBase;
      }
      if (data.items) {
        data.items.forEach(function (item) {
          this.push(item);
          if (this.legend) {
            this.legend.addLine(this.itemByName(item.name));
          }
        }, this);
      }
    }
  });
  Rickshaw.Series.zeroFill = function (series) {
    Rickshaw.Series.fill(series, 0);
  };
  Rickshaw.Series.fill = function (series, fill) {
    var x;
    var i = 0;
    var data = series.map(function (s) {
      return s.data;
    });
    while (i < Math.max.apply(null, data.map(function (d) {
        return d.length;
      }))) {
      x = Math.min.apply(null, data.filter(function (d) {
        return d[i];
      }).map(function (d) {
        return d[i].x;
      }));
      data.forEach(function (d) {
        if (!d[i] || d[i].x != x) {
          d.splice(i, 0, {
            x: x,
            y: fill
          });
        }
      });
      i++;
    }
  };
  Rickshaw.namespace('Rickshaw.Series.FixedDuration');
  Rickshaw.Series.FixedDuration = Rickshaw.Class.create(Rickshaw.Series, {
    initialize: function (data, palette, options) {
      options = options || {};
      if (typeof options.timeInterval === 'undefined') {
        throw new Error('FixedDuration series requires timeInterval');
      }
      if (typeof options.maxDataPoints === 'undefined') {
        throw new Error('FixedDuration series requires maxDataPoints');
      }
      this.palette = new Rickshaw.Color.Palette(palette);
      this.timeBase = typeof options.timeBase === 'undefined' ? Math.floor(new Date().getTime() / 1000) : options.timeBase;
      this.setTimeInterval(options.timeInterval);
      if (this[0] && this[0].data && this[0].data.length) {
        this.currentSize = this[0].data.length;
        this.currentIndex = this[0].data.length;
      } else {
        this.currentSize = 0;
        this.currentIndex = 0;
      }
      this.maxDataPoints = options.maxDataPoints;
      if (data && typeof data == 'object' && Array.isArray(data)) {
        data.forEach(function (item) {
          this.addItem(item);
        }, this);
        this.currentSize += 1;
        this.currentIndex += 1;
      }
      // reset timeBase for zero-filled values if needed
      this.timeBase -= (this.maxDataPoints - this.currentSize) * this.timeInterval;
      // zero-fill up to maxDataPoints size if we don't have that much data yet
      if (typeof this.maxDataPoints !== 'undefined' && this.currentSize < this.maxDataPoints) {
        for (var i = this.maxDataPoints - this.currentSize - 1; i > 1; i--) {
          this.currentSize += 1;
          this.currentIndex += 1;
          this.forEach(function (item) {
            item.data.unshift({
              x: ((i - 1) * this.timeInterval || 1) + this.timeBase,
              y: 0,
              i: i
            });
          }, this);
        }
      }
    },
    addData: function ($super, data, x) {
      $super(data, x);
      this.currentSize += 1;
      this.currentIndex += 1;
      if (this.maxDataPoints !== undefined) {
        while (this.currentSize > this.maxDataPoints) {
          this.dropData();
        }
      }
    },
    dropData: function () {
      this.forEach(function (item) {
        item.data.splice(0, 1);
      });
      this.currentSize -= 1;
    },
    getIndex: function () {
      return this.currentIndex;
    }
  });
  return Rickshaw;
}));
oh_core = function (_, $, d3, Backbone, moment, momentTimezone, Rickshaw) {
  var Openhose = {};
  Openhose.VERSION = '0.1.5';
  // For Openhose's purposes, jQuery, Zepto or Ender owns
  // the `$` variable.
  Openhose.$ = $;
  Openhose._ = _;
  Openhose.d3 = d3;
  Openhose.Backbone = Backbone;
  Openhose.moment = moment;
  Openhose.Rickshaw = Rickshaw;
  return Openhose;
}(oh_underscore, oh_jquery, oh_d3, oh_backbone, oh_moment, oh_moment_timezone, oh_rickshaw);
oh_configure = function (Openhose) {
  Openhose.DEFAULTSETTINGS = {
    // API hostname, defaults to bottlenose production API
    apiHost: 'http://streams.bottlenose.com/3',
    // use long caching (useful when running something in production)
    cacheLong: false,
    // show loading spinner while requests are being made
    enableProgress: true,
    // when using the same keys for multiple purposes this allows us
    // to give you statistics how much each application is using the API
    // example:
    //    appName: 'Bottlenose Nerve Center'
    appName: 'not specified',
    // send error messages back to your error handling system
    // first argument is the message
    // second argument is related data
    // example:
    //   errorLogger: Raven.captureMessage
    errorLogger: null,
    // id of the stream you want to access
    // this can also be specified in the widget itself
    // example:
    //   streamId: 'ab934ag9uba9u349uasdg93240a'
    streamId: null,
    // your user id (used for authentication)
    // this can also be specified in the widget itself
    // example:
    //   userId: 'ab934ag9uba9u349uasdg93240a'
    userId: null,
    // your user token (used for authentication)
    // this can also be specified in the widget itself
    // example:
    //   userToken: 'ab934ag9uba9u349uasdg93240a'
    userToken: null,
    // your organization id (used for authentication)
    // this can also be specified in the widget itself
    // example:
    //   organizationId: 'ab934ag9uba9u349uasdg93240a'
    organizationId: null,
    // your organization token (used for authentication)
    // this can also be specified in the widget itself
    // example:
    //   organizationToken: 'ab934ag9uba9u349uasdg93240a'
    organizationToken: null,
    // mapping you want to use for a stream
    // this grabs all the correct labels and formattings depending on your mapping file
    // mapping files are located in `{apiHost}/3/mappings/:mapping`
    // this can also be specified in the widget itself
    // example:
    //   mapping: 'social-media'
    mapping: null,
    // mapping you want to use for a set of entities
    // this grabs all the correct labels associated with an entity
    // for example if you have a language entity of `en`,
    // by using the mapping file we can pull in the full name: `English`
    // example:
    //   entityMapping: {
    //     'languages': '/language-info.json',
    //     'countries': '/country-code-info.json'
    //   }
    entityMapping: {}
  };
  Openhose.configureDefaults = function () {
    Openhose.SETTINGS = Openhose._.clone(Openhose.DEFAULTSETTINGS);
  };
  // supplying defaults if nothing is set yet
  if (!Openhose.SETTINGS) {
    Openhose.configureDefaults();
  }
  Openhose.configure = function (settings) {
    var keys = Openhose._.keys(settings);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      Openhose.SETTINGS[key] = settings[key];
    }
  };
  return Openhose;
}(oh_core);
oh_visualization_helpers_format = function (Openhose) {
  var formatPercent = Openhose.d3.format('.1r');
  var formatPercentDiff = Openhose.d3.format('.1f');
  return {
    percent: function (result) {
      if (result < 0.001) {
        return '< 0.001%';
      } else if (result >= 1 && result <= 10) {
        return result.toFixed(1) + '%';
      } else {
        return formatPercent(result) + '%';
      }
    },
    percentDiff: function (result) {
      // Keep percentage positive, because styling will indicate the difference instead of a minus sign
      result = Math.abs(result);
      if (result < 0.001) {
        return 'No change';
      } else {
        return formatPercentDiff(result) + '%';
      }
    },
    bigNumber: function (value, specifier) {
      var formattedValue;
      if (value === null || typeof value == 'undefined') {
        return '-';
      }
      var exponent = parseInt(value.toString().split('+')[1], 10);
      if (exponent > 20) {
        // Necessary because D3.format will parse it as a number:
        // If this is an exponential value and JavaScript is using scientific notation
        // resort to converting number to a comma-separated string manually.
        exponent = exponent - 20;
        value = value / Math.pow(10, exponent);
        formattedValue = value + new Array(exponent + 1).join('0');
        var regex = /(\d+)(\d{3})/;
        while (regex.test(formattedValue)) {
          formattedValue = formattedValue.replace(regex, '$1' + ',' + '$2');
        }
      } else {
        formattedValue = Openhose.d3.format(specifier || ',f1')(value);
      }
      return formattedValue;
    },
    yTickformatter: function (x) {
      if (x < 10) {
        return Openhose.d3.format('.2r')(x);
      } else {
        return Openhose.Rickshaw.Fixtures.Number.formatKMBT(x);
      }
    }
  };
}(oh_core);
oh_visualization_number = function (Openhose, format) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization summary-number',
    // Options available:
    // ==================
    //
    //   label: 'My Awesome Label',
    //   label: false,                // hides the label
    //   caption                      // the Caption for the number widget
    //   roundThousands               // when displaying numbers, round to the nearest 1000
    //   format                       // d3 format string, to use for numbers
    //   data                         // main data { value: Number, label: String || false }
    //   otherData                    // secondary data, creates a compare
    //   percentDiff                  // use a percentage as diff
    //   diffScale                    // when using percentDiff: use this as a difference scale instead of trying to derive it. (useful with negative values)
    //   subLabelFormatter            // provide a different label formatter for otherData
    initialize: function (options) {
      this.options = options || {};
      if (this.options.events)
        this.events = Openhose._.extend(this.events, this.options.events);
      this.data = this.options.data;
      this.otherData = this.options.otherData;
      this.$el.addClass(this.className);
    },
    updateData: function (data) {
      this.data = data;
      this.render();
    },
    renderNumber: function (data) {
      var number = data.value;
      var value = this.options.convertFn ? this.options.convertFn(number) : number;
      var valueText;
      if (data.percent) {
        valueText = format.percent(number);
      } else if (data.percentDiff) {
        valueText = format.percentDiff(number);
      } else {
        value = this.options.roundThousands ? Math.round(value / 1000) : value;
        // use more decimal points when value is < 1
        if (!this.options.format && value < 1)
          this.options.format = ',.2r';
        valueText = format.bigNumber(value, this.options.format || ',.1');
        if (this.options.roundThousands)
          valueText += 'k';
      }
      var $element = Openhose.$('<div class="number"><span class="value">' + valueText + '</span></div>');
      return $element;
    },
    getDiffClass: function () {
      var diffClass;
      var current = this.data;
      var past = this.otherData;
      if (past.value < current.value) {
        // Increase
        diffClass = 'change-up';
      } else if (past.value > current.value) {
        // Decrease
        diffClass = 'change-down';
      } else {
        // Same
        diffClass = 'change-none';
      }
      return diffClass;
    },
    getPercentDiff: function () {
      var current = this.data;
      var past = this.otherData;
      var diffScale = this.options.diffScale || past.value;
      var diffPercentage;
      if (past.value < current.value) {
        // Increase
        diffPercentage = (current.value - past.value) / diffScale * 100;
      } else if (past.value > current.value) {
        // Decrease
        diffPercentage = (past.value - current.value) / diffScale * 100;
      } else {
        // Same
        diffPercentage = 0;
      }
      return [
        diffPercentage,
        this.getDiffClass()
      ];
    },
    getNumberDiff: function () {
      var current = this.data;
      var past = this.otherData;
      var diffNum = current.value - past.value;
      return [
        diffNum,
        this.getDiffClass()
      ];
    },
    render: function () {
      var $element = this.$el.empty();
      if (this.otherData) {
        var current = this.data;
        var past = this.otherData;
        var diff;
        if (this.options.percentDiff) {
          diff = this.getPercentDiff();
        } else {
          diff = this.getNumberDiff();
        }
        var diffNum = diff[0];
        var diffClass = diff[1];
        var $currentNumber = this.renderNumber({ value: current.value });
        var $pastNumber = this.renderNumber({
          value: diffNum,
          percentDiff: !!this.options.percentDiff
        });
        $pastNumber.addClass('previous');
        $pastNumber.addClass(diffClass);
        if (this.options.subLabelFormatter) {
          $pastNumber.append(this.options.subLabelFormatter({
            current: current.value,
            past: past,
            diff: diffNum,
            label: '<span>' + this.otherData.label + '</span>'
          }));
        } else {
          $pastNumber.append('<span>' + this.otherData.label + '</span>');
        }
        $element.append($currentNumber);
        if (this.data.label)
          $element.append('<span class="score-label">' + this.data.label + '</span>');
        $element.append($pastNumber);
      } else {
        var value = this.data.value;
        var $num = this.renderNumber({ value: value });
        $element.append($num);
        if (this.data.label)
          $num.append('<span class="score-label">' + this.data.label + '</span>');
      }
      if (this.options.caption) {
        $element.append(Openhose.$('<span class="caption">' + this.options.caption + '</span>'));
      }
      this.options.onRender && this.options.onRender();
      return this;
    },
    destroy: function () {
      this.remove();
    }
  });
  // non instance functions.
  View.validate = function (metrics, dimensions) {
    var validated = true;
    var error = null;
    if (metrics.length != 1 && metrics) {
      error = 'Need exactly one metric to render a number summary';
      validated = false;
    }
    return [
      validated,
      error
    ];
  };
  return View;
}(oh_core, oh_visualization_helpers_format);
oh_visualization_leaderboard = function (Openhose, format) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization leaderboard',
    // Options available:
    // ==================
    //
    // events             backbone events
    // leaderNumbers      show numbers in front
    //
    // data
    //     .values        array of values
    //     .totalVolume   optional total volume to base the percentage on
    //
    // colors             d3 color scheme
    initialize: function (options) {
      this.options = options || {};
      if (options.events)
        this.events = _.extend(this.events, options.events);
      this.leaderNumbers = options.leaderNumbers === undefined ? true : options.leaderNumbers;
      this.data = options.data;
    },
    render: function () {
      var self = this;
      var data = this.data.values;
      var colors = this.options.colors || d3.scale.category20c();
      var percentageOfTotal;
      var x = d3.scale.linear().domain([
        0,
        d3.max(data, function (d) {
          return d.value;
        })
      ]).range([
        0,
        100
      ]);
      if (this.data.totalVolume) {
        percentageOfTotal = d3.scale.linear().domain([
          0,
          this.data.totalVolume
        ]).range([
          0,
          100
        ]);
      }
      var valueFormatter = function (value) {
        var percent = Math.round(percentageOfTotal(value || 0) * 10) / 10;
        if (percent < 1) {
          return '< 1%';
        } else {
          return percent + '%';
        }
      };
      var container = d3.select(this.el);
      var rows = container.selectAll('.row').data(data, function (d) {
        return d.label;
      }).order();
      rows.enter().append('div').attr('class', 'row').html(function (d, i) {
        var html = '<div class="leader-bar" style="background-color: ' + colors(d.value) + '; width: ' + x(d.value) + '%;"></div>' + (self.leaderNumbers ? '<div class="leader-number">' + (i + 1) + '.</div>' : '') + '<div class="leader-title">' + d.label + '</div>' + '<div class="leader-value">' + format.bigNumber(d.value);
        if (self.data.totalVolume) {
          html += '  (' + valueFormatter(d.value) + ')</div>';
        }
        return html;
      });
      rows.exit().remove();
      this.trigger('render');
    },
    destroy: function () {
      this.remove();
    }
  });
  return View;
}(oh_core, oh_visualization_helpers_format);
oh_visualization_pie = function (Openhose) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization pie',
    legendItemTemplate: '<span class="legend-color" style="background-color: <%= color %>"></span> <%= data.label %>',
    // Options available:
    // ==================
    //
    // events             backbone events
    // hasLabels: true    show labels
    // hasLegend: true    show legend
    // donut              donut size 0..1
    // colors             d3 color scheme
    // width              widget size
    // height
    // align              "left" or "middle"
    // minSizeForLabel: 0.175
    // onMouseOver          callback when the mouse moves over a segment (mouseEvent, d, i)
    // OnMouseOut
    // onClick            callback when a segment is clicked (element, d, i)
    // segmentSpacing     move the segment outward by x points
    // paddingX           extra space around the pie
    // paddingY           extra space around the pie
    // hoverLabels        set to false to disable mouse over hover labels
    // hoverFormatter     provide a function which returns the content for hoverLabel
    // labelDisplacement  value to displace the label with
    initialize: function (options) {
      this.options = options || {};
      if (options.events)
        this.events = Openhose._.extend(this.events, options.events);
      this.hasLabels = true;
      if (options.hasLabels === false) {
        this.hasLabels = false;
      }
      this.hasLegend = true;
      if (options.hasLegend === false) {
        this.hasLegend = false;
      }
      options.segmentSpacing = options.segmentSpacing || 0;
      this.paddingY = options.paddingY || 0;
      this.paddingX = options.paddingX || 0;
      this.minSizeForLabel = options.minSizeForLabel || 0.175;
      this.hoverLabels = options.hoverLabels === false ? false : true;
      this.hoverFormatter = options.hoverFormatter || this.hoverFormatter;
      this.colors = options.colors;
      this.data = options.data;
      this.noDataColors = function () {
        return '#f2f1ed';
      };
    },
    hoverFormatter: function (d, i) {
      return d.label + ': ' + d.value;
    },
    showHover: function (d, i) {
      var mousePos = Openhose.d3.mouse(this.el);
      var l = Openhose.$('<div class="pie-hover"></div>');
      l.html(this.hoverFormatter(d, i));
      l.offset({
        top: mousePos[1],
        left: mousePos[0]
      });
      this.$el.append(l);
    },
    removeHover: function (data) {
      this.$('.pie-hover').remove();
    },
    highlightSegment: function (d, i) {
      var self = this;
      var data = d.data || d;
      // arc generator puts data in a sub object
      var uid = data.uid;
      // highlight pie segment
      Openhose.d3.select('[data-uid=' + uid + '].arc').transition().attr('fill', function (d, i) {
        return Openhose.d3.hsl(self.colors(uid)).brighter(0.3);
      });
      // highlight legend
      Openhose.d3.select(this.el).selectAll('.legend .item:not([data-uid=' + uid + '])').transition().style('opacity', 0.2);
      // callback
      if (self.options.onMouseOver) {
        self.options.onMouseOver(data, i);
      }
      if (self.hoverLabels) {
        self.showHover(data, i);
      }
    },
    removeHighlight: function (d, i) {
      var self = this;
      var data = d.data || d;
      // arc generator puts data in a sub object
      // arcs
      this.svg.selectAll('.arc').transition().attr('fill', function (d) {
        return Openhose.d3.rgb(self.colors(d.uid || d.data.uid));
      });
      // legend
      Openhose.d3.select(this.el).selectAll('.legend .item').transition().style('opacity', 1);
      if (self.options.onMouseOut) {
        self.options.onMouseOut(data, i);
      }
      if (self.hoverLabels) {
        self.removeHover(data, i);
      }
    },
    render: function () {
      var self = this;
      if (!this.$el.is(':visible')) {
        return setTimeout(this.render.bind(this), 200);
      }
      this.width = this.options.width || this.$el.width();
      this.height = this.options.height || this.$el.parent().height();
      this.pieWidth = this.width - this.options.segmentSpacing * 2 - this.paddingX * 2;
      this.pieHeight = this.height - this.options.segmentSpacing * 2 - this.paddingY * 2;
      this.pieSize = Math.min(this.pieWidth, this.pieHeight);
      function mouseOver(d, i) {
        self.highlightSegment(d, i);
      }
      function mouseOut(d, i) {
        self.removeHighlight(d, i);
      }
      function onClick(d, i) {
        if (self.options.onClick) {
          self.options.onClick(this, d, i);
        }
      }
      function addMouseEvents(selection) {
        selection.on('mouseover', mouseOver).on('mouseout', mouseOut).on('click', onClick);
      }
      function drawArcs(selection) {
        selection.append('svg:path').attr('class', 'arc').attr('data-uid', function (d, i) {
          return d.data.uid;
        }).attr('fill', function (d, i) {
          return self.colors(d.data.uid);
        }).attr('transform', function (d, i) {
          if (self.options.segmentSpacing) {
            var start = d.startAngle * (180 / Math.PI);
            var end = d.endAngle * (180 / Math.PI);
            var centerAngle = start + (end - start) / 2;
            return 'rotate(' + centerAngle + ') translate(0, -' + self.options.segmentSpacing + ') rotate(' + -centerAngle + ')';
          }
        }).attr('d', function (d) {
          return arc(d);
        }).call(addMouseEvents);
      }
      function drawLabels(selection) {
        if (!self.hasLabels) {
          return;
        }
        selection.append('svg:text').filter(function (d, i) {
          var angle = d.endAngle - d.startAngle;
          return angle > self.minSizeForLabel;
        }).attr('transform', function (d) {
          return 'translate(' + textArc.centroid(d) + ')';
        }).attr('data-uid', function (d, i) {
          return d.data.uid;
        }).attr('text-anchor', 'middle').text(function (d, i) {
          return d.data.label;
        }).call(addMouseEvents);
      }
      function drawLegend(selection) {
        if (!self.hasLegend) {
          return;
        }
        self.legend = Openhose.d3.select(self.el).append('div').attr('class', 'legend');
        self.legendItems = self.legend.selectAll('.item').data(self.data.values).enter().append('div').attr('class', 'item').attr('data-uid', function (d) {
          return d.uid;
        }).html(function (d) {
          var templateData = {
            data: d,
            color: self.colors(d.uid)
          };
          return Openhose._.template(self.legendItemTemplate)(templateData);
        }).call(addMouseEvents);
      }
      var data = this.data;
      this.colors = this.colors || Openhose.d3.scale.category20c();
      var r = this.pieSize / 2;
      if (!this._calculateTotal()) {
        this.colors = this.noDataColors;
        data = {
          'label': 'Pie 1',
          'values': [{
              'label': 'No Data',
              'value': 100
            }]
        };
      }
      data.values.forEach(function (d) {
        d.uid = 'slice-id-' + Openhose._.uniqueId();
      });
      var piePositionX;
      if (this.options.align == 'left') {
        piePositionX = this.pieSize / 2 + this.paddingX + this.options.segmentSpacing;
      } else {
        // middle align
        piePositionX = this.width / 2;
      }
      this.svg = Openhose.d3.select(this.el).append('svg:svg').data([data.values]).attr('width', this.width).attr('height', this.height).append('svg:g').attr('transform', 'translate(' + piePositionX + ',' + (this.pieSize / 2 + this.paddingY + this.options.segmentSpacing) + ')');
      var pie = Openhose.d3.layout.pie().value(function (d) {
        return d.value;
      });
      // declare an arc generator function
      var arc = Openhose.d3.svg.arc().outerRadius(r);
      if (this.options.donut) {
        arc.innerRadius(r * (1 - this.options.donut));
      }
      var displacement = this.options.labelDisplacement ? this.options.labelDisplacement : 0;
      var textArc = Openhose.d3.svg.arc().outerRadius(r + displacement);
      if (this.options.donut) {
        textArc.innerRadius(r * (1 - this.options.donut) + displacement);
      } else {
        textArc.innerRadius(0);
      }
      // select paths, use arc generator to draw
      this.svg.selectAll('g.slice').data(pie).enter().call(drawArcs).call(drawLabels).call(drawLegend);
    },
    _calculateTotal: function () {
      var segments = this.data.values;
      return Openhose._.reduce(segments, function (total, segment) {
        return total + segment.value;
      }, 0);
    },
    destroy: function () {
      this.remove();
    }
  });
  return View;
}(oh_core);
oh_visualization_lib_custom_hover_details = function (Rickshaw, Openhose) {
  return Rickshaw.Class.create(Rickshaw.Graph.HoverDetail, {
    enableItemHover: false,
    enableHoverDot: true,
    hoverArea: 'closest',
    // options are: closest, bar
    update: function (e) {
      e = e || this.lastEvent;
      if (!e)
        return;
      this.lastEvent = e;
      if (!e.target.nodeName.match(/^(path|svg|rect|circle)$/))
        return;
      var graph = this.graph;
      var eventX = e.offsetX || e.layerX;
      var eventY = e.offsetY || e.layerY;
      var j = 0;
      var points = [];
      var nearestPoint;
      this.graph.series.active().forEach(function (series) {
        var data = this.graph.stackedData[j++];
        if (!data.length)
          return;
        var domainX = graph.x.invert(eventX);
        var domainIndexScale = Openhose.d3.scale.linear().domain([
          data[0].x,
          data.slice(-1)[0].x
        ]).range([
          0,
          data.length - 1
        ]);
        var approximateIndex = Math.round(domainIndexScale(domainX));
        var dataIndex = Math.min(approximateIndex || 0, data.length - 1);
        if (this.hoverArea == 'closest') {
          for (var i = approximateIndex; i < data.length - 1;) {
            if (!data[i] || !data[i + 1])
              break;
            if (data[i].x <= domainX && data[i + 1].x > domainX) {
              dataIndex = Math.abs(domainX - data[i].x) < Math.abs(domainX - data[i + 1].x) ? i : i + 1;
              break;
            }
            if (data[i + 1].x <= domainX) {
              i++;
            } else {
              i--;
            }
          }
        } else if (this.hoverArea == 'bar') {
          // don't be smart and just try to see if it fits the bar
          for (var d = 0; d < data.length; d++) {
            var point = data[d];
            var barWidth = (domainIndexScale.domain()[1] - domainIndexScale.domain()[0]) / domainIndexScale.range()[1];
            var canvasX = graph.x(point.x);
            var canvasXEnd = graph.x(point.x + barWidth);
            if (eventX > canvasX && eventX < canvasXEnd) {
              dataIndex = d;
            }
          }
        }
        if (dataIndex < 0)
          dataIndex = 0;
        var value = data[dataIndex];
        var distance = Math.sqrt(Math.pow(Math.abs(graph.x(value.x) - eventX), 2) + Math.pow(Math.abs(graph.y(value.y + value.y0) - eventY), 2));
        var xFormatter = series.xFormatter || this.xFormatter;
        var yFormatter = series.yFormatter || this.yFormatter;
        //xFormatter and yFormatter are customized
        var point = {
          //formattedXValue: xFormatter(value.x),
          //formattedYValue: yFormatter(series.scale ? series.scale.invert(value.y) : value.y),
          series: series,
          value: value,
          distance: distance,
          order: j,
          name: series.name
        };
        //and added down here
        point.formattedXValue = xFormatter(value.x, point);
        point.formattedYValue = yFormatter(series.scale ? series.scale.invert(value.y) : value.y, point);
        if (!nearestPoint || distance < nearestPoint.distance) {
          nearestPoint = point;
        }
        points.push(point);
      }, this);
      if (!nearestPoint)
        return;
      nearestPoint.active = true;
      var domainX = nearestPoint.value.x;
      var formattedXValue = nearestPoint.formattedXValue;
      this.element.innerHTML = '';
      this.element.style.left = graph.x(domainX) + 'px';
      this.visible && this.render({
        points: points,
        detail: points,
        // for backwards compatibility
        mouseX: eventX,
        mouseY: eventY,
        formattedXValue: formattedXValue,
        domainX: domainX
      });
    },
    _removeHighlightDots: function (svg, animate) {
      if (!svg) {
        svg = Openhose.d3.select(this.graph.element).select('svg');
      }
      var selection = svg.selectAll('circle.graph-highlight-dot');
      function stuff(selection) {
        selection.attr('r', 0).attr('stroke-width', 0).remove();
      }
      if (animate) {
        selection.transition().ease('linear').call(stuff);
      } else {
        selection.call(stuff);
      }
    },
    render: function (args) {
      var graph = this.graph;
      var points = args.points;
      var point = points.filter(function (p) {
        return p.active;
      }).shift();
      var svg = Openhose.d3.select(this.graph.element).select('svg');
      this._removeHighlightDots(svg);
      var barOffset = 0;
      if (this.hoverArea == 'bar') {
        barOffset = this.graph.renderer.barWidth(point.series) / 2;
      }
      if (this.enableHoverDot) {
        for (var i = 0; i < points.length; i++) {
          var circle = svg.append('circle').attr('cx', this.graph.x(points[i].value.x) + barOffset).attr('cy', this.graph.y(points[i].value.y + points[i].value.y0)).attr('r', 6).attr('fill', points[i].series.color).attr('class', 'graph-highlight-dot').attr('stroke', 'white').attr('stroke-width', 3);
          if (points[i].value.highlight) {
            circle.classed('dot-highlight', true);
          }
        }
      }
      if (point.value.y === null)
        return;
      var formattedXValue = point.formattedXValue;
      var formattedYValue = point.formattedYValue;
      this.element.innerHTML = '';
      this.element.style.left = graph.x(point.value.x) + barOffset + 'px';
      var xLabel = document.createElement('div');
      xLabel.className = 'x_label';
      xLabel.innerHTML = formattedXValue;
      this.element.appendChild(xLabel);
      // invert the scale if this series displays using a scale
      var series = point.series;
      //var dot = document.createElement('div');
      //dot.className = 'dot';
      //dot.style.top = item.style.top;
      //dot.style.borderColor = series.color;
      //    this.element.appendChild(dot);
      var outer = this.graph.element.getBoundingClientRect().right;
      var xInner = xLabel.getBoundingClientRect().right;
      if (xInner > outer) {
        Openhose.$(xLabel).css('left', -xLabel.getBoundingClientRect().width + 1);
      }
      // NOTE: item is the old style hover label for a value.
      if (this.enableItemHover) {
        var item = document.createElement('div');
        item.className = 'item';
        // invert the scale if this series displays using a scale
        var actualY = series.scale ? series.scale.invert(point.value.y) : point.value.y;
        item.innerHTML = this.formatter(series, point.value.x, actualY, formattedXValue, formattedYValue, point);
        item.style.top = this.graph.y(point.value.y0 + point.value.y) + 'px';
        this.element.appendChild(item);
        //var dot = document.createElement('div');
        //dot.className = 'dot';
        //dot.style.top = item.style.top;
        //dot.style.borderColor = series.color;
        //    this.element.appendChild(dot);
        var inner = item.getBoundingClientRect().right;
        if (point.active) {
          //dot.className = 'dot active';
          if (inner > outer) {
            item.className = 'item active left';
          } else {
            item.className = 'item active right';
          }
        }
      }
      this.show();
    },
    hide: function () {
      this.visible = false;
      this.element.classList.add('inactive');
      if (typeof this.onHide == 'function') {
        this.onHide();
      }
      this._removeHighlightDots(null, true);
    }
  });
}(oh_rickshaw, oh_core);
oh_lib_utils = function (Openhose) {
  return {
    // TODO: can this be replaced with a normal new Date(iso8601) ?
    fromISO: function (iso8601) {
      if (iso8601 instanceof Date) {
        return iso8601;
      }
      //XXX improve function
      var s = Openhose.$.trim(iso8601);
      s = s.replace(/\.\d\d\d+/, '');
      // remove milliseconds
      s = s.replace(/-/, '/').replace(/-/, '/');
      s = s.replace(/T/, ' ').replace(/Z/, ' UTC');
      s = s.replace(/([\+\-]\d\d)\:?(\d\d)/, ' $1$2');
      // -04:00 -> -0400
      return new Date(s);
    },
    isNewYorkDST: function (date) {
      //http://www.timetemperature.com/tzus/daylight_saving_time.shtml
      var dstYears = {
        '2009': {
          start: [
            2,
            8
          ],
          end: [
            10,
            1
          ]
        },
        '2010': {
          start: [
            2,
            14
          ],
          end: [
            10,
            7
          ]
        },
        '2011': {
          start: [
            2,
            13
          ],
          end: [
            10,
            6
          ]
        },
        '2012': {
          start: [
            2,
            11
          ],
          end: [
            10,
            4
          ]
        },
        '2013': {
          start: [
            2,
            10
          ],
          end: [
            10,
            3
          ]
        },
        '2014': {
          start: [
            2,
            9
          ],
          end: [
            10,
            2
          ]
        },
        '2015': {
          start: [
            2,
            8
          ],
          end: [
            10,
            1
          ]
        },
        '2016': {
          start: [
            2,
            13
          ],
          end: [
            10,
            6
          ]
        }
      };
      var dst = dstYears[date.getFullYear()];
      var startDst = new Date(date.getFullYear(), dst.start[0], dst.start[1], 2);
      var endDst = new Date(date.getFullYear(), dst.end[0], dst.end[1], 2);
      return startDst < date && date < endDst;
    },
    convertToNewYorkTime: function (date) {
      //clone date
      date = new Date(date.getTime());
      var tz = date.getTimezoneOffset() / 60;
      var nycDelta = tz - 5;
      // nyc utc
      date.setHours(date.getHours() + nycDelta);
      //dst start and ends 2 am
      if (this.isNewYorkDST(date)) {
        date.setHours(date.getHours() + 1);
      }
      return date;
    },
    // TODO: change formatting to moment, this consumes moment objects already would be nice if we used .format
    getShortTimeRangeLabel: function (start, end, options) {
      if (!options)
        options = {};
      var months = [];
      if (options.longMonths) {
        months = [
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December'
        ];
      } else {
        months = [
          'Jan',
          'Feb',
          'Mar',
          'Apr',
          'May',
          'Jun',
          'Jul',
          'Aug',
          'Sep',
          'Oct',
          'Nov',
          'Dec'
        ];
      }
      var str = '';
      str += start.date();
      if (start.month() != end.month()) {
        str += ' ' + months[start.month()];
      }
      if (start.hours() == 1 && end - start == 82800000) {
        return start.date() + ' ' + months[end.month()];
      }
      str += ' - ' + end.date() + ' ' + months[end.month()];
      return str;
    },
    truncate: function (str, limit, end) {
      var bits, i;
      if (!str || typeof str != 'string')
        return '';
      bits = str.split('');
      if (bits.length > limit) {
        for (i = bits.length - 1; i > -1; --i) {
          if (i > limit) {
            bits.length = i;
          } else if (' ' === bits[i]) {
            bits.length = i;
            break;
          }
        }
        bits.push(end || '...');
      }
      return bits.join('');
    }
  };
}(oh_core);
oh_visualization_hover_mixin = function (Openhose, CustomHoverDetail, Utils) {
  return {
    getHover: function (options) {
      var Hover = Openhose.Rickshaw.Class.create(CustomHoverDetail, { hoverArea: this.hoverArea });
      // TODO: move these 2 out, and make configurable
      //var yFormat = this.metrics[0] ? this.metrics[0].getFormatter() : Openhose.d3.format('.3');
      var yFormat = options.yFormat || Openhose.d3.format('.3');
      var showHours = options.showHours;
      var period = this.mainPeriod;
      var hoverDetail = new Hover({
        graph: this.graph,
        xFormatter: function (x, point) {
          var label = '';
          // find x position in the data array
          var xPos;
          for (var i = 0; i < this.graph.series[0].data.length; i++) {
            if (this.graph.series[0].data[i].x == x) {
              xPos = i;
            }
          }
          var actives = this.graph.series.active();
          if (this.renderer == 'bar' || this.renderer == 'area') {
            actives = actives.slice().reverse();  // copy and reverse
          }
          var dataPoints = [];
          function compare(a, b) {
            if (a.timeDelta > b.timeDelta) {
              return -1;
            } else if (a.timeDelta < b.timeDelta) {
              return 1;
            }
            // a must be equal to b
            return 0;
          }
          actives.sort(compare);
          label += '<div class="hover-header">';
          label += '<table class="hover-table">';
          var prevTime = 0;
          var metricIds = [];
          if (this.metrics) {
            metricIds = this.metrics.map(function (m) {
              return m.get('metricId');
            });
          }
          var showMetric = true;
          if (!this.metrics || !this.metrics.length) {
            showMetric = false;
          }
          // make sure they are all the same
          if (metricIds.length > 0) {
            for (i = 1; i < metricIds.length; i++) {
              if (metricIds[i] !== metricIds[0]) {
                showMetric = false;
                break;
              }
            }
          }
          showMetric = showMetric && this.metrics[0].get('dimensionId');
          var metricDisplay = '';
          if (showMetric) {
            metricDisplay = this.options.xFieldName;
          }
          var line;
          var hasPrediction = false;
          if (!this.options.noPrediction) {
            for (i = 0; i < actives.length; i++) {
              line = actives[i];
              if (line.data[xPos].yNonPredicted !== undefined) {
                hasPrediction = true;
                break;
              }
            }
          }
          // collect data
          for (i = 0; i < actives.length; i++) {
            line = actives[i];
            dataPoints.push(line.data[i]);
            // show percentage sign or not
            var percentageText = line.data[xPos].yRelative !== undefined && !this.noTotals && this.options.includePercentage ? '<span class="percentage">(%)</span>' : '';
            if (prevTime !== line.timeDelta) {
              var dTs = x * 1000;
              if (line.isHistory) {
                dTs = period.decrementMomentByPeriod(dTs).valueOf();
              }
              var displayTime;
              var d;
              var d2;
              // revert the offset.
              if (this.doOffsetOneBucket) {
                d = moment(dTs - this.mainPeriod.getBucketMs()).tz(period.timezone());
              } else {
                d = moment(dTs).tz(period.timezone());
              }
              if (showHours) {
                displayTime = d.format('MMMM D, YYYY');
                d2 = period.incrementMomentByBucket(d).tz(period.timezone());
                displayTime += '<span class="time">';
                displayTime += d.format('hh:mm A');
                displayTime += ' - ' + d2.format('hh:mm A');
                if (line.data[xPos].atTime) {
                  displayTime += ' @ ' + Openhose.moment(line.data[xPos].atTime).tz(period.timezone()).format('hh:mm A');
                }
                displayTime += '</span>';
              } else {
                d2 = period.incrementMomentByBucket(d).tz(period.timezone());
                displayTime = '<span class="time">';
                displayTime += d.format('Do MMMM');
                if (d.date() !== d2.date() || d.month() !== d2.month()) {
                  displayTime += ' - ';
                  displayTime += d2.format('Do MMMM');
                }
                displayTime += '</span>';
                // @ time for current time frames
                if (line.data[xPos].atTime) {
                  displayTime += '<span class="time">';
                  displayTime += ' ' + Openhose.moment(line.data[xPos].atTime).tz(period.timezone()).format('MMMM D @ hh:mm A');
                  displayTime += '</span>';
                }
              }
              var collspan = hasPrediction ? '3' : '2';
              label += '<tr class="header"><td colspan="' + collspan + '"> ' + displayTime + '</td></tr>';
              if (line.data[xPos].yNonPredicted !== undefined) {
                label += '<tr><th></th><th>Current ' + metricDisplay + ' ' + percentageText + '</th><th>Estimated ' + metricDisplay + '</th></tr>';
              } else if (metricDisplay) {
                label += '<tr><th></th><th>' + metricDisplay + ' ' + percentageText + '</th></tr>';
              }
            }
            prevTime = line.timeDelta;
            if (line.data[xPos].yNonPredicted !== undefined) {
              label += '<tr class="hover-item">';
              label += '  <td><span class="hover-label" style="color: ' + line.color + '"> ' + (line.lineLabel || line.name) + ' </span></td>';
              label += '  <td>' + yFormat(line.data[xPos].yNonPredicted);
              if (line.data[xPos].yRelative && !this.noTotals) {
                label += '<span class="percentage">(' + Math.round(line.data[xPos].yRelative * 10000) / 100 + '%)</span>';
              }
              label += '</td>';
              label += '  <td>' + yFormat(line.data[xPos].y) + '</td>';
              label += '</tr>';
            } else {
              label += '<tr class="hover-item">';
              label += '  <td><span class="hover-label" style="color: ' + line.color + '"> ' + (line.lineLabel || line.name) + ' </span></td>';
              label += '  <td>' + yFormat(line.data[xPos].y);
              if (line.data[xPos].yRelative !== undefined && !this.noTotals && this.options.includePercentage) {
                label += '<span class="percentage">(' + Math.round(line.data[xPos].yRelative * 10000) / 100 + '%)</span>';
              }
              label += '</td>';
              label += '</tr>';
            }
          }
          if (!this.options.noTotals && this.metrics && this.metrics[0] && this.metrics[0].get('relativeMetric') && this.metrics[0].get('relativeMetric').collection.at(xPos)) {
            // yup..
            label += '<tr><td>Total:</td><td>' + yFormat(this.metrics[0].get('relativeMetric').collection.at(xPos)[metricIds[0]]) + '</td></tr>';
          }
          label += '</table>';
          label += '</div>';
          return label;
        }.bind(this)
      });
      return hoverDetail;
    }
  };
}(oh_core, oh_visualization_lib_custom_hover_details, oh_lib_utils);
oh_visualization_lib_axis_local_time = function (Rickshaw) {
  return function (args) {
    var self = this;
    this.graph = args.graph;
    this.elements = [];
    this.ticksTreatment = args.ticksTreatment || 'plain';
    this.fixedTimeUnit = args.timeUnit;
    this.tzOffset = args.tzOffset || 0;
    var time = new Rickshaw.Fixtures.Time();
    this.appropriateTimeUnit = function () {
      var unit;
      var units = time.units;
      var domain = this.graph.x.domain();
      var rangeSeconds = domain[1] - domain[0];
      units.forEach(function (u) {
        if (Math.floor(rangeSeconds / u.seconds) >= 2) {
          unit = unit || u;
        }
      });
      return unit || time.units[time.units.length - 1];
    };
    this.tickOffsets = function () {
      var domain = this.graph.x.domain();
      var unit = this.fixedTimeUnit || this.appropriateTimeUnit();
      var count = Math.ceil((domain[1] - domain[0]) / unit.seconds);
      var runningTick = domain[0] - this.tzOffset;
      var offsets = [];
      for (var i = 0; i < count; i++) {
        var tickValue = time.ceil(runningTick + 1, unit);
        runningTick = tickValue + unit.seconds / 2;
        offsets.push({
          value: tickValue,
          unit: unit
        });
      }
      return offsets;
    };
    this.render = function () {
      var extraContainer = self.graph.element.querySelector('.x_axis_container') || document.createElement('div');
      extraContainer.classList.add('x_axis_container');
      self.graph.element.appendChild(extraContainer);
      this.elements.forEach(function (e) {
        e.parentNode.removeChild(e);
      });
      this.elements = [];
      var offsets = this.tickOffsets();
      offsets.forEach(function (o) {
        if (self.graph.x(o.value) + self.tzOffset > self.graph.x.range()[1])
          return;
        var element = document.createElement('div');
        element.style.left = self.graph.x(o.value + self.tzOffset) + 'px';
        element.classList.add('x_tick');
        element.classList.add(self.ticksTreatment);
        var title = document.createElement('div');
        title.classList.add('title');
        title.innerHTML = o.unit.formatter(new Date(o.value * 1000));
        element.appendChild(title);
        extraContainer.appendChild(element);
        self.elements.push(element);
      });
    };
    this.graph.onUpdate(function () {
      self.render();
    });
  };
}(oh_rickshaw);
oh_visualization_lib_dots = function (Openhose, Rickshaw) {
  return Rickshaw.Class.create({
    initialize: function (args) {
      var self = this;
      this.graph = args.graph;
      this.graph.onUpdate(function () {
        self.render();
      });
    },
    render: function () {
      var self = this;
      var graphLines = Openhose.d3.select(this.graph.element.getElementsByTagName('svg')[0]).selectAll('path')[0];
      for (var l = 0; l < this.graph.series.length; l++) {
        var line = this.graph.series[l];
        if (line.disabled) {
          continue;
        }
        var lineName = line.name;
        if (Openhose._.isArray(lineName))
          lineName = lineName[0];
        var lineId = lineName.replace(/[^\w]/g, '') + '-' + l;
        var selection = Openhose.d3.select(this.graph.element.getElementsByTagName('svg')[0])  //.selectAll("circle.line-id-"+lineId).data(this.graph.stackedData[l]);
.selectAll('circle.line-id-' + lineId).data(this.graph.series[l].data);
        selection.enter().append('circle').attr('class', 'line-id-' + lineId).attr('fill', line.color).attr('r', 3).attr('cx', function (d) {
          return self.graph.x(d.x);
        }).attr('cy', function (d) {
          return self.graph.y(d.y + d.y0);
        }).each(function (d) {
          // NASTY hack, assumes the order of the lines are the same as they are in the data series.
          // Lines do not have a class i can select on :/
          graphLines[l].parentNode.insertBefore(this, graphLines[l].nextSibling);
          // insert After
          //
          if (d.highlight) {
            Openhose.d3.select(this).classed('dot-highlight', true);
          }
        });
      }  // sort the Dots
    }
  });
}(oh_core, oh_rickshaw);
oh_visualization_line = function (Openhose, HoverMixin, Utils, LocalTime, Dots, Formatters) {
  var View = Openhose.Backbone.View.extend(HoverMixin).extend({
    className: 'visualization line',
    // Options available:
    // ==================
    //
    // data
    // events                      backbone events
    // height
    // legend (true)               true to show legend
    // doOffsetOneBucket (true)    Offset tick labels by one bucket
    // disablePreviousTimeLine     Hide the previous timeline on render. (true)
    // noLineDots (false)          Do not render data point dots on lines
    // noPrediction (false)        Turn off extrapolation
    // onClick                     calls given callback when clicking in chart
    // !annotations                list of annotations with format ??
    // logScale                    Use a logarithmic scale instead of linear
    // minValue                    Use this value as the minimum value for the graph
    // maxValue                    Use this value as the maximum value for the graph
    // yTickformatter              Formatter function for Y-Axis
    // yHoverFormat                Formatter function for the Hover label on the Y-Axis
    // !noTotals
    defaults: {
      legend: true,
      doOffsetOneBucket: true,
      disablePreviousTimeLine: true,
      noLineDots: false,
      noPrediction: false,
      yTickformatter: Formatters.yTickformatter
    },
    initialize: function (options) {
      this.options = Openhose._.extend({}, this.defaults, options);
      if (options.events)
        this.events = Openhose._.extend(this.events, options.events);
      this.dimensions = options.dimensions || [];
      this.metrics = options.metrics || [];
      this.mainPeriod = options.period;
      this.noPrediction = options.noPrediction;
      this.noTotals = options.noTotals || false;
      this.noLineDots = options.noLineDots;
      this.doOffsetOneBucket = this.options.doOffsetOneBucket === true || this.doOffsetOneBucket === true ? true : false;
      this.id = Openhose._.uniqueId('line');
      this.el.id = this.id;
      this.data = options.data;
    },
    render: function () {
      var data = this.data.values;
      this.mainPeriod = this.mainPeriod || data[0].period;
      if (!data || !data[0] || !data[0].data.length) {
        this.trigger('noData');
        return this.$el.empty();
      }
      if (!this.$el.is(':visible')) {
        return setTimeout(this.render.bind(this), 200);
      }
      var availableHeight = this.options.height || this.$el.parent().height();
      this.$el.append('<div class="legend"/><div class="graphwrapper"><div class="y_axes" /><div class="secondgraph rickshaw_graph" /><div class="x_axes" /></div>');
      if (this.options.minValue === undefined) {
        this.options.minValue = 'auto';
      }
      if (typeof this.options.maxValue !== 'number') {
        this.options.maxValue = undefined;
      }
      this.graph = new Openhose.Rickshaw.Graph({
        element: this.$('.secondgraph')[0],
        series: data,
        renderer: 'line',
        min: this.options.minValue,
        max: this.options.maxValue,
        height: availableHeight,
        interpolation: 'monotone',
        lineBreakpoint: this.lineBreakpoint,
        noPrediction: this.options.noPrediction
      });
      this.graph.configure({
        height: this.graph.height,
        width: this.graph.width
      });
      var showHours = data[0].period.getDuration().asDays() < 1;
      this.getHover({
        showHours: showHours,
        yFormat: this.options.yHoverFormat
      });
      if (this.options.annotations) {
        var annotations = this.options.annotations;
        var annotationData = annotations.data;
        var style = annotations.style;
        var labelStyle = annotations.labelStyle;
        this.$el.append('<div class="annotations"/></div>');
        var annotationsEl = this.$('.annotations').get(0);
        this.annotator = new Openhose.Rickshaw.Graph.CustomAnnotate({
          graph: this.graph,
          element: annotationsEl,
          ranges: style,
          showLabels: labelStyle
        });
        // add existing annotations
        annotationData.map(function (annotation) {
          var end = annotation.x2 || undefined;
          var series = annotation.series || undefined;
          // this needs to be a reference to the rickshaw graph line.
          this.annotator.add(annotation.x, annotation.label, end, series, annotation.click);
        }.bind(this));
        this.annotator.update();
        this.$('.annotations.rickshaw_annotation_timeline').css('height', '300px');  // FIXME: remove me!
      }
      if (this.options.onClick) {
        this.clicker = new Openhose.Rickshaw.Graph.Click({
          graph: this.graph,
          onClick: this.options.onClick,
          annotator: this.annotator
        });  //var timestamp = data[0].data[0].x;
             //var message = "test";
             //this.annotator.add(timestamp, message);
      }
      if (data.length > 1 && this.options.legend) {
        var legend = new Openhose.Rickshaw.Graph.Legend({
          graph: this.graph,
          element: this.$('.legend')[0]
        });
        new Openhose.Rickshaw.Graph.Behavior.Series.Toggle({
          graph: this.graph,
          legend: legend
        });
        new Openhose.Rickshaw.Graph.Behavior.Series.Highlight({
          graph: this.graph,
          legend: legend
        });
      }
      var yAxis;
      if (this.options.logScale) {
        yAxis = new Openhose.Rickshaw.Graph.Axis.Y.Scaled({
          graph: this.graph,
          tickFormat: this.options.yTickformatter,
          scale: Openhose.d3.scale.log()
        });
      } else {
        yAxis = new Openhose.Rickshaw.Graph.Axis.Y({
          graph: this.graph,
          tickFormat: this.options.yTickformatter
        });
      }
      yAxis.render();
      var xAxis = new LocalTime({
        graph: this.graph,
        element: this.$('.x_axes')[0],
        tzOffset: this.mainPeriod.toMoments().end.zone() * 60
      });
      xAxis.render();
      this.graph.render();
      if (!this.noLineDots) {
        var dots = new Dots({ graph: this.graph });
        dots.render();
      }
    },
    destroy: function () {
      this.remove();
    }
  });
  return View;
}(oh_core, oh_visualization_hover_mixin, oh_lib_utils, oh_visualization_lib_axis_local_time, oh_visualization_lib_dots, oh_visualization_helpers_format);
oh_visualization_area = function (Openhose, HoverMixin, Utils, LocalTime) {
  var View = Openhose.Backbone.View.extend(HoverMixin).extend({
    // Options available:
    // ==================
    //
    // data
    // events                      backbone events
    // height
    // doOffsetOneBucket (true)    Offset tick labels by one bucket
    // legend (true)               true to show legend
    // minValue                    Use this value as the minimum value for the graph
    // maxValue                    Use this value as the maximum value for the graph
    defaults: { legend: true },
    className: 'visualization area',
    renderer: 'area',
    hoverArea: 'closest',
    doOffsetOneBucket: true,
    initialize: function (options) {
      this.options = Openhose._.extend({}, this.defaults, options);
      if (options.events)
        this.events = Openhose._.extend(this.events, options.events);
      this.dimensions = options.dimensions || [];
      this.metrics = options.metrics || [];
      this.mainPeriod = options.period;
      this.id = 'area-' + Openhose._.uniqueId('line');
      this.el.id = this.id;
      // override from options
      if (this.options.doOffsetOneBucket !== undefined) {
        this.doOffsetOneBucket = this.options.doOffsetOneBucket;
      }
      this.data = options.data;
    },
    render: function () {
      var data = this.data.values;
      this.mainPeriod = this.mainPeriod || data[0].period;
      if (this._isEmpty()) {
        this.trigger('noData');
        return this.$el.empty();
      }
      if (!this.$el.is(':visible')) {
        return setTimeout(this.render.bind(this), 200);
      }
      var availableHeight = this.options.height || this.$el.parent().height();
      this.$el.append('<div class=legend /><div class=graphwrapper><div class=y_axes /><div class="secondgraph rickshaw_graph" /><div class=x_axes /></div>');
      if (this.options.minValue === undefined) {
        this.options.minValue = 'auto';
      }
      if (typeof this.options.maxValue !== 'number') {
        this.options.maxValue = undefined;
      }
      var graph = new Openhose.Rickshaw.Graph({
        element: this.$('.secondgraph')[0],
        series: data,
        renderer: this.renderer,
        height: availableHeight,
        min: this.options.minValue,
        max: this.options.maxValue,
        padding: { top: 0.02 }
      });
      this.graph = graph;
      graph.render();
      var showHours = data[0].period.getDuration().asDays() < 1;
      this.getHover({ showHours: showHours });
      if (this.options.legend) {
        var legend = new Openhose.Rickshaw.Graph.Legend({
          graph: graph,
          element: this.$('.legend')[0]
        });
        new Openhose.Rickshaw.Graph.Behavior.Series.Toggle({
          graph: graph,
          legend: legend
        });
        new Openhose.Rickshaw.Graph.Behavior.Series.Highlight({
          graph: graph,
          legend: legend
        });
      }
      var yAxis = new Openhose.Rickshaw.Graph.Axis.Y({
        graph: graph,
        tickFormat: this.yTickformatter
      });
      yAxis.render();
      // fix 0, 0
      function fixZeroPointZero() {
        var $ax = Openhose.$(yAxis.graph.element);
        var zeroLabel = $ax.find('.tick.major text').first();
        if (zeroLabel.parent().length && zeroLabel.parent().attr('transform').split(',')[1].slice(0, -1) == '' + availableHeight) {
          zeroLabel.attr('transform', 'translate(0, -6)');
        }
      }
      graph.onUpdate(fixZeroPointZero);
      fixZeroPointZero();
      var xAxis = new LocalTime({
        graph: graph,
        orientation: 'bottom',
        element: this.$('.x_axes')[0],
        tzOffset: this.mainPeriod.toMoments().end.zone() * 60
      });
      xAxis.render();
    },
    _isEmpty: function () {
      var data = this.data.values;
      for (var i = 0; i < data.length; i++) {
        var line = data[i];
        for (var j = 0; j < line.data.length; j++) {
          var value = line.data[j].y;
          if (!Openhose._.isNumber(value) || Openhose._.isNaN(value))
            return true;
        }
      }
      return false;
    },
    destroy: function () {
      this.remove();
    }
  });
  // non instance functions.
  View.validate = function (metrics, dimensions) {
    var validated = true;
    var error = null;
    if (dimensions.length) {
      if (metrics.length != 1) {
        error = 'Need exactly one metric to render a line chart with dimensions';
        validated = false;
      }
      var supportedDimensions = [
        'topics',
        'tags'
      ];
      dimensions.forEach(function (dimension) {
        if (supportedDimensions.indexOf(dimension.get('dimensionId')) == -1) {
          error = 'Area chart doesn\'t support this dimension yet';
          validated = false;
          return;
        }
      });
    } else {
      if (!metrics.length) {
        error = 'Need at least one dimension or metric to render line chart';
        validated = false;
      }
    }
    return [
      validated,
      error
    ];
  };
  return View;
}(oh_core, oh_visualization_hover_mixin, oh_lib_utils, oh_visualization_lib_axis_local_time);
oh_visualization_stacked_bar = function (Area) {
  var View = Area.extend({
    renderer: 'bar',
    hoverArea: 'bar',
    doOffsetOneBucket: false
  });
  return View;
}(oh_visualization_area);
oh_visualization_time_line = function (Openhose, HoverMixin, Utils) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization time-line',
    margin: {
      top: 40,
      right: 14,
      bottom: 0,
      left: 14
    },
    width: 0,
    height: 50,
    initialize: function (options) {
      options = options || {};
      this.options = options;
      this.onClick = this._clickHandler.bind(this);
      this.onHover = this._onHover;
      this.period = options.period;
      this.data = options.data;
      this.snapGrid = options.snapGrid;
    },
    _clickHandler: function (e) {
      var positionIndicator = this.positionIndicator;
      var x = this.x;
      var position = this.snapToGrid(e, e.offsetX - this.margin.left);
      var date = Openhose.moment(this.x.invert(position));
      positionIndicator.selectAll('text').text(date.format('hh A MMM Do'));
      this.updatePosition({ date: date });
      this.selectedPoint = date;
      this.options.onClick(x.invert(e.offsetX), this.slot);
    },
    updatePosition: function (options) {
      var date = Openhose.moment(options.date);
      this.positionIndicator.selectAll('text').text(date.format('hh A MMM Do'));
      this.positionIndicator.attr('transform', 'translate(' + this.x(date.valueOf()) + ', 49)');
    },
    hidePosition: function () {
      this.positionIndicator.attr('transform', 'translate(-300, 8)');
      this.selectedPoint = null;
    },
    renderLine: function () {
      var data = this.data.values[0];
      if (!data)
        return;
      data = data.data;
      if (!data)
        return;
      var margin = 2;
      var yMax = d3.max(data, function (d) {
        return d.y;
      });
      var yMin = d3.min(data, function (d) {
        return d.y;
      });
      var xMax = d3.max(data, function (d) {
        return d.x;
      });
      var xMin = d3.min(data, function (d) {
        return d.x;
      });
      var x = d3.scale.linear().range([
        this.margin.left,
        this.width + this.margin.left
      ]).domain([
        xMin,
        xMax
      ]);
      var y = d3.scale.linear().range([
        margin,
        20
      ]).domain([
        yMax,
        yMin
      ]);
      var line = d3.svg.line()  //.interpolate("monotone")
.interpolate('linear').x(function (d) {
        return x(d.x);
      }).y(function (d) {
        return y(d.y);
      });
      this.svg.append('path').datum(data).attr('class', 'sparkline').attr('d', function (d) {
        return line(d);
      });
    },
    render: function () {
      setTimeout(this.render2.bind(this), 10);
    },
    render2: function () {
      var period = this.period || this.data.values[0].period;
      this.range = [
        period.get('start'),
        period.decrementMomentByBucket(period.get('end') + 1)
      ];
      this.width = this.$el.parent().width() - this.margin.left - this.margin.right;
      var customTimeFormat = d3.time.format.multi([
        [
          '.%L',
          function (d) {
            return d.getMilliseconds();
          }
        ],
        [
          '%I:%M:%S',
          function (d) {
            return d.getSeconds();
          }
        ],
        [
          '%I:%M',
          function (d) {
            return d.getMinutes();
          }
        ],
        [
          '%I %p',
          function (d) {
            return d.getHours();
          }
        ],
        [
          '%a %d',
          function (d) {
            return d.getDay() && d.getDate() != 1;
          }
        ],
        [
          '%b %d',
          function (d) {
            return d.getDate() != 1;
          }
        ],
        [
          '%B',
          function (d) {
            return d.getMonth();
          }
        ],
        [
          '%Y',
          function () {
            return true;
          }
        ]
      ]);
      this.x = d3.time.scale().domain(this.range).range([
        0,
        this.width
      ]);
      this.xAxis = d3.svg.axis().scale(this.x).orient('top').tickPadding(8).outerTickSize(4).innerTickSize(4).tickFormat(customTimeFormat);
      d3.select(this.el).select('svg').remove();
      this.svg = d3.select(this.el).append('svg').attr('width', this.width + this.margin.left + this.margin.right).attr('height', this.height);
      this.svg.append('g').attr('class', 'chart').attr('transform', 'translate(' + this.margin.left + ',' + (this.height - 1) + ')').call(this.xAxis);
      this.controlsG = this.svg.append('g').attr('class', 'controls').attr('transform', 'translate(' + this.margin.left + ', 0)');
      this.controlsG.append('rect').attr('class', 'background-rect').attr('x', 0).attr('y', 0).attr('width', this.width).attr('height', this.height);
      if (this.options.line || true) {
        // TODO: remove true
        this.renderLine();
      }
      this.positionIndicator = this.controlsG.append('g').attr('class', 'indicators').attr('transform', 'translate(-30,49)').style('pointer-events', 'none');
      if (this.selectedPoint) {
        this.updatePosition({ date: this.selectedPoint });
      }
      this.positionIndicator.append('polyline').attr('class', 'position-indicator').attr('points', '-4,0 4,0 0,-6 0,-49 -0.5,-49 -0.5,-6 -4,0 4,0');
      this.positionIndicator.append('text').attr('y', '-34').attr('text-anchor', 'middle').text('');
      this.hoverIndicator = this.controlsG.append('g').attr('class', 'indicators').attr('transform', 'translate(-30,49)').style('pointer-events', 'none');
      this.hoverIndicator.append('polyline').attr('class', 'text-back').attr('points', '-50,-31  50,-31  50,-44 -50,-44');
      this.hoverIndicator.append('polyline').attr('class', 'hover-indicator').attr('points', '-4,0 4,0 0,-6 0,-49 -0.5,-49 -0.5,-6 -4,0 4,0');
      this.hoverIndicator.append('text').attr('y', '-34').attr('text-anchor', 'middle').text('');
      var hoverCircle = this.hoverIndicator;
      var x = this.x;
      var timer;
      var self = this;
      this.$('.background-rect').on('mouseover', function () {
        hoverCircle.style('visibility', 'visible');
        clearTimeout(timer);
      }).on('mousemove', function (e) {
        var offset = e.offsetX;
        offset -= self.margin.left;
        var text = hoverCircle.selectAll('text');
        var position = offset;
        position = self.snapToGrid(e, position);
        hoverCircle.attr('transform', 'translate(' + position + ', 49)');
        text.text(Openhose.moment(x.invert(position)).format('hh:mm A MMM Do'));
        text.attr('transform', 'translate(0, 0)');
        // keep text inside the svg canvas
        var textBB = text.node().getBoundingClientRect();
        var svgBB = self.svg.node().getBoundingClientRect();
        var left = textBB.left - svgBB.left;
        var right = svgBB.right - textBB.right;
        if (left < 0) {
          text.attr('transform', 'translate(' + -left + ', 0)');
        } else if (right < 0) {
          text.attr('transform', 'translate(' + right + ', 0)');
        }
      }).on('mouseout', function () {
        timer = setTimeout(function () {
          hoverCircle.style('visibility', 'hidden');
        }, 250);
      }).on('click', this.onClick);
    },
    snapToGrid: function (e, position) {
      var distance;
      var closestI = 0;
      var value;
      if (this.snapGrid) {
        distance = this.snapGrid[0];
        closestI = 0;
        this.snapGrid.map(function (x, i) {
          var newDistance = Math.abs(this.x.invert(position).valueOf() - x);
          if (newDistance < distance) {
            distance = newDistance;
            closestI = i;
            value = x;
          }
        }.bind(this));
        position = this.x(value);
      }
      this.slot = closestI;
      return position;
    },
    destroy: function () {
      this.remove();
    }
  });
  // non instance functions.
  View.validate = function (metrics, dimensions) {
    return [
      true,
      null
    ];
  };
  return View;
}(oh_core, oh_visualization_hover_mixin, oh_lib_utils);
oh_visualization_table = function (Openhose, format) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization table',
    // Options available:
    // ==================
    //
    // data
    // events
    // timeComparisonDimensions
    // colors
    // columnTitleLabel                     Sets the first header
    // columnWidths                         Array with css width of columns
    // columns                              Custom columns definitions TODO: get some documentation for this
    // format                               If no other formatter is specified, fallback to this. // TODO: replace with formatter helper?
    // formats                              Override d3 formatter {'<fieldId>': '<d3 format string>', ... }
    // labels                               Override labels {'<fieldId>': '<label>', ... }
    // onRender                             Callback after render
    // showImages [true]                    Show images if it has a imageUrl
    // urlPrefix                            TODO: unused?
    initialize: function (options) {
      this.options = _.defaults({}, options || {}, { showImages: true });
      if (options.events)
        this.events = _.extend(this.events, options.events);
      this.metrics = options.metrics || [];
      this.dimensions = options.dimensions || [];
      this.timeComparisonDimensions = options.timeComparisonDimensions;
      this.data = options.data;
      this.percentageColumns = [];
      this.hideColumns = [];
      this.showChangeColumns = [];
      (options.columns || []).forEach(this._setColumnOptions.bind(this));
    },
    _setColumnOptions: function (column) {
      var id = column.id;
      // TODO: unify this, make sure keeping the indexes below is not needed anymore
      if (column.percentages)
        this.percentageColumns.push(id);
      if (column.hidden)
        this.hideColumns.push(id);
      if (column.showChange)
        this.showChangeColumns.push(id);
    },
    render: function () {
      if (!this.data) {
        this.trigger('noData');
        return this.$el.empty();
      }
      var $table = $('<table>');
      var $tr = $('<tr>');
      var self = this;
      var hideColumns = this.hideColumns;
      var percentageColumns = this.percentageColumns;
      var columnWidths = this.options.columnWidths || [];
      var columnTitleLabel = this.options.columnTitleLabel || '&nbsp;';
      var labelKeys = _.keys(this.data.labels);
      if (hideColumns.length) {
        labelKeys = labelKeys.filter(function (l) {
          return hideColumns.indexOf(l) === -1;
        });
      }
      [].concat(['label'], labelKeys).forEach(function (k, i) {
        var $th;
        if (k === 'label') {
          $th = $('<th class="label">' + columnTitleLabel + '</th>');
        } else {
          $th = $('<th>').html(self.data.labels[k]);
        }
        if (columnWidths[i]) {
          $th.css('width', columnWidths[i]);
        }
        if (self.showChangeColumns.indexOf(k) !== -1) {
          // Take extra column for comparison number into account
          $th.attr('colspan', 2);
        }
        $tr.append($th);
      });
      var $tHead = $('<thead>');
      $tHead.append($tr);
      $table.append($tHead);
      var blindClass = 'odd';
      var colors = [];
      // Colors need to be cached first because the passed in colors function
      // seems to mess up if colors aren't called by index in ascending order.
      // When re-sorting the table, this can be an issue
      if (this.options.colors) {
        this.data.values.forEach(function (value, i) {
          colors.push(this.options.colors(i));
        }.bind(this));
      }
      var totals = {};
      if (percentageColumns) {
        var values = this.data.values;
        percentageColumns.forEach(function (column) {
          totals[column] = _.reduce(values, function (sum, item) {
            return sum + item[column];
          }, 0);
        });
      }
      this.data.values.forEach(function (value, i) {
        var $tr = $('<tr>').addClass(blindClass);
        Object.keys(value).map(function (k) {
          $tr.data(k, value[k]).attr('data-' + k, value[k]);
        });
        var href = this.options.urlPrefix ? this.options.urlPrefix + value.title : '#';
        // TODO: why is data-title being used here in $labelTd?
        var dataAttributes = {
          id: value.id,
          title: value.title
        };
        if (value.entityType)
          dataAttributes.entitytype = value.entityType;
        var $labelTd = $('<td class="label"><a target="_blank" title="' + value.title + '" href="' + href + '" ' + this._getDataAttributesHtml(dataAttributes) + '>' + (value.imageUrl && this.options.showImages ? '<span class="image"><img onload="this.style.display=\'inline\'" src="' + value.imageUrl + '"></span>' : '') + (this.options.labelPrefix || '') + value.label + '</a></td>');
        if (this.options.colors) {
          var color;
          if (this.options.sortBy) {
            color = colors[value.originalIndex];
          } else {
            color = colors[i];
          }
          $labelTd.addClass('color-label').css('border-left-color', color);
        }
        $tr.append($labelTd);
        labelKeys.forEach(function (k) {
          var valueText = value[k];
          if (percentageColumns.length && percentageColumns.indexOf(k) !== -1) {
            var percent = valueText / totals[k] * 100;
            valueText = format.percent(percent);
          } else if (this.options.formats && this.options.formats[k]) {
            if (typeof this.options.formats[k] === 'function') {
              valueText = this.options.formats[k](valueText, this.data.values);
            } else {
              valueText = d3.format(this.options.formats[k])(value[k]);
            }
          } else if (typeof value[k] === 'number') {
            valueText = this._prettyNumber(valueText);
          }
          if (!valueText)
            valueText = '-';
          var valueCell = $('<td class="' + k + '">' + (valueText || '') + '</td>');
          $tr.append(valueCell);
          if (this.showChangeColumns.indexOf(k) !== -1) {
            // Only supporting one previous data set right now
            var previousValues = this.data.previousMapping;
            if (!previousValues) {
              console.warn('No previous values available, were they fetched?');
            }
            var diffElement = $('<td>');
            var previous = previousValues[value.id];
            if (previous) {
              var previousValue = previous.get(k);
              var currentValue = value[k];
              var diffPercentage, diffClass;
              if (previousValue < currentValue) {
                // Increase
                diffPercentage = (currentValue - previousValue) / previousValue * 100;
                diffClass = 'change-up';
              } else if (previousValue > currentValue) {
                // Decrease
                diffPercentage = (previousValue - currentValue) / previousValue * 100;
                diffClass = 'change-down';
              } else {
                // Same
                diffPercentage = 0;
                diffClass = 'change-none';
              }
              diffElement.addClass(diffClass).text(format.percentDiff(diffPercentage));
            } else {
              diffElement.addClass('change-none').text('-');
            }
            $tr.append(diffElement);
          }
        }.bind(this));
        $table.append($tr);
        blindClass = blindClass === 'odd' ? 'even' : 'odd';
      }.bind(this));
      var $inner = $('<div>').addClass('inner');
      // Quick dirty fix for showing titles in table headers
      // adding it to the th when it is created doesn't work for reasons of no idea.
      $table.find('th').each(function (i, th) {
        var $th = $(th);
        $th.attr('title', $th.text());
      });
      $inner.append($table);
      this.$el.append($inner);
      this.trigger('render');
      this.options.onRender && this.options.onRender();
    },
    destroy: function () {
      this.remove();
    },
    _getDataAttributesHtml: function (attributes) {
      var html = '';
      Object.keys(attributes).forEach(function (attr) {
        html += ' data-' + attr + '="' + attributes[attr] + '"';
      });
      return $.trim(html);
    },
    _prettyNumber: function (number) {
      if (!number)
        return '';
      return d3.format(this.options.format || ',.1')(number);
    }
  });
  // non instance functions.
  View.validate = function (metrics, dimensions) {
    var validated = true;
    var error = null;
    if (dimensions.length) {
      if (dimensions.length !== 1) {
        error = 'Table needs exactly one dimension';
        validated = false;
      }
      if (dimensions[0].get('metrics').length < 1) {
        error = 'Table needs at least one metric when used with dimension.';
        validated = false;
      }
    } else if (metrics.length < 1) {
      error = 'Table needs at least one metric';
      validated = false;
    }
    return [
      validated,
      error
    ];
  };
  return View;
}(oh_core, oh_visualization_helpers_format);
oh_text = function (module) {
  
  var text, fs, Cc, Ci, xpcIsWindows, progIds = [
      'Msxml2.XMLHTTP',
      'Microsoft.XMLHTTP',
      'Msxml2.XMLHTTP.4.0'
    ], xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im, hasLocation = typeof location !== 'undefined' && location.href, defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''), defaultHostName = hasLocation && location.hostname, defaultPort = hasLocation && (location.port || undefined), buildMap = {}, masterConfig = module.config && module.config() || {};
  text = {
    version: '2.0.13',
    strip: function (content) {
      //Strips <?xml ...?> declarations so that external SVG and XML
      //documents can be added to a document without worry. Also, if the string
      //is an HTML document, only the part inside the body tag is returned.
      if (content) {
        content = content.replace(xmlRegExp, '');
        var matches = content.match(bodyRegExp);
        if (matches) {
          content = matches[1];
        }
      } else {
        content = '';
      }
      return content;
    },
    jsEscape: function (content) {
      return content.replace(/(['\\])/g, '\\$1').replace(/[\f]/g, '\\f').replace(/[\b]/g, '\\b').replace(/[\n]/g, '\\n').replace(/[\t]/g, '\\t').replace(/[\r]/g, '\\r').replace(/[\u2028]/g, '\\u2028').replace(/[\u2029]/g, '\\u2029');
    },
    createXhr: masterConfig.createXhr || function () {
      //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
      var xhr, i, progId;
      if (typeof XMLHttpRequest !== 'undefined') {
        return new XMLHttpRequest();
      } else if (typeof ActiveXObject !== 'undefined') {
        for (i = 0; i < 3; i += 1) {
          progId = progIds[i];
          try {
            xhr = new ActiveXObject(progId);
          } catch (e) {
          }
          if (xhr) {
            progIds = [progId];
            // so faster next time
            break;
          }
        }
      }
      return xhr;
    },
    /**
     * Parses a resource name into its component parts. Resource names
     * look like: module/name.ext!strip, where the !strip part is
     * optional.
     * @param {String} name the resource name
     * @returns {Object} with properties "moduleName", "ext" and "strip"
     * where strip is a boolean.
     */
    parseName: function (name) {
      var modName, ext, temp, strip = false, index = name.lastIndexOf('.'), isRelative = name.indexOf('./') === 0 || name.indexOf('../') === 0;
      if (index !== -1 && (!isRelative || index > 1)) {
        modName = name.substring(0, index);
        ext = name.substring(index + 1);
      } else {
        modName = name;
      }
      temp = ext || modName;
      index = temp.indexOf('!');
      if (index !== -1) {
        //Pull off the strip arg.
        strip = temp.substring(index + 1) === 'strip';
        temp = temp.substring(0, index);
        if (ext) {
          ext = temp;
        } else {
          modName = temp;
        }
      }
      return {
        moduleName: modName,
        ext: ext,
        strip: strip
      };
    },
    xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,
    /**
     * Is an URL on another domain. Only works for browser use, returns
     * false in non-browser environments. Only used to know if an
     * optimized .js version of a text resource should be loaded
     * instead.
     * @param {String} url
     * @returns Boolean
     */
    useXhr: function (url, protocol, hostname, port) {
      var uProtocol, uHostName, uPort, match = text.xdRegExp.exec(url);
      if (!match) {
        return true;
      }
      uProtocol = match[2];
      uHostName = match[3];
      uHostName = uHostName.split(':');
      uPort = uHostName[1];
      uHostName = uHostName[0];
      return (!uProtocol || uProtocol === protocol) && (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) && (!uPort && !uHostName || uPort === port);
    },
    finishLoad: function (name, strip, content, onLoad) {
      content = strip ? text.strip(content) : content;
      if (masterConfig.isBuild) {
        buildMap[name] = content;
      }
      onLoad(content);
    },
    load: function (name, req, onLoad, config) {
      //Name has format: some.module.filext!strip
      //The strip part is optional.
      //if strip is present, then that means only get the string contents
      //inside a body tag in an HTML string. For XML/SVG content it means
      //removing the <?xml ...?> declarations so the content can be inserted
      //into the current doc without problems.
      // Do not bother with the work if a build and text will
      // not be inlined.
      if (config && config.isBuild && !config.inlineText) {
        onLoad();
        return;
      }
      masterConfig.isBuild = config && config.isBuild;
      var parsed = text.parseName(name), nonStripName = parsed.moduleName + (parsed.ext ? '.' + parsed.ext : ''), url = req.toUrl(nonStripName), useXhr = masterConfig.useXhr || text.useXhr;
      // Do not load if it is an empty: url
      if (url.indexOf('empty:') === 0) {
        onLoad();
        return;
      }
      //Load the text. Use XHR if possible and in a browser.
      if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
        text.get(url, function (content) {
          text.finishLoad(name, parsed.strip, content, onLoad);
        }, function (err) {
          if (onLoad.error) {
            onLoad.error(err);
          }
        });
      } else {
        //Need to fetch the resource across domains. Assume
        //the resource has been optimized into a JS module. Fetch
        //by the module name + extension, but do not include the
        //!strip part to avoid file system issues.
        req([nonStripName], function (content) {
          text.finishLoad(parsed.moduleName + '.' + parsed.ext, parsed.strip, content, onLoad);
        });
      }
    },
    write: function (pluginName, moduleName, write, config) {
      if (buildMap.hasOwnProperty(moduleName)) {
        var content = text.jsEscape(buildMap[moduleName]);
        write.asModule(pluginName + '!' + moduleName, 'define(function () { return \'' + content + '\';});\n');
      }
    },
    writeFile: function (pluginName, moduleName, req, write, config) {
      var parsed = text.parseName(moduleName), extPart = parsed.ext ? '.' + parsed.ext : '', nonStripName = parsed.moduleName + extPart,
        //Use a '.js' file name so that it indicates it is a
        //script that can be loaded across domains.
        fileName = req.toUrl(parsed.moduleName + extPart) + '.js';
      //Leverage own load() method to load plugin value, but only
      //write out values that do not have the strip argument,
      //to avoid any potential issues with ! in file names.
      text.load(nonStripName, req, function (value) {
        //Use own write() method to construct full module value.
        //But need to create shell that translates writeFile's
        //write() to the right interface.
        var textWrite = function (contents) {
          return write(fileName, contents);
        };
        textWrite.asModule = function (moduleName, contents) {
          return write.asModule(moduleName, fileName, contents);
        };
        text.write(pluginName, nonStripName, textWrite, config);
      }, config);
    }
  };
  if (masterConfig.env === 'node' || !masterConfig.env && typeof process !== 'undefined' && process.versions && !!process.versions.node && !process.versions['node-webkit']) {
    //Using special require.nodeRequire, something added by r.js.
    fs = require.nodeRequire('fs');
    text.get = function (url, callback, errback) {
      try {
        var file = fs.readFileSync(url, 'utf8');
        //Remove BOM (Byte Mark Order) from utf8 files if it is there.
        if (file[0] === '\uFEFF') {
          file = file.substring(1);
        }
        callback(file);
      } catch (e) {
        if (errback) {
          errback(e);
        }
      }
    };
  } else if (masterConfig.env === 'xhr' || !masterConfig.env && text.createXhr()) {
    text.get = function (url, callback, errback, headers) {
      var xhr = text.createXhr(), header;
      xhr.open('GET', url, true);
      //Allow plugins direct access to xhr headers
      if (headers) {
        for (header in headers) {
          if (headers.hasOwnProperty(header)) {
            xhr.setRequestHeader(header.toLowerCase(), headers[header]);
          }
        }
      }
      //Allow overrides specified in config
      if (masterConfig.onXhr) {
        masterConfig.onXhr(xhr, url);
      }
      xhr.onreadystatechange = function (evt) {
        var status, err;
        //Do not explicitly handle errors, those should be
        //visible via console output in the browser.
        if (xhr.readyState === 4) {
          status = xhr.status || 0;
          if (status > 399 && status < 600) {
            //An http 4xx or 5xx error. Signal an error.
            err = new Error(url + ' HTTP status: ' + status);
            err.xhr = xhr;
            if (errback) {
              errback(err);
            }
          } else {
            callback(xhr.responseText);
          }
          if (masterConfig.onXhrComplete) {
            masterConfig.onXhrComplete(xhr, url);
          }
        }
      };
      xhr.send(null);
    };
  } else if (masterConfig.env === 'rhino' || !masterConfig.env && typeof Packages !== 'undefined' && typeof java !== 'undefined') {
    //Why Java, why is this so awkward?
    text.get = function (url, callback) {
      var stringBuffer, line, encoding = 'utf-8', file = new java.io.File(url), lineSeparator = java.lang.System.getProperty('line.separator'), input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)), content = '';
      try {
        stringBuffer = new java.lang.StringBuffer();
        line = input.readLine();
        // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
        // http://www.unicode.org/faq/utf_bom.html
        // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
        if (line && line.length() && line.charAt(0) === 65279) {
          // Eat the BOM, since we've already found the encoding on this file,
          // and we plan to concatenating this buffer with others; the BOM should
          // only appear at the top of a file.
          line = line.substring(1);
        }
        if (line !== null) {
          stringBuffer.append(line);
        }
        while ((line = input.readLine()) !== null) {
          stringBuffer.append(lineSeparator);
          stringBuffer.append(line);
        }
        //Make sure we return a JavaScript string and not a Java string.
        content = String(stringBuffer.toString());  //String
      } finally {
        input.close();
      }
      callback(content);
    };
  } else if (masterConfig.env === 'xpconnect' || !masterConfig.env && typeof Components !== 'undefined' && Components.classes && Components.interfaces) {
    //Avert your gaze!
    Cc = Components.classes;
    Ci = Components.interfaces;
    Components.utils['import']('resource://gre/modules/FileUtils.jsm');
    xpcIsWindows = '@mozilla.org/windows-registry-key;1' in Cc;
    text.get = function (url, callback) {
      var inStream, convertStream, fileObj, readData = {};
      if (xpcIsWindows) {
        url = url.replace(/\//g, '\\');
      }
      fileObj = new FileUtils.File(url);
      //XPCOM, you so crazy
      try {
        inStream = Cc['@mozilla.org/network/file-input-stream;1'].createInstance(Ci.nsIFileInputStream);
        inStream.init(fileObj, 1, 0, false);
        convertStream = Cc['@mozilla.org/intl/converter-input-stream;1'].createInstance(Ci.nsIConverterInputStream);
        convertStream.init(inStream, 'utf-8', inStream.available(), Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);
        convertStream.readString(inStream.available(), readData);
        convertStream.close();
        inStream.close();
        callback(readData.value);
      } catch (e) {
        throw new Error((fileObj && fileObj.path || '') + ': ' + e);
      }
    };
  }
  return text;
}({});
oh_text_templates_dot_tool_tiphtml = '<h2 class"title">\n  <%= title %>\n</h2>\n<p class="legend">Date: <%= new Date(data[0]).toLocaleDateString() + \' \' + new Date(data[0]).toLocaleTimeString().replace(/\\:\\d\\d\\s/,\' \') %></p>\n<p class="legend"><%= xField.slice(0, 1).toUpperCase() + xField.slice(1) %>: <%= d3.format(scatter.options.format)(data[1]) %></p>\n<p class="legend"><%= yField.slice(0, 1).toUpperCase() + yField.slice(1) %>: <%= d3.format(scatter.options.format)(data[2]) %></p>\n<% if (zField) { %>\n<p class="legend"><%= zField.slice(0, 1).toUpperCase() + zField.slice(1) %>: <%= d3.format(scatter.options.format)(data[3]) %></p>\n<% } %>\n</p>\n';
oh_text_templates_history_dot_tool_tiphtml = '<span>\n    <img class="topmenuico" src="/images/ico-topmenuuser.png"><% print(bn.utils.timeago.inWords(new Date().getTime() - data[0])) %>\n</span>\n';
oh_visualization_lib_d3extensions = {
  moveToFront: function (selection) {
    return selection.each(function () {
      this.parentNode.appendChild(this);
    });
  },
  moveToBack: function (selection) {
    return selection.each(function () {
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
    });
  },
  // by Johan.
  moveBehind: function (selection, before) {
    return selection.each(function () {
      this.parentNode.insertBefore(this, before);
    });
  },
  moveInFront: function (selection, after) {
    return selection.each(function () {
      this.parentNode.insertBefore(this, after.nextSibling);
    });
  }
};
oh_visualization_motion_scatter = function (Openhose, dotToolTipTemplate, historyDotToolTipTemplate, d3Extensions) {
  var View = Openhose.Backbone.View.extend({
    className: 'visualization motion-scatter',
    controlsTemplate: '<div class="graph-container"></div>' + '<div class="controls scatter-controls">' + '<button class="history-animation-play-pause"><span class="icon play play-pause-icon"></span></button>' + '<div class="time-line" style="height: 100px"></div>' + '</div>',
    defaults: {
      legend: true,
      format: ',.1',
      xScale: 'linear',
      yScale: 'linear',
      zScale: 'sqrt'
    },
    // Options available:
    // ==================
    //
    // data
    // events             backbone events
    // legend: true       show labels
    // format             d3 format string
    // colors             d3 color scheme
    // width              widget size
    // height
    // xScale: linear     Scale type: linear, sqrt, pow or log
    // yScale: linear     Scale type: linear, sqrt, pow or log
    // zScale: sqrt       Scale type: linear, sqrt, pow or log
    // autoplay           Start playing when done loading
    // xField             Specify what field to put on x Axis (eg. 'volume')
    // yField             Specify what field to put on y Axis
    // zField             Specify what field to put on z Axis
    // xFieldName         Use this label on the x axis
    // yFieldName         Use this label on the y axis
    initialize: function (options) {
      this.options = _.extend({}, this.defaults, options);
      if (options.events)
        this.events = _.extend(this.events, options.events);
      this.metrics = options.metrics;
      this.period = options.period;
      this.height = options.height;
      this.width = options.width;
      this.xField = options.xField;
      this.yField = options.yField;
      this.zField = options.zField;
      this.playing = false;
      this.$timeText = null;
      this.animationTimeout = null;
      this.$el.append(this.controlsTemplate);
      this.color = this.options.colors || d3.scale.category20b();
      this.$el.find('.history-animation-play-pause').click(this._togglePlay.bind(this));
      this.animateButton = this.$el.find('.play-pause-icon');
      this.appendix = '';
      this.isRendered = false;
      this.step = 0;
      if (this.options.data) {
        this.data = this.options.data.values;
      }
    },
    render: function () {
      this.xField = this.xField || this.data[0].xField;
      this.yField = this.yField || this.data[0].yField || this.xField;
      this.zField = this.zField || this.data[0].zField || this.xField;
      if (this.isRendered) {
        this._renderAxis();
        this._renderBalls();
        return;
      }
      if (!this.$el.is(':visible')) {
        return setTimeout(this.render.bind(this), 100);
      }
      var parent = this.$el.closest('.openhose-widget');
      if (!parent.length)
        parent = this.$el.parent();
      var margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 40
      };
      var width = this.$el.width() - 102 - margin.left - margin.right;
      var height = (this.height || parent.height()) - margin.top - margin.bottom - 45;
      this.margin = margin;
      this.width = width;
      this.height = height;
      function scaleCreator(style, range) {
        var scale;
        switch (style) {
        case 'sqrt':
          scale = d3.scale.sqrt();
          break;
        case 'pow':
          scale = d3.scale.pow();
          break;
        case 'log':
          scale = d3.scale.log();
          break;
        default:
          scale = d3.scale.linear();
          break;
        }
        scale.range(range);
        return scale;
      }
      this.x = scaleCreator(this.options.xScale, [
        0,
        width
      ]);
      this.y = scaleCreator(this.options.yScale, [
        height,
        0
      ]);
      this.z = scaleCreator(this.options.zScale, [
        5,
        40
      ]);
      // min / max dot size // TODO: make me configurable
      d3.select(this.el.getElementsByClassName('graph-container')[0]).attr('style', 'height:' + (height + 30) + 'px;');
      var svg = d3.select(this.el.getElementsByClassName('graph-container')[0]).append('svg').attr('style', 'height:' + (height + 40) + '; margin-bottom:20px;').append('g').attr('pointer-events', 'all').append('svg:g').append('svg:g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
      this.svg = svg;
      //var timeScaleSvg = d3.select(this.el.getElementsByClassName("scatter-history-slider-scale")[0])
      //  .append("svg")
      //    .attr('style', 'height: 30px;')
      //  .append("g");
      //this.timeScaleSvg = timeScaleSvg;
      d3.select(this.el).append('div').attr('class', 'tooltip-container').attr('position', 'fixed').attr('top', '0px').attr('left', '0px').attr('height', '100%').attr('width', '100%');
      d3.select(this.el).append('div').attr('class', 'history-tooltip-container').attr('position', 'fixed').attr('top', '0px').attr('left', '0px');
      svg.append('svg:rect').attr('width', width).attr('height', height).attr('class', 'background').attr('fill', 'white');
      var topics = this.data;
      var xMin = d3.min(topics, function (t) {
        return d3.min(t.data, function (d) {
          return d[1];
        });
      });
      var xMax = d3.max(topics, function (t) {
        return d3.max(t.data, function (d) {
          return d[1];
        });
      });
      var yMin = d3.min(topics, function (t) {
        return d3.min(t.data, function (d) {
          return d[2];
        });
      });
      var yMax = d3.max(topics, function (t) {
        return d3.max(t.data, function (d) {
          return d[2];
        });
      });
      var zMin = d3.min(topics, function (t) {
        return d3.min(t.data, function (d) {
          return d[3];
        });
      });
      var zMax = d3.max(topics, function (t) {
        return d3.max(t.data, function (d) {
          return d[3];
        });
      });
      this.x.domain([
        xMin,
        xMax
      ]);
      this.y.domain([
        yMin,
        yMax
      ]);
      this.z.domain([
        zMin,
        zMax
      ]);
      var period = this.data[0].period;
      this.subDataLength = this.data[0].data.length;
      var timeLineX = d3.scale.linear().domain([
        0,
        this.subDataLength
      ]).range([
        period.get('start'),
        period.get('end') + 1
      ]);
      var snapGrid = Openhose._.range(this.subDataLength).map(function (i) {
        return timeLineX(i);
      });
      // render timeline
      this.timeLine = new Openhose.Visualization.TimeLine({
        el: this.$('.time-line'),
        period: period,
        data: { values: [] },
        onClick: this._onClickTimeLine.bind(this),
        snapGrid: snapGrid
      });
      this.timeLine.render2();
      this._changeValue(this.subDataLength - 1);
      this._showTime(this.subDataLength - 1);
      // draw axis
      this._renderAxis();
      if (this.options.legend) {
        // draw legend.
        this._renderLegend();
      }
      this.isRendered = true;
      if (this.options.autoplay) {
        this._togglePlay();
      }
    },
    _renderLegend: function () {
      var legend = this.svg.selectAll('.legend').data(this.data).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
        return 'translate(0,' + i * 20 + ')';
      });
      legend.append('rect').attr('x', this.width + 120 - 18).attr('class', 'legend-rect').attr('data-id', function (d) {
        return 'legend-rect-' + this._classNameForTitle(d.title);
      }.bind(this)).attr('width', 18).attr('height', 18).style('fill', function (d) {
        return this.color(d.title);
      }.bind(this)).on('mouseover', function (d) {
        this.highlightNode(d);
      }.bind(this)).on('mouseout', function (d) {
        this.unHighlightNode(d);
      }.bind(this));
      legend.append('text').attr('x', this.width + 120 - 24).attr('y', 9).attr('dy', '.35em').attr('class', 'legend-text').attr('data-id', function (d) {
        return 'legend-text-' + this._classNameForTitle(d.title);
      }.bind(this)).style('text-anchor', 'end').text(function (d) {
        return d.title;
      }).on('mouseover', function (d) {
        this.highlightNode(d);
      }.bind(this)).on('mouseout', function (d) {
        this.unHighlightNode(d);
      }.bind(this));
    },
    _updateTimeLine: function (data, currentSlot) {
      var time = this.data[0].data[currentSlot][0];
      this.timeLine.updatePosition({ date: time });
    },
    _onClickTimeLine: function (date, slot) {
      this._changeValue(slot);
    },
    renderGraph: function (currentSlot) {
      if (currentSlot !== undefined) {
        if (this.currentSlot !== undefined) {
          currentSlot = this.currentSlot;
        } else {
          currentSlot = this.subDataLength - 1;
        }
      }
      this._updateTimeLine(this.data, currentSlot);
      this._renderAxis(this.data);
      this._renderBalls(this.data, currentSlot);
    },
    _renderAxis: function () {
      this.svg.selectAll('.x.gridline, .x.axis, .x-grid').remove();
      this.svg.selectAll('.y.gridline, .y.axis, .y-grid').remove();
      var xAxis = d3.svg.axis().scale(this.x).tickSize(6, 0).tickFormat(function (d) {
        return this._prettyNumber(d);
      }.bind(this)).orient('bottom');
      var yAxis = d3.svg.axis().scale(this.y).tickFormat(function (d) {
        return this._prettyNumber(d);
      }.bind(this)).orient('left');
      // Determine location of x axis. It should be at y 0 when 0 is in the range.
      var xAxisLocation = this.height;
      if (0 > this.y.domain()[0] && 0 < this.y.domain()[1]) {
        xAxisLocation = this.y(0);
      }
      this.svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + xAxisLocation + ')').call(xAxis).append('text').attr('class', 'label').attr('x', this.width).attr('y', -6).style('text-anchor', 'end').text(this.options.xFieldName || this.xField.slice(0, 1).toUpperCase() + this.xField.slice(1) + this.appendix);
      this.svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr('class', 'label').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text(this.options.yFieldName || this.yField.slice(0, 1).toUpperCase() + this.yField.slice(1) + this.appendix);
      var backgroundEl = $(this.svg[0]).find('.background')[0];
      // fetch the translations of the ticks so we can use them ourselves.
      var $svg = $(this.svg[0]);
      var xTicks = $svg.find('.x.axis .tick.major');
      var xTicksTranslations = xTicks.map(function () {
        return this.getAttribute('transform');
      });
      var yTicks = $svg.find('.y.axis .tick.major');
      var yTicksTranslations = yTicks.map(function () {
        return this.getAttribute('transform');
      });
      // create container groups for the lines
      var xGrid = this.svg.append('g').attr('class', 'x-grid').attr('transform', 'translate(0, ' + this.height + ')');
      var yGrid = this.svg.append('g').attr('class', 'y-grid');
      // create the lines and use the translations.
      xGrid.selectAll('.x.axis .tick.major').data(xTicksTranslations).enter().append('line').attr('class', 'x gridline').attr('transform', function (d) {
        return d;
      }).attr('x2', 0).attr('y2', -this.height);
      yGrid.selectAll('.y.axis .tick.major').data(yTicksTranslations).enter().append('line').attr('class', 'y gridline').attr('transform', function (d) {
        return d;
      }).attr('x2', this.width).attr('y2', 0);
      xGrid.call(function (selection) {
        d3Extensions.moveInFront(selection, backgroundEl);
      });
      yGrid.call(function (selection) {
        d3Extensions.moveInFront(selection, backgroundEl);
      });
    },
    walkTheTimes: function () {
      var value;
      try {
        value = this.step;
      } catch (err) {
        return;
      }
      value++;
      if (value > this.subDataLength - 1) {
        value = 0;
      }
      this.step = value;
      this._changeValue(value);
      this._showTime(value);
      this.animationTimeout = setTimeout(this.walkTheTimes.bind(this), 1000);
    },
    drawArrowsBetweenDots: function (dots, color) {
      var lineStrings = [];
      var xAxisEl = $(this.svg[0]).find('.axis')[0];
      if (dots.length > 1) {
        var prevPointX = this.x(dots[0][1]);
        var prevPointY = this.y(dots[0][2]);
        var sliced = dots.slice(1, dots.length);
        for (var i in sliced) {
          var lineString = this.getArrow(prevPointX, prevPointY, this.x(sliced[i][1]), this.y(sliced[i][2]));
          lineStrings.push(lineString);
          prevPointX = this.x(sliced[i][1]);
          prevPointY = this.y(sliced[i][2]);
        }
      }
      var paths = this.svg.selectAll('.scatter-trail-arrow').data(lineStrings);
      paths.enter().append('svg:path').attr('class', 'scatter-trail-arrow').attr('opacity', '0').attr('stroke', color).attr('fill', color).attr('d', function (d) {
        return d;
      });
      paths.exit().transition().attr('opacity', '0').remove();
      paths.call(function (selection) {
        d3Extensions.moveBehind(selection, xAxisEl);
      }).transition().attr('opacity', '1').attr('stroke', color).attr('fill', color).attr('d', function (d) {
        return d;
      });
    },
    // return a arrow between 2 points in the middle.
    getArrow: function (sourceX, sourceY, targetX, targetY) {
      var d3LineLinear = d3.svg.line().interpolate('linear');
      var points = [];
      var arrowSize = 4;
      var quarterAngle = Math.PI / 2;
      var angle = Math.atan2(targetY - sourceY, targetX - sourceX);
      var midpointsX = sourceX - (sourceX - targetX) / 2;
      var midpointsY = sourceY - (sourceY - targetY) / 2;
      var backPointX = midpointsX + Math.cos(angle - Math.PI) * arrowSize;
      var backPointY = midpointsY + Math.sin(angle - Math.PI) * arrowSize;
      // get the 90 degree angle
      var lineAngle = angle - quarterAngle;
      points.push([
        backPointX + Math.cos(lineAngle) * arrowSize,
        backPointY + Math.sin(lineAngle) * arrowSize
      ]);
      points.push([
        midpointsX,
        midpointsY
      ]);
      points.push([
        backPointX - Math.cos(lineAngle) * arrowSize,
        backPointY - Math.sin(lineAngle) * arrowSize
      ]);
      // original line
      var pointString = d3LineLinear(points);
      return pointString + 'z';
    },
    _renderBalls: function (graphData, currentSlot) {
      var animationLength = 1000;
      var dots = this.svg.selectAll('.dot').data(graphData, function (d) {
        return d.title;
      });
      dots.enter().append('circle').attr('class', function (d) {
        return 'dot dot-' + this._classNameForTitle(d.title);
      }.bind(this)).attr('data-id', function (d) {
        return 'dot-' + this._classNameForTitle(d.title);
      }.bind(this)).attr('r', 0)  // 0 for a nice fade in effect.
.attr('cx', function (d) {
        return this.x(d.data[currentSlot] ? d.data[currentSlot][1] : 0);
      }.bind(this)).attr('cy', function (d) {
        return this.y(d.data[currentSlot] ? d.data[currentSlot][2] : 0);
      }.bind(this)).style('fill', function (d) {
        return this.color(d.title);
      }.bind(this)).on('mouseover', function (d) {
        this.highlightNode(d);
      }.bind(this)).on('mouseout', function (d) {
        this.unHighlightNode(d);
      }.bind(this));
      dots.transition().duration(animationLength).attr('r', function (d) {
        return this.z(d.data[currentSlot] ? d.data[currentSlot][3] : 0);
      }.bind(this)).attr('cx', function (d) {
        return this.x(d.data[currentSlot] ? d.data[currentSlot][1] : 0);
      }.bind(this)).attr('cy', function (d) {
        return this.y(d.data[currentSlot] ? d.data[currentSlot][2] : 0) || 0;
      }.bind(this));
    },
    _renderControlsStates: function () {
    },
    destroy: function () {
      this.remove();
      clearTimeout(this.animationTimeout);
    },
    _classNameForTitle: function (title) {
      title = title.replace(/[\$\#\:\;\"\'\+\=\{\}\[\]\\\/]/g, '');
      title = title.replace(/\s+/g, '-');
      title = title.replace(/\./g, '_');
      return title;
    },
    _togglePlay: function () {
      if (this.playing) {
        // pause
        this.animateButton.attr('class', 'icon play');
        clearTimeout(this.animationTimeout);
        this.playing = false;
      } else {
        // start playing
        this.animateButton.attr('class', 'icon pause');
        this.removeHistoryDots();
        this.walkTheTimes();
        this.playing = true;
      }
    },
    _changeValue: function (currentSlot) {
      this.currentSlot = currentSlot;
      this.renderGraph(currentSlot);
    },
    _showTime: function (slice) {
    },
    getLocationForDot: function (id) {
      var dot = this.svg.selectAll(id)[0];
      if (!dot) {
        // cannot find dot
        return {};
      }
      dot = dot[0];
      var dotLocation = {};
      var dotOffset = $(dot).offset();
      var dotSize = dot.getBoundingClientRect();
      dotLocation.left = dotOffset.left;
      dotLocation.right = dotOffset.left + dotSize.width;
      dotLocation.top = dotOffset.top;
      dotLocation.bottom = dotOffset.top + dotSize.height;
      dotLocation.width = dotSize.width;
      dotLocation.height = dotSize.height;
      return dotLocation;
    },
    toolTipsForNode: function (data) {
      var dotLocation = this.getLocationForDot('[data-id=dot-' + this._classNameForTitle(data.title) + ']');
      var templateData = { 'data': data.data[this.currentSlot] };
      templateData.title = data.title;
      templateData.xField = this.xField;
      templateData.yField = this.yField;
      if (this.xField == this.zField) {
        templateData.zField = false;
      } else {
        templateData.zField = this.zField;
      }
      templateData.scatter = this;
      d3.select('body').select('.tooltip-container').append('div').style('position', 'fixed').style('z-index', '100').style('top', dotLocation.top + Math.round(dotLocation.height / 2) - 12 + 'px').style('left', dotLocation.right + 4 + 'px').attr('class', 'tooltip tooltip-' + this._classNameForTitle(data.title)).html(function () {
        return Openhose._.template(dotToolTipTemplate)(templateData);
      }.bind(this));
    },
    removeToolTipsForNode: function (data) {
      $('.tooltip-' + this._classNameForTitle(data.title)).remove();
      $('.tooltip-history-' + this._classNameForTitle(data.title)).remove();
    },
    highlightNode: function (d) {
      if (this.playing) {
        return;
      }
      var faded = '0.2';
      var xAxisEl = $(this.svg[0]).find('.axis')[0];
      //this.showHistoryDots(d);
      this.drawArrowsBetweenDots(d.data, this.color(d.title));
      this.svg.selectAll('.history-path-' + this._classNameForTitle(d.title)).call(function (selection) {
        d3Extensions.moveBehind(selection, xAxisEl);
      }).attr('opacity', '0.7');
      // fade out all dots, except the current one.
      this.svg.selectAll('.dot:not([data-id=dot-' + this._classNameForTitle(d.title) + '])').attr('opacity', faded);
      // move current dot to the front.
      this.svg.selectAll('[data-id=dot-' + this._classNameForTitle(d.title) + ']').call(function (selection) {
        d3Extensions.moveBehind(selection, xAxisEl);
      });
      this.svg.selectAll('.legend-rect:not([data-id=legend-rect-' + this._classNameForTitle(d.title) + '])').transition().attr('opacity', faded);
      this.svg.selectAll('.legend-text:not([data-id=legend-text-' + this._classNameForTitle(d.title) + '])').transition().attr('opacity', faded);
      this.toolTipsForNode(d);
      this.showTrail(d);
    },
    removeTrails: function () {
      this.svg.selectAll('.scatter-dottrail').transition().attr('opacity', '0').remove();
    },
    showTrail: function (data) {
      var line = d3.svg.line().x(function (d) {
        return this.x(d[1]);
      }.bind(this)).y(function (d) {
        return this.y(d[2]);
      }.bind(this)).interpolate('linear');
      var lineData = data.data.map(function (v, i, a) {
        if (i >= a.length)
          return;
        return [
          v,
          a[i + 1]
        ];
      });
      lineData.pop();
      // last item is always undefined
      var trails = this.svg.selectAll('.scatter-dottrail').data(lineData);
      trails.enter().append('path').attr('class', 'scatter-dottrail').attr('opacity', 0);
      trails.attr('stroke', function (d, i) {
        // lighter or darker depending on time frame
        if (i < this.currentSlot) {
          return this.brighterStepColor(this.color(data.title), this.currentSlot, this.currentSlot - i);
        } else {
          return this.darkerStepColor(this.color(data.title), data.data.length - this.currentSlot, data.data.length - this.currentSlot - i);
        }
      }.bind(this)).attr('d', function (d) {
        return line(d);
      }).call(function (selection) {
        d3Extensions.moveInFront(selection, $(this).closest('svg').find('.x-grid')[0]);
      }).transition().attr('opacity', 1);
      trails.exit().transition().attr('opacity', 0).remove();
    },
    unHighlightNode: function (d) {
      this.svg.selectAll('.dot:not([data-id=dot-' + this._classNameForTitle(d.title) + '])').attr('opacity', '1');
      this.svg.selectAll('.legend-rect:not([data-id=legend-rect-' + this._classNameForTitle(d.title) + '])').transition().attr('opacity', '1');
      this.svg.selectAll('.legend-text:not([data-id=legend-text-' + this._classNameForTitle(d.title) + '])').transition().attr('opacity', '1');
      this.removeToolTipsForNode(d);
      this.removeHistoryDots();
      this.removeTrails();
    },
    removeHistoryDots: function () {
      var dots = [];
      var histdots = this.svg.selectAll('.history-dot').data(dots);
      histdots.exit().attr('opacity', '0').remove();
      this.drawArrowsBetweenDots([]);
    },
    showHistoryDots: function (data) {
      var startSlot = Math.min(this.currentSlot - 2, this.currentSlot);
      var endSlot = Math.max(this.currentSlot + 2, this.currentSlot);
      var start = data.data.slice(startSlot, this.currentSlot);
      var end = data.data.slice(this.currentSlot + 1, endSlot + 1);
      var dots = start.concat(end);
      var xAxisEl = $(this.svg[0]).find('.axis')[0];
      var histdots = this.svg.selectAll('.history-dot').data(dots);
      histdots.enter().append('circle').attr('opacity', '0').style('stroke', 'black').attr('class', 'history-dot').attr('cx', function (d) {
        return this.x(d[1]);
      }.bind(this)).attr('cy', function (d) {
        return this.y(d[2]);
      }.bind(this));
      histdots.exit().attr('opacity', '0').remove();
      histdots.call(function (selection) {
        d3Extensions.moveBehind(selection, xAxisEl);
      }).transition()  //.attr("r", function(d, i) { return this.z(d[3]); }.bind(this))
.attr('r', 4).attr('opacity', '1').attr('id', 'history-dot').attr('cx', function (d) {
        return this.x(d[1]);
      }.bind(this)).attr('cy', function (d) {
        return this.y(d[2]);
      }.bind(this)).style('fill', function (d, i) {
        if (i < dots.length / 2) {
          return this.brighterStepColor(this.color(data.title), dots.length / 2, dots.length / 2 - i);
        } else {
          return this.darkerStepColor(this.color(data.title), dots.length / 2, dots.length / 2 - i);
        }
      }.bind(this));
    },
    darkerStepColor: function (startColor, range, count) {
      var hslColor = d3.hsl(startColor);
      var step = hslColor.l / range;
      // amount per step
      hslColor.l = hslColor.l + step * count;
      return hslColor;
    },
    brighterStepColor: function (startColor, range, count) {
      var hslColor = d3.hsl(startColor);
      var step = (0.9 - hslColor.l) / range;
      // diff to full l, divided by range
      hslColor.l = hslColor.l + step * count;
      return hslColor;
    },
    _prettyNumber: function (number) {
      if (!number) {
        if (!number) {
          return '';
        }
      }
      if (number > 980000 || number < -980000) {
        return d3.format(this.options.format)(Math.round(number / 1000 / 1000)) + 'mm';
      }
      if (number > 10000 || number < -10000) {
        return d3.format(this.options.format)(Math.round(number / 1000)) + 'k';
      }
      return d3.format(this.options.format)(number);
    }
  });
  // non instance functions.
  View.validate = function (metrics, dimensions) {
    var validated = false;
    var error = null;
    // embed does one dimension, one metric
    if (metrics.length === 1 && dimensions.length === 1) {
      validated = true;
    }
    // tab graph does not pass a dimension, but multiple metrics
    if (metrics.length > 1 && dimensions.length === 0) {
      validated = true;
    }
    if (!validated) {
      error = 'Motions Scatter needs one metrics and one dimension. Or multiple metrics and no dimensions.';
    }
    return [
      validated,
      error
    ];
  };
  return View;
}(oh_core, oh_text_templates_dot_tool_tiphtml, oh_text_templates_history_dot_tool_tiphtml, oh_visualization_lib_d3extensions);
oh_visualization_main = function (Openhose, Number, LeaderBoard, Pie, Line, Area, StackedBar, TimeLine, Table, MotionScatter) {
  var subModules = {};
  subModules.Number = Number;
  subModules.LeaderBoard = LeaderBoard;
  subModules.Pie = Pie;
  subModules.Line = Line;
  subModules.TimeLine = TimeLine;
  subModules.Area = Area;
  subModules.StackedBar = StackedBar;
  subModules.Table = Table;
  subModules.MotionScatter = MotionScatter;
  Openhose.Visualization = subModules;
  return Openhose.Visualization;
}(oh_core, oh_visualization_number, oh_visualization_leaderboard, oh_visualization_pie, oh_visualization_line, oh_visualization_area, oh_visualization_stacked_bar, oh_visualization_time_line, oh_visualization_table, oh_visualization_motion_scatter);
oh_processor_analytics_mixin = function (Openhose, Utils) {
  return {
    _offsetByOneBucket: function (timeline, period) {
      return (timeline || []).map(function (v) {
        // add one bucket to the timestamp.
        period = period || this.period;
        v[0] = period.incrementMomentByBucket(Openhose.moment(v[0]).tz(period.timezone()));
        return v;
      }.bind(this));
    },
    _alignSegments: function (alignMetrics, segments) {
      // TODO: remove invocation of _alignSegments
      return segments;
    },
    _fillMissingGaps: function (period, values) {
      return values;  // Seems like this is not needed anymore:
                      //
                      // if (!values.length) {
                      //   // give it a starting value
                      //   values = [[period.timeframe().start, 0, 0]];
                      //   console.warn("got an empty metric, zeroing it out.", values);
                      // }
                      // if (!values.length) return values;
                      // var numberOfSummaries = period.getNumSummariesToFetch();
                      // if (numberOfSummaries == values.length) {
                      //   return values;
                      // }
                      // var bucketTs = period.getBucketMs();
                      // var firstTs = Openhose.moment(values[0][0]).tz(period.timezone());
                      // var nextTs = period.toMoments().start;
                      // var bucket = period.getBucket();
                      // if (bucket == 'day') {
                      //   nextTs.hour(firstTs.hour()).startOf('hour');
                      // } else if(bucket == 'hour') {
                      //   nextTs.startOf('hour');
                      // }
                      // nextTs = nextTs.valueOf();
                      // //because the api doesn't always return timestamps with the same interval (DST)
                      // //we attempt to make it a range to protect against that
                      // var isWithInRange = function(wantedValue){
                      //   var min = wantedValue - bucketTs/4;
                      //   var max = wantedValue + bucketTs/4;
                      //   return Openhose._.find(values, function(i){
                      //     return max > i[0] && min < i[0];
                      //   });
                      // };
                      // var results = [];
                      // var v;
                      // var rangeFailureCount = 0;
                      // for(var i = 0; i < numberOfSummaries; i++) {
                      //   v = isWithInRange(nextTs);
                      //   if (v) {
                      //     results.push(v);
                      //   } else {
                      //     rangeFailureCount++;
                      //     results.push([nextTs, 0, 0]);
                      //   }
                      //   nextTs = nextTs + bucketTs;
                      // }
                      // return  Openhose._.sortBy(results, function(v){ return v[0]; });
    },
    timelineSegmentsForDimension: function (dimensions, options) {
      var segments = [];
      var context = options.context;
      var doOffsetOneBucket = options.doOffsetOneBucket || true;
      dimensions[0].metrics.forEach(function (metric) {
        var timeline = metric.timeline();
        var values = this._fillMissingGaps(metric.period, timeline);
        values = doOffsetOneBucket ? this._offsetByOneBucket(values, metric.period) : values;
        segments.push({
          label: metric.getLabel({ context: context }),
          values: values,
          period: metric.period
        });
      }.bind(this));
      return this._alignSegments(dimensions[0].metrics, segments);
    },
    _psychProfileSegments: function (callback) {
      this.metrics[0].zeroFillPsychHeatmap();
      var metrics = bn.utils.analytics.metricsByCategory('social-media', 'Psych');
      var metricNames = [
        'affection',
        'glory',
        'positive_affect',
        'restraint',
        'expressive_beh',
        'moral_imperative',
        'anxiety',
        'aggression',
        'sadness',
        'social_behavior'
      ];
      var segments = [];
      for (var level1key in metrics) {
        var level1children = metrics[level1key].children;
        if (level1children) {
          for (var level2key in level1children) {
            if (metricNames.indexOf(level2key) !== -1) {
              var metric = level1children[level2key];
              var segment;
              metric.metricId = level1key + '-' + level2key;
              metric.parentKey = level1key;
              if (callback && typeof callback == 'function') {
                segment = callback.call(this, metric);
              } else {
                segment = metric;
              }
              segments.push(segment);
            }
          }
        }
      }
      return segments.reverse();
    },
    // TODO: replace Special Exceptions with something more generic
    _timelineSegmentsForMetrics: function (metrics, options) {
      var doOffsetOneBucket = options.doOffsetOneBucket || true;
      metrics = metrics || this.metrics;
      var segments = [];
      //var filledMetric;
      // Special exception
      // if(metrics[0] && metrics[0].get('metricId') == 'sentimentHeatmap') {
      //
      //   metrics[0].zeroFillSentimentHeatmap();
      //   for(var i = -18; 18 >= i; i++) {
      //     if (!i) continue;
      //     filledMetric = this._fillMissingGaps(metrics[0].period, metrics[0].timeline('s' + i));
      //     segments.push({
      //       label: i + '',
      //       values: doOffsetOneBucket ? this._offsetByOneBucket(filledMetric) : filledMetric
      //     });
      //   }
      //   return this._alignSegments(metrics, segments);
      // }
      //
      // // Special exception 2
      // if (metrics[0] && metrics[0].get('metricId') == 'psychProfile') {
      //   segments = this._psychProfileSegments(function(metric) {
      //     filledMetric = this._fillMissingGaps(this.metrics[0].period, this.metrics[0].timeline(metric.metricId));
      //     return {
      //       label: metric.label,
      //       info: metric,
      //       values: doOffsetOneBucket ? this._offsetByOneBucket(filledMetric) : filledMetric
      //     };
      //   });
      //
      //   return this._alignSegments(metrics, segments);
      // }
      //
      // // Special exception 3
      // if(metrics[0] && metrics[0].get('metricId') == 'psychHeatmap') {
      //
      //   metrics[0].zeroFillPsychHeatmap();
      //
      //   var addPsych = function(info, metricId, parentKey) {
      //     info.metricId = metricId;
      //     info.parentKey = parentKey;
      //     segments.push({
      //       label: info.label,
      //       info: info,
      //       values: this._fillMissingGaps(metrics[0].period, metrics[0].timeline(metricId))
      //     });
      //   }.bind(this);
      //
      //   var psychMetrics = bn.utils.analytics.metricsByCategory('social-media', 'Psych');
      //   for (var level1key in psychMetrics) {
      //     addPsych(psychMetrics[level1key], level1key);
      //     if (psychMetrics[level1key].children) {
      //       for (var level2key in psychMetrics[level1key].children) {
      //         addPsych(psychMetrics[level1key].children[level2key], level1key+'-'+level2key, level1key);
      //         if (psychMetrics[level1key].children[level2key].children) {
      //           for (var level3key in psychMetrics[level1key].children[level2key].children) {
      //             addPsych(psychMetrics[level1key].children[level2key].children[level3key], level1key+'-'+level2key+'-'+level3key);
      //           }
      //         }
      //       }
      //     }
      //   }
      //
      //   return this._alignSegments(metrics, segments);
      // }
      var context = options.context;
      metrics.forEach(function (metric, i) {
        var tl = metric.timeline();
        var values = this._fillMissingGaps(metric.period, tl);
        if (metric.relativeMap) {
          this._fillRelativeValues(values, metric);
        }
        values = doOffsetOneBucket ? this._offsetByOneBucket(values, metric.period) : values;
        var segment = {
          label: metric.getLabel({ context: context }),
          period: metric.period,
          // TODO: do this for the other segments (above) too
          relativeValues: metric.relativeValues,
          values: values
        };
        if (metric.get('previousPeriod') && metric.collection.length) {
          //TODO: investigate if this fromISO isn't error prone, use moment instead
          var prevTs = Utils.fromISO(metric.collection.at(0).get('timestamp'));
          var currentTs = Utils.fromISO(metrics[i - 1].collection.at(0).get('timestamp'));
          segment.timeDelta = currentTs - prevTs;
          segment.isHistory = true;
          var moments = metric.period.toPreviousMoments();
          segment.label = segment.label + ' ' + Utils.getShortTimeRangeLabel(moments.start, moments.end);
        }
        segments.push(segment);
      }.bind(this));
      return this._alignSegments(metrics, segments);
    },
    _fillRelativeValues: function (values, metric) {
      var relativeValues = [];
      var tsMap = {};
      Object.keys(metric.relativeMap).map(function (x) {
        tsMap[Date.parse(x)] = metric.relativeMap[x];
      });
      for (var i = 0; i < values.length; i++) {
        var totalValue = tsMap[values[i][0].toString()];
        if (totalValue !== undefined) {
          relativeValues.push(values[i][1] / totalValue[metric.metricId]);
        } else {
          relativeValues.push(0);
        }
      }
      metric.relativeValues = relativeValues;
      return relativeValues;
    },
    _getLabelPrevious: function (timeline, metric, context) {
      if (!timeline.length) {
        return metric.getLabel({ context: context });
      }
      var prev = this.period.timeframePreviousPeriod();
      var start = Openhose.moment(prev.start).tz(this.period.timezone());
      var end = Openhose.moment(prev.end).tz(this.period.timezone());
      var label = bn.utils.getShortTimeRangeLabel(start, end);
      return metric.getLabel({ context: context }) + ' ' + label;
    },
    _segmentsForDimension: function () {
      var segments = [];
      this.dimensions[0].collection.forEach(function (summary) {
        summary = summary.toJSON ? summary.toJSON() : summary;
        if (this.options.filter && !this.options.filter(summary)) {
          return false;
        }
        var secondaryValues = {};
        var metricIds = this.dimensions[0].options.metrics;
        for (var i = 1; i < metricIds.length; i++) {
          var metric = metricIds[i];
          secondaryValues[metric] = summary[metric];
        }
        segments.push({
          label: this.dimensions[0].getLabelForSummary(summary),
          value: summary[metricIds[0]],
          secondaryValues: secondaryValues
        });
      }.bind(this));
      // apply totals
      var totals = {};
      this.dimensions[0].get('metrics').forEach(function (metric) {
        totals[metric] = this.dimensions[0].get('totals')[metric];
      }.bind(this));
      this.totalVolume = totals;
      return segments;
    },
    _segmentsForMetrics: function (metrics, options) {
      var segments = [];
      var context = options.context;
      metrics.forEach(function (metric) {
        segments.push({
          label: metric.getLabel({ context: context }),
          value: metric.total()
        });
      }.bind(this));
      return segments;
    },
    _tableSegmentsForMetrics: function (metrics, options) {
      var segments = [];
      if (metrics[0] && metrics[0].get('metricId') == 'psychProfile') {
        segments = this._psychProfileSegments(function (metric) {
          return {
            label: metric.label,
            info: metric,
            value: this.metrics[0].total(metric.metricId)
          };
        });
      } else {
        segments = this._segmentsForMetrics(metrics, options);
      }
      return segments;
    },
    _tableSegmentsForDimension: function (dimensions, options) {
      var orderedMapping = {};
      var context = options.context;
      if (options.columns) {
        // Clone so it doesn't interfere with view options
        options.columns.forEach(function (data) {
          var column = Openhose._.clone(data);
          var id = column.id;
          if (!column.metricId)
            column.metricId = column.id;
          orderedMapping[id] = column;
        });
      }
      // Just so we can have nice labels
      var tempMetrics = dimensions[0].get('metrics').map(function (metric) {
        return new Openhose.Models.Metric({
          ids: [metric],
          stream: dimensions[0].stream,
          period: dimensions[0].period
        });
      }.bind(this));
      tempMetrics.forEach(function (metric) {
        var mapping = {
          id: metric,
          label: metric.getLabel({ context: context }),
          metricId: metric.get('metricId')
        };
        // Reverse merge so metrics can be overwritten with custom values in columns hash
        // but will still be filled with additional info if needed
        orderedMapping[metric.get('metricId')] = Openhose._.extend(mapping, orderedMapping[metric] || {});
      }.bind(this));
      var tableData = dimensions[0].table(orderedMapping, {
        minValue: options.minValue || 1,
        filter: options.filter
      });
      if (!tableData || !tableData.values.length) {
        return false;
      }
      // add previous
      if (dimensions[1] && dimensions[1].get('previousPeriod')) {
        tableData.previousDimension = dimensions[1];
      }
      return tableData;
    },
    zeroFill: function (data) {
      for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].data.length; j++) {
          if (isNaN(data[i].data[j].x)) {
            throw new Error('NaN timestamp detected, quitting');
          }
        }
      }
      Openhose.Rickshaw.Series.zeroFill(data);
    }
  };
}(oh_core, oh_lib_utils);
oh_processor_number = function (Openhose) {
  var processData = function (metric) {
    var summaryFn = this.options.summaryFn;
    if (this.options.average === true) {
      return metric.average();
    }
    // Temp hack for edge case until we have proper relative metric control
    if (metric.get('metricId') == 'sentimentPositive') {
      summaryFn = function (metric) {
        return metric.total('sentimentPositive') * 1 / (metric.total('sentimentNegative') + metric.total('sentimentPositive')) || 0;
      };
      this.options.format = ',%';
    }
    return summaryFn ? summaryFn(metric) : metric.total();
  };
  var getLabel = function (label, metric) {
    if (label || label === false) {
      return label;
    } else {
      return metric.getLabel();
    }
  };
  return {
    process: function (view) {
      var metric = this.metrics[0];
      var label = getLabel(this.options.label, metric);
      var comparePeriods = !!metric.get('comparePeriods');
      if (comparePeriods) {
        var previousMetric = this.metrics[1];
        var otherLabel = this.options.otherLabel;
        view.options.percentDiff = true;
        var comparisonDays = (previousMetric.period.get('end') - previousMetric.period.get('start')) / 1000 / 60 / 60 / 24;
        // TODO: MAKE THIS SANE, we should either be showing the range of the comparison (previous) date or the current date, NOT BOTH (the else statement is showing previous, others are showing current)
        if (!otherLabel) {
          if (comparisonDays <= 1) {
            otherLabel = 'in last 24 hours';
          } else if (comparisonDays === 7) {
            otherLabel = 'in last 7 days';
          } else if (comparisonDays === 30) {
            otherLabel = 'in last 30 days';
          } else {
            var timeframe = previousMetric.period.timeframePreviousPeriod();
            otherLabel = 'from ' + Openhose.moment(timeframe.start).format('MMMM D') + ' to ' + Openhose.moment(timeframe.end).format('MMMM D');
          }
        }
        view.otherData = {
          value: processData.bind(this)(previousMetric),
          label: otherLabel
        };
      }
      view.data = {
        value: processData.bind(this)(metric),
        label: label
      };
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (metrics && metrics.length === 1) {
        return [
          validated,
          error
        ];  // valid
      }
      if (metrics && metrics.length === 2 && metrics[1].get('previousPeriod')) {
        return [
          validated,
          error
        ];  // valid
      }
      error = 'Need exactly one metric (and/or a previous period metric) to render a number summary';
      validated = false;
      return [
        validated,
        error
      ];
    }
  };
}(oh_core);
oh_processor_leaderboard = function (Openhose, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var segments = null;
    if (dimensions.length) {
      segments = AnalyticsMixin._segmentsForDimension.call(this);
    } else {
      segments = AnalyticsMixin._segmentsForMetrics.call(this);
    }
    segments = Openhose._.sortBy(segments, function (segment) {
      return segment.value;
    }).reverse();
    // add sentiment
    //segments = _.map(segments, function(segment) {
    //  var metric   = _.find(metrics, function(metric) { return metric.name.toLowerCase() == segment.label.toLowerCase(); });
    //  if (metric) {
    //    var positive = metric.collection.reduce( function(total, slice) { return total + slice.sentimentPositive; }, 0) || 0;
    //    var negative = metric.collection.reduce( function(total, slice) { return total + slice.sentimentNegative; }, 0) || 0;
    //    var volume   = metric.collection.reduce( function(total, slice) { return total + slice.volume; }, 0) || 0;
    //    segment.positiveSentiment = positive / volume;
    //    segment.negativeSentiment = negative / volume;
    //  }
    //  return segment;
    //});
    //this.totalVolume = _.reduce(segments, function(total, segment){ return total + segment.value; }, 0) || 0;
    return segments;
  };
  return {
    process: function (view) {
      var dimensions = this.dimensions;
      var metric = this.metrics[0];
      view.data = { values: processData.bind(this)(dimensions, metric) };
      if (this.totalVolume) {
        // TODO: figure out a better way to this
        view.data.totalVolume = this.totalVolume[this.dimensions[0].get('metrics')[0]];
      }
    },
    validate: function (metrics, dimensions) {
      return [
        true,
        null
      ];
      // TODO: FIXME: metrics are in the dimension now
      var validated = true;
      var error = null;
      if (dimensions.length) {
        if (dimensions.length != 1) {
          error = 'Leaderboard charts currently only support one dimension';
          validated = false;
        }
        if (dimensions.length != 1) {
          error = 'Bar charts currently only support one dimension';
          validated = false;
        }
      } else {
        if (!metrics.length) {
          error = 'Need at least one dimension or metric to render leaderboard chart';
          validated = false;
        }
      }
      return [
        validated,
        error
      ];
    }
  };
}(oh_core, oh_processor_analytics_mixin);
oh_processor_pie = function (Openhose, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var segments = null;
    if (dimensions.length) {
      segments = AnalyticsMixin._segmentsForDimension.bind(this)();
    } else {
      segments = AnalyticsMixin._segmentsForMetrics.bind(this)(metrics, {});
    }
    return segments;
  };
  return {
    process: function (view) {
      var dimensions = this.dimensions;
      var metric = this.metrics[0];
      view.data = { values: processData.bind(this)(dimensions, this.metrics) };
      if (this.totalVolume) {
        // TODO: figure out a better way to this
        view.data.totalVolume = this.totalVolume[this.dimensions[0].get('metrics')[0]];
      }
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (dimensions.length) {
        if (dimensions[0].get('metrics').length != 1) {
          error = 'Need exactly one metric to render a pie chart with dimensions';
          validated = false;
        }
        if (dimensions.length != 1) {
          error = 'Pie charts currently only support one dimension';
          validated = false;
        }
      } else {
        if (!metrics.length) {
          error = 'Need at least one dimension or metric to render pie chart';
          validated = false;
        }
      }
      return [
        validated,
        error
      ];
    },
    dimensionNeedsTrendMetrics: false
  };
}(oh_core, oh_processor_analytics_mixin);
oh_lib_error_logger = function (Openhose) {
  var errorLogger = function (message, options) {
    console.warn(message);
    if (Openhose.SETTINGS.errorLogger) {
      Openhose.SETTINGS.errorLogger(message, options);
    }
  };
  return errorLogger;
}(oh_core);
oh_processor_line = function (Openhose, Utils, AnalyticsMixin, errorLogger) {
  var defaults = { disablePreviousTimeLine: true };
  var processData = function (dimensions, metrics) {
    this.options = Openhose._.extend({}, defaults, this.options);
    var segments = [];
    if (dimensions.length) {
      segments = AnalyticsMixin.timelineSegmentsForDimension(dimensions, this.options);
    } else {
      segments = AnalyticsMixin._timelineSegmentsForMetrics(metrics, this.options);
      // disables the previous line if the option is set
      if (this.options.disablePreviousTimeLine) {
        // find history graphs
        for (var i = 0; i < segments.length; i++) {
          if (segments[i].isHistory) {
            segments[i].disabled = true;
          }
        }
      }
      if (!this.options.includePercentage && !this.noTotals && metrics[0] && metrics[0].relativeMetric && !this.options.yFormat) {
        this.options.yFormat = function (num) {
          return Math.round(num * 10000) / 100 + '%';
        };
      }
    }
    return segments;
  };
  function formatData(data) {
    var colors = this.options.colors || Openhose.d3.scale.category20c();
    var lines = Openhose._(data).map(function (graph, i) {
      graph.noPrediction = this.options.noPrediction;
      var graphValues = Openhose._(graph.values).map(function (coords, i) {
        return {
          x: coords[0] / 1000,
          y: coords[1]
        };
      });
      if (graph.relativeValues && graph.relativeValues.length) {
        graphValues.map(function (values, j) {
          values.yRelative = graph.relativeValues[j] || 0;
        });
      }
      var timeDelta = 0;
      var period = graph.period;
      if (graph.isHistory) {
        timeDelta = graph.timeDelta;
        // and set prev x value to be overlapping with current
        graphValues.map(function (x) {
          x.x = graph.period.incrementMomentByPeriod(x.x * 1000).valueOf() / 1000;
        });
      }
      graph.lineBreakPoint = 0;
      var currentTs = new Date().getTime();
      var bucketMs = period.getBucketMs();
      // timeframes in the future get a highlight.
      if (!this.options.noPrediction) {
        for (var j = graphValues.length - 1; j > 0; j--) {
          if (graphValues[j].x * 1000 - timeDelta > currentTs) {
            graph.lineBreakPoint++;
          }
        }
      }
      if (graph.lineBreakPoint > 1) {
        errorLogger('Detected >1 future data points', {
          extra: {
            'graphValues': graphValues,
            'lineBreakPoint': graph.lineBreakPoint,
            'period': graph.period.toJSON(),
            'location': window.location.href,
            'options': this.options
          }
        });
      }
      graph.lineBreakPoint = graphValues.length - graph.lineBreakPoint;
      if (graph.lineBreakPoint < graphValues.length) {
        var point = graphValues[graph.lineBreakPoint];
        var yVal = point.y;
        point.yNonPredicted = yVal;
        point.highlight = true;
        var timePassed = new Date().getTime() - (point.x * 1000 - timeDelta - bucketMs);
        point.atTime = new Date().getTime();
        // A bit of an hack, this sets the current timeframe value to the predicted value. original value is in yNonPredicted
        point.y = Math.round(yVal / timePassed * bucketMs);
      }
      var name = graph.label || '';
      if (name.length > 30) {
        name = Utils.truncate(name, 30, '...');
      }
      return {
        name: name,
        data: graphValues,
        color: colors(i),
        disabled: graph.disabled,
        period: graph.period,
        isHistory: graph.isHistory,
        timeDelta: graph.timeDelta,
        lineLabel: graph.lineLabel,
        annotations: graph.annotations,
        lineBreakPoint: graph.lineBreakPoint,
        'noPrediction': graph.noPrediction
      };
    }.bind(this));
    if (!this.options.noZeroFill) {
      AnalyticsMixin.zeroFill(lines);
    }
    return lines;
  }
  return {
    process: function (view) {
      var dimensions = this.dimensions;
      var segments = processData.bind(this)(dimensions, this.metrics);
      var values = formatData.bind(this)(segments);
      if (this.metrics.length)
        view.options.yHoverFormat = this.metrics[0].getFormatter();
      view.data = { values: values };
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (dimensions && dimensions.length) {
        if (dimensions[0].get('metrics').length != 1) {
          error = 'Need exactly one metric to render a pie chart with dimensions';
          validated = false;
        }
        if (dimensions.length != 1) {
          error = 'Pie charts currently only support one dimension';
          validated = false;
        }
      } else {
        if (!metrics.length) {
          error = 'Need at least one dimension or metric to render pie chart';
          validated = false;
        }
      }
      return [
        validated,
        error
      ];
    },
    dimensionNeedsTrendMetrics: true
  };
}(oh_core, oh_lib_utils, oh_processor_analytics_mixin, oh_lib_error_logger);
oh_processor_area = function (Openhose, Utils, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var segments = [];
    if (dimensions.length) {
      segments = AnalyticsMixin.timelineSegmentsForDimension(dimensions, this.options);
    } else {
      segments = AnalyticsMixin._timelineSegmentsForMetrics(metrics, this.options);
    }
    return this.options.reverse ? _.clone(segments).reverse() : segments;
  };
  function formatData(data, options) {
    var colors = this.options.colors || d3.scale.category20c();
    // TODO: document colorMap
    var colorMap = options.colorMap || {};
    var lines = _(data).map(function (graph, i) {
      var color = colorMap[graph.label] ? colorMap[graph.label] : colors(i);
      var graphValues = _(graph.values).map(function (coords, i) {
        return {
          x: coords[0] / 1000,
          y: coords[1]
        };
      });
      var name = graph.label || '';
      if (name.length > 30) {
        name = Utils.truncate(name, 30, '...');
      }
      return {
        name: name,
        data: graphValues,
        color: color,
        disabled: graph.disabled,
        period: graph.period,
        lineLabel: graph.lineLabel,
        annotations: graph.annotations,
        'noPrediction': graph.noPrediction
      };
    }.bind(this));
    if (!this.options.noZeroFill) {
      AnalyticsMixin.zeroFill(lines);
    }
    return lines;
  }
  return {
    process: function (view) {
      var dimensions = this.dimensions;
      var segments = processData.bind(this)(dimensions, this.metrics);
      var values = formatData.bind(this)(segments, this.options);
      view.data = { values: values };
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (dimensions.length) {
        if (dimensions[0].get('metrics').length != 1) {
          error = 'Need exactly one metric to render a pie chart with dimensions';
          validated = false;
        }
        if (dimensions.length != 1) {
          error = 'Pie charts currently only support one dimension';
          validated = false;
        }
      } else {
        if (!metrics.length) {
          error = 'Need at least one dimension or metric to render pie chart';
          validated = false;
        }
      }
      return [
        validated,
        error
      ];
    },
    dimensionNeedsTrendMetrics: true
  };
}(oh_core, oh_lib_utils, oh_processor_analytics_mixin);
oh_processor_time_line = function (Openhose, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var segments = [];
    if (dimensions.length) {
      segments = AnalyticsMixin.timelineSegmentsForDimension(dimensions, this.options);
    } else {
      segments = AnalyticsMixin._timelineSegmentsForMetrics(metrics, this.options);
    }
    return segments;
  };
  var formatData = function (data) {
    return Openhose._(data).map(function (graph, i) {
      var graphValues = _(graph.values).map(function (coords, i) {
        return {
          x: coords[0] / 1000,
          y: coords[1]
        };
      });
      return {
        data: graphValues,
        period: graph.period
      };
    });
  };
  return {
    dimensionNeedsTrendMetrics: true,
    process: function (view) {
      var dimensions = this.dimensions;
      var metric = this.metrics;
      var segments = processData.bind(this)(dimensions, metric);
      var values = formatData.bind(this)(segments);
      view.data = { values: values };
    },
    validate: function (metrics, dimensions) {
      return [
        true,
        null
      ];
      // TODO: FIXME: metrics are in the dimension now
      var validated = true;
      var error = null;
      if (dimensions.length) {
        if (dimensions.length != 1) {
          error = 'Leaderboard charts currently only support one dimension';
          validated = false;
        }
        if (dimensions.length != 1) {
          error = 'Bar charts currently only support one dimension';
          validated = false;
        }
      } else {
        if (!metrics.length) {
          error = 'Need at least one dimension or metric to render leaderboard chart';
          validated = false;
        }
      }
      return [
        validated,
        error
      ];
    }
  };
}(oh_core, oh_processor_analytics_mixin);
oh_processor_table = function (Openhose, Utils, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var segments = [];
    if (dimensions.length) {
      segments = AnalyticsMixin._tableSegmentsForDimension(dimensions, { columns: this.options.columns });
      var mapping = {};
      if (segments.previousDimension) {
        segments.previousDimension.collection.forEach(function (s) {
          mapping[s.get('id')] = s;
        });
      }
      segments.previousMapping = mapping;
    } else {
      var labels = {};
      var values = AnalyticsMixin._tableSegmentsForMetrics(metrics, this.options);
      if (values.length) {
        if (this.options.labels) {
          labels = this.options.labels;
        } else {
          var labelKeys = _.reject(Object.keys(values[0]), function (k) {
            return k === 'label';
          });
          labelKeys.forEach(function (k) {
            labels[k] = k.charAt(0).toUpperCase() + k.slice(1);
          });
        }
      }
      if (this.options.sortBy) {
        var sortBy = this.options.sortBy;
        var sortOrder = this.options.sortOrder || 'ASC';
        values = _.sortBy(values, function (value, i) {
          value.originalIndex = i;
          var sortKey;
          if (sortOrder === 'DESC') {
            sortKey = -value[sortBy];
          } else {
            sortKey = value[sortBy];
          }
          return sortKey;
        });
      }
      segments = {
        labels: labels,
        values: values
      };
    }
    return segments;
  };
  return {
    process: function (view) {
      var dimensions = this.dimensions;
      view.data = processData.bind(this)(dimensions, this.metrics);
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (dimensions.length) {
        if (dimensions.length !== 1 && dimensions.length !== 2) {
          error = 'Table needs exactly one dimension';
          validated = false;
        } else if (dimensions.length === 2 && !dimensions[1].get('previousPeriod')) {
          error = 'Table can only have a second dimension if it is of a previous period';
          validated = false;
        }
        if (dimensions[0].get('metrics').length < 1) {
          error = 'Table needs at least one metric when used with dimension.';
          validated = false;
        }
      } else if (metrics.length < 1) {
        error = 'Table needs at least one metric';
        validated = false;
      }
      return [
        validated,
        error
      ];
    }
  };
}(oh_core, oh_lib_utils, oh_processor_analytics_mixin);
oh_processor_motion_scatter = function (Openhose, Utils, AnalyticsMixin) {
  var processData = function (dimensions, metrics) {
    var topics = [];
    // topics contains a [] of {} with a .data with historic [time, x, y, z].
    if (dimensions.length) {
      dimensions[0].metrics.map(function (metric) {
        var topic = {};
        topic.xField = this.options.xField;
        topic.yField = this.options.yField;
        topic.zField = this.options.zField;
        var overTimeX = metric.timeline(topic.xField);
        var overTimeY = metric.timeline(topic.yField);
        var overTimeZ = metric.timeline(topic.zField);
        topic.title = topic.id || metric.get('id') || metric.get('metricId');
        topic.period = metric.period;
        topic.data = [];
        for (var count in overTimeX) {
          var values = [
            overTimeX[count][0],
            // time
            overTimeX[count][1],
            // x
            overTimeY[count][1],
            // y
            overTimeZ[count][1]  // z
          ];
          topic.data.push(values);
        }
        topics.push(topic);
      }.bind(this));
    } else {
      metrics.forEach(function (metric) {
        var topic = metric.toJSON();
        if (!this.yField && topic.metricId && topic.metricId[1]) {
          this.yField = topic.metricId[1];
        }
        if (!this.zField && topic.metricId && topic.metricId[2]) {
          this.zField = topic.metricId[2];
        }
        topic.xField = this.xField;
        topic.yField = this.yField;
        topic.zField = this.zField;
        topic.title = topic.id || metric.get('metricId');
        topic.data = [];
        var overTimeX = metric.timeline(this.xField);
        var overTimeY = metric.timeline(this.yField);
        var overTimeZ = metric.timeline(this.zField);
        for (var count in overTimeX) {
          var values = [
            overTimeX[count][0],
            // time
            overTimeX[count][1],
            // x
            overTimeY[count][1],
            // y
            overTimeZ[count][1]  // z
          ];
          topic.data.push(values);
        }
        topics.push(topic);
      }.bind(this));
    }
    return topics;
  };
  return {
    dimensionNeedsTrendMetrics: true,
    process: function (view) {
      var dimensions = this.dimensions;
      view.data = processData.bind(this)(dimensions, this.metrics);
    },
    validate: function (metrics, dimensions) {
      var validated = true;
      var error = null;
      if (dimensions.length !== 1) {
        validated = false;
        error = 'Motion-Scatter needs 1 dimension with 3 metrics';
      }
      if (dimensions[0].get('metrics').length === 3) {
        validated = false;
        error = 'Motion-Scatter needs 1 dimension with 3 metrics';
      }
      return [
        validated,
        error
      ];
    }
  };
}(oh_core, oh_lib_utils, oh_processor_analytics_mixin);
oh_processor_main = function (Openhose, Number, LeaderBoard, Pie, Line, Area, TimeLine, Table, MotionScatter) {
  var subModules = {};
  subModules.Number = Number;
  subModules.LeaderBoard = LeaderBoard;
  subModules.Pie = Pie;
  subModules.Line = Line;
  subModules.Area = Area;
  subModules.TimeLine = TimeLine;
  subModules.Table = Table;
  subModules.MotionScatter = MotionScatter;
  Openhose.Processor = subModules;
  return Openhose;
}(oh_core, oh_processor_number, oh_processor_leaderboard, oh_processor_pie, oh_processor_line, oh_processor_area, oh_processor_time_line, oh_processor_table, oh_processor_motion_scatter);
oh_models_analytics_data = function (Openhose) {
  return Openhose.Backbone.Model.extend({
    defaults: {
      fetchState: 'notLoaded'  // 'notLoaded', 'loading', 'success', 'error', 'noDataAvailable'
    },
    initialize: function (options) {
      this.period = this.period || options.period;
      //TODO: investigate if we can drop `this.period ||` and only use `this.period = options.period`
      this.period.on('change', this._onPeriodChange, this);
      this.mapFn = this.mapFn || options.mapFn;
      this.collection = new Openhose.Backbone.Collection();
      this.collection.comparator = function (a, b) {
        return Date.parse(a.timestamp || a.get('timestamp')) - Date.parse(b.timestamp || b.get('timestamp'));
      };
      this.on('fetch:loading', function (model) {
        model.set('fetchState', 'loading');
      });
      this.on('fetch:success', function (model) {
        model.set('fetchState', 'success');
      });
      this.on('fetch:error', function (model) {
        model.set('fetchState', 'error');
      });
      this.on('fetch:noDataAvailable', function (model) {
        model.set('fetchState', 'noDataAvailable');
      });
    },
    release: function () {
      this.period.off('change', this._onPeriodChange, this);
      this.stopListening();
      this.collection && this.collection.reset([], { silent: true });
      if (this.request)
        this.request.abort();
      delete this.collection;
    },
    _onPeriodChange: function () {
      this.fetch({ reset: true });
    },
    _handleFetchResponse: function (error, results) {
      if (!this.collection)
        return;
      if (error || !results) {
        return false;
      }
      results = results.result;
      if (!Openhose._.isArray(results)) {
        this.trigger('fetch:error', this, error && error.message);
        return;
      }
      if (this.mapFn) {
        results = results.map(this.mapFn);
      }
      this.collection.reset(results);
      this._mapReduceAdvancedQueries && this._mapReduceAdvancedQueries();
      this.trigger('fetch:success', this);
      return this.collection;
    }
  });
}(oh_core);
oh_lib_mapping_processor = function (Openhose, errorLogger) {
  // allow the cache to be persistent
  if (!Openhose._MAPPINGS_CACHE) {
    Openhose._MAPPINGS_CACHE = {
      requests: {},
      // jQuery Ajax requests (used to determine if mapping is loading)
      results: {}  // cached mappings
    };
  }
  var MAPPINGS = Openhose._MAPPINGS_CACHE.results;
  var MappingProcessor = {};
  MappingProcessor.sourceTypes = [
    'social-media',
    'tv-radio'
  ];
  MappingProcessor.loadDefinitions = function (sourceType, callback) {
    var url = Openhose.SETTINGS.apiHost + '/mappings/' + sourceType;
    Openhose._MAPPINGS_CACHE.requests[sourceType] = false;
    // loading...
    Openhose.$.get(url, function (mapping) {
      if (!mapping.result) {
        errorLogger('Mapping ' + mapping + ' didn\'t return any results');
      }
      MAPPINGS[sourceType] = mapping.result;
      Openhose._MAPPINGS_CACHE.requests[sourceType] = true;
      // loaded
      callback && callback();
    }, 'json');
  };
  MappingProcessor.purge = function () {
    Openhose._MAPPINGS_CACHE = {
      requests: {},
      results: {}
    };
    MAPPINGS = Openhose._MAPPINGS_CACHE.results;
  };
  MappingProcessor.hasMapping = function (sourceType) {
    return !!MAPPINGS[sourceType];
  };
  MappingProcessor.setMapping = function (mappings) {
    MAPPINGS = mappings;
  };
  MappingProcessor.getMappings = function () {
    return MAPPINGS;
  };
  MappingProcessor.isLoading = function (mappings) {
    return Openhose._.chain(Openhose._MAPPINGS_CACHE.requests).pick(mappings).values().contains(false).value();
  };
  //
  // MappingProcessor.timestampPath = function(sourceType) {
  //   var mapping = MAPPINGS[sourceType] || {};
  //   return mapping.timestampPath || 'publishedTs';
  // };
  //
  // MappingProcessor.getLabelForSourceType = function (sourceType) {
  //   if (MAPPINGS[sourceType] !== undefined) {
  //     return MAPPINGS[sourceType].label;
  //   }
  //   else return '';
  // };
  //
  // MappingProcessor.getLabelForContextType = function(sourceType, contextType) {
  //   sourceType = MAPPINGS[sourceType];
  //   if (sourceType !== undefined &&
  //       sourceType.contextTypes &&
  //       sourceType.contextTypes[contextType]) {
  //     return sourceType.contextTypes[contextType].label;
  //   }
  //   return '';
  // },
  //
  // MappingProcessor.trendTypes = function(sourceType) {
  //   var keys = [];
  //   for (var key in MAPPINGS[sourceType].entities) {
  //     keys.push(key);
  //   }
  //   return keys;
  // };
  //
  // MappingProcessor.isValidTrendType = function(sourceType, trendType) {
  //   return !!MAPPINGS[sourceType].entities[trendType];
  // };
  //
  // MappingProcessor.isValidMetricId = function(sourceType, metricId) {
  //   return !!MAPPINGS[sourceType].metrics[metricId];
  // };
  //
  // MappingProcessor.singular = function(name) {
  //   var lowerCased = name.toLowerCase();
  //
  //   // Append letters using the same case as the last word of the singularized word
  //   var append = function(word, chars) {
  //     var lastChar = word.slice(-1);
  //     return word + (lastChar === lastChar.toUpperCase() ? chars.toUpperCase() : chars.toLowerCase());
  //   };
  //
  //   // If ending in ss it is probably already singular
  //   if (lowerCased.slice(-2) === 'ss') {
  //     return name;
  //   }
  //
  //   if (lowerCased.slice(-3) === 'ies') {
  //     return append(name.slice(0, -3), 'y');
  //   }
  //
  //   // Words ending in ches, ses, shes, xes, or zes
  //   if (/(ch|s|sh|x|z)es$/.test(lowerCased)) {
  //     return name.slice(0, -2);
  //   }
  //
  //   if (lowerCased.slice(-3) === 'chs') {
  //     return name.slice(0, -1);
  //   }
  //
  //   if (lowerCased.slice(-3) === 'ves') {
  //     return append(name.slice(0, -3), 'f');
  //   }
  //
  //   if (lowerCased.slice(-3) === 'oes') {
  //     return name.slice(0, -2);
  //   }
  //
  //   if (lowerCased.slice(-1) === 's') {
  //     return name.slice(0, -1);
  //   }
  //
  //   // Apparently the word was already singular
  //   return name;
  // };
  //
  // MappingProcessor.parseEntityMetric = function(sourceType, path) {
  //   path = path.split(/:/).map(decodeURIComponent);
  //
  //   var directives = {
  //     metric: path[path.length-1]
  //   };
  //
  //   if (path.length == 2 && path[0] != "stream") {
  //     directives.entityType = path[0];
  //     directives.entityId = path[1];
  //     delete directives.metric;
  //   } else if (path.length == 1 || path.length == 2 && path[0] == "stream") {
  //     directives.entityType = 'stream';
  //   } else if (path.length == 3) {
  //     directives.entityType = path[0];
  //     directives.entityId = path[1];
  //   } else if (path.length == 4) {
  //     directives.entityType = path[0];
  //     directives.entityGroup = path[1];
  //     directives.entityId = path[2];
  //   } else {
  //     throw new Error("Invalid path: " + path.map(encodeURIComponent).join(':'));
  //   }
  //   return directives;
  // };
  //
  // MappingProcessor.joinEntityMetric = function(sourceType, entityMetric) {
  //   var path = [];
  //
  //   path.push(entityMetric.entityType); // always has a entityType
  //
  //   // TODO would be nice to have sanity check based on source typ (reason it is already in the signatue)
  //   // add optional things when provided
  //   if (entityMetric.entityGroup) path.push(entityMetric.entityGroup);
  //   if (entityMetric.entityId) path.push(entityMetric.entityId);
  //   if (entityMetric.metric) path.push(entityMetric.metric);
  //
  //   return path.map(encodeURIComponent).join(':');
  // };
  //
  // MappingProcessor.decodePath = function (sourceType, path) {
  //   var query = {};
  //
  //   var directives = MappingProcessor.parseEntityMetric(sourceType, path);
  //
  //   if (directives.entityType) {
  //     if (directives.entityType == 'stream') {
  //       query.entity = {'entityType': directives.entityType};
  //     } else {
  //       query.entity = MappingProcessor.entityById(sourceType, directives.entityType);
  //       if (!query.entity) {
  //         throw new Error("Could not find entity for type "+ directives.entityType);
  //       }
  //       query.entity.entityType = directives.entityType;
  //       if (directives.entityId)
  //         query.entity.id = directives.entityId;
  //       if (directives.entityGroup) {
  //         query.entity.group = directives.entityGroup;
  //       }
  //     }
  //   }
  //
  //   if (directives.metric) {
  //     query.metrics = [];
  //     if (directives.metric == '*') {
  //       var metrics = MappingProcessor.metrics(sourceType);
  //       for (var id in metrics) {
  //         var metric = metrics[id];
  //         metric.id = id;
  //         query.metrics.push(metric);
  //
  //       }
  //     } else {
  //       var metric = MappingProcessor.metricById(sourceType, directives.metric);
  //       if (!metric) {
  //         throw new Error("Could not find metric with id " + directives.metric);
  //       }
  //       metric.id = directives.metric;
  //       query.metrics.push(metric);
  //       if (metric.children) {
  //         MappingProcessor._addChildrenToQuery(query, metric.children);
  //       }
  //     }
  //   }
  //
  //   return query;
  // };
  //
  // MappingProcessor.decodePaths = function(sourceType, paths) {
  //   return paths.map(MappingProcessor.decodePath.bind(null, sourceType));
  // };
  //
  // MappingProcessor._addChildrenToQuery = function(query, children) {
  //   for (var id in children) {
  //     var metric = children[id];
  //     metric.id = id;
  //     query.metrics.push(metric);
  //     if (metric.children) {
  //       MappingProcessor._addChildrenToQuery(query, metric.children);
  //     }
  //   }
  // };
  //
  // MappingProcessor.pathForEntity = function(entity) {
  //   var path = [entity.entityType];
  //   if (entity.group)
  //     path.push(entity.group);
  //   if (entity.id)
  //     path.push(entity.id);
  //   return path.map(encodeURIComponent).join(':');
  // };
  //
  // MappingProcessor.entityForPath = function(path) {
  //   path = path.split(':').map(decodeURIComponent);
  //   var entity = {
  //     entityType: path.shift(),
  //     id: path.pop()
  //   };
  //   if (path.length > 0) {
  //     entity.group = path.shift();
  //   }
  //   return entity;
  // };
  MappingProcessor.metricsByCategory = function (sourceType, category) {
    var metrics = {};
    for (var metricId in MAPPINGS[sourceType].metrics) {
      if (MAPPINGS[sourceType].metrics[metricId].category == category) {
        metrics[metricId] = MAPPINGS[sourceType].metrics[metricId];
      }
    }
    return metrics;
  };
  // MappingProcessor.entities = function(sourceType, ids) {
  //   if (!ids) {
  //     return MAPPINGS[sourceType].entities;
  //   }
  //
  //   var pickedDefinitions = {};
  //   ids.forEach(function(id) {
  //     pickedDefinitions[id] = MAPPINGS[sourceType].entities[id];
  //   });
  //   return pickedDefinitions;
  // };
  //
  // MappingProcessor.metrics = function(sourceType, ids) {
  //   if (!ids) {
  //     return MAPPINGS[sourceType].metrics;
  //   }
  //   var pickedDefinitions = {};
  //   ids.forEach(function(id) {
  //     pickedDefinitions[id] = MAPPINGS[sourceType].metrics[id];
  //   });
  //   return pickedDefinitions;
  // };
  //
  // MappingProcessor.complexEntityDefinition = function (entityObj) {
  //   if (!entityObj || !entityObj.fields) return null;
  //
  //   var template = {};
  //   var fields = entityObj.fields;
  //   Object.keys(fields).forEach(function (field) {
  //     if (!fields[field].path) return;
  //     template[field] = fields[field].path;
  //     if (fields[field].alternativePath) {
  //       template[field] = [
  //         template[field],
  //         fields[field].alternativePath
  //       ];
  //     }
  //   });
  //
  //   var foundFields = Object.keys(template);
  //   if (foundFields.length === 0) return null; // there are no fields for the complexEntity
  //   if (foundFields.length == 1 && foundFields[0] == 'id' && !Array.isArray(template.id)) return null; // only the id is found, the id is the entity
  //
  //   var options = {};
  //
  //   if (entityObj.fields.id) {
  //     if (entityObj.fields.id.richEntityOrder) {
  //       options.order = entityObj.fields.id.richEntityOrder;
  //     }
  //     if (entityObj.fields.id.richEntity == 'root') {
  //       options.returnRoot = true;
  //     }
  //   }
  //
  //   return {
  //     options: options,
  //     template: template
  //   };
  // };
  //
  // MappingProcessor.parseComplexEntity = function(complexEntityDefinition, activity, id) {
  //   if (complexEntityDefinition.options && complexEntityDefinition.options.returnRoot) return activity;
  //
  //   var indices = null;
  //   if (id) {
  //     if (!complexEntityDefinition.template || !complexEntityDefinition.template.id) throw new Error("Matching on id while the complex entity does not have an id field");
  //     // find the indices matching the id
  //     var idPath = complexEntityDefinition.template.id;
  //     if (!Array.isArray(idPath)) idPath = idPath.split('.');
  //
  //     // recursivly find the correct indices to take down the road
  //     var traverse = function (obj, path) {
  //       var key = path[0];
  //       var nextPath = path.slice(1);
  //       var field = obj[key];
  //       if (!field) return false;
  //
  //       if (Array.isArray(field)) {
  //         // branch into all elements until one matches
  //         for (var i=0; i<field.length; i++) {
  //           var match = traverse(field[i], nextPath);
  //           if (match) { // non falsy value indicates we got a match on this branch
  //             match.unshift(i); // put the current index at the beginning of the array
  //             return match;
  //           }
  //         }
  //         return false;
  //       } else if (nextPath.length === 0) {
  //         // the end of the path, lets test the id to the field
  //         // returning an array to collect the indices in when matching
  //         return (field == id)?[]:false;
  //       } else {
  //         return traverse(field, nextPath);
  //       }
  //     };
  //
  //     indices = traverse(activity, idPath);
  //     if (!indices) return null; // no entity found
  //   }
  //
  //   function deepPluck(obj, path) {
  //     if (!Array.isArray(path)) path = path.split('.');
  //
  //     var indexCounter = 0;
  //     for (var i=0; obj && i<path.length; i++) {
  //       obj = obj[path[i]];
  //       if (Array.isArray(obj)) {
  //         if (!indices) throw new Error("Need to specify an id when the entity is nested in an array");
  //         obj = obj[indices[indexCounter]]; // step into the correct index
  //         indexCounter++; // make sure the next array takes the correct index
  //       }
  //     }
  //     return obj;
  //   }
  //
  //   var entity = {};
  //
  //   Object.keys(complexEntityDefinition.template).forEach(function (key) {
  //     entity[key] = deepPluck(activity, complexEntityDefinition.template[key]);
  //   });
  //
  //   return entity;
  // };
  //
  // MappingProcessor.validEntityTypes = function (sourceType) {
  //   var validEntities = {};
  //   Openhose._.each(MAPPINGS[sourceType].entities, function (definition, entityType) {
  //     // test if it has an id field with a path in the definition
  //     if (!definition || !definition.fields || !definition.fields.id || !definition.fields.id.path) return;
  //     validEntities[entityType] = definition.fields.id.path;
  //   });
  //   return validEntities;
  // };
  // example response
  // {
  //    label: 'Volume',
  //    definition: ['sum']
  // }
  MappingProcessor.isMappingLoaded = function (mapping) {
    var isMappingLoaded = MAPPINGS && MAPPINGS[mapping];
    // if (!isMappingLoaded) {
    //   console.log('mapping not loaded yet:', mapping);
    // }
    return isMappingLoaded;
  };
  MappingProcessor.metricById = function (mapping, metricId) {
    if (!MappingProcessor.isMappingLoaded(mapping))
      return false;
    if (!MAPPINGS[mapping].metrics[metricId]) {
      errorLogger('mapping ' + mapping + 'is missing metric: ' + metricId);
      return false;
    }
    return Openhose._.clone(MAPPINGS[mapping].metrics[metricId]);
  };
  // MappingProcessor.entityById = function(sourceType, entityId) {
  //   return Openhose._.clone(MAPPINGS[sourceType].entities[entityId]);
  // };
  //
  // MappingProcessor.getSearchableFields = function(entity) {
  //   var fields = [];
  //
  //   if (entity && entity.fields) {
  //     // we can filter safely
  //     Object.keys(entity.fields).forEach(function (fieldName) {
  //       var field = entity.fields[fieldName];
  //       if (!field.searchable) return; // not searchable
  //       fields.push(field.path);
  //     });
  //   }
  //
  //   return fields;
  // };
  //
  // var INTERVAL_SECONDS = {
  //   'minute':   60,
  //   'hour':     3600,
  //   'day':      24*3600,
  //   'week':     7*24*3600,
  //   'month':    30*24*3600,
  //   'quarter':  3*30*24*3600,
  //   'year':     356*24*3600
  // };
  //
  // var INTERVAL_ALIASES = {
  //   'm': 'minute',
  //   'h': 'hour',
  //   'd': 'day',
  //   'w': 'week'
  // };
  //
  // MappingProcessor.parseInterval = function(interval) {
  //   var numMatch = interval.match(/^([0-9\.]+)[a-z]+$/);
  //
  //   var num = 1;
  //   if (numMatch && numMatch[1]) {
  //     num = parseFloat(numMatch[1]);
  //     interval = interval.replace(/[0-9\.]*/g, '');
  //   }
  //   if (interval.length == 1) {
  //     interval = INTERVAL_ALIASES[interval];
  //   }
  //
  //   if (!INTERVAL_SECONDS[interval]) return null;
  //
  //   return {
  //     num: num,
  //     interval: interval
  //   };
  // };
  //
  // MappingProcessor.strictInterval = function(interval) {
  //   var parsed = MappingProcessor.parseInterval(interval);
  //   if (parsed && parsed.num == 1) return parsed.interval;
  //   return false;
  // };
  //
  // MappingProcessor.intervalToMs = function(interval) {
  //   var parsed = MappingProcessor.parseInterval(interval);
  //   if (!parsed) return null;
  //   var intervalSeconds = INTERVAL_SECONDS[parsed.interval];
  //   return parsed.num * intervalSeconds * 1000;
  // };
  //
  // MappingProcessor.msToInterval = function(ms) {
  //   if (ms <= 3600*1000*24*7) { // hours
  //     var hours = ms / (3600*1000);
  //     return ''+hours+'h';
  //   } else { // days
  //     var days = ms / (3600*24*1000);
  //     return ''+days+'d';
  //   }
  // };
  //
  // var inDays = function (from, to) {
  //   var milliseconds = to - from;
  //   return Math.round(milliseconds / 86400000);
  // };
  //
  // MappingProcessor.defaultBucketFor = function (from, to) {
  //   var days = inDays(from, to);
  //   if (days <= 7) return 'hour';
  //   return 'day';
  // };
  //
  // MappingProcessor.getNumSummariesToFetch = function (bucket, from, to) {
  //   return Math.ceil((to - from) / this.intervalToMs(bucket));
  // };
  //
  // MappingProcessor.projections = {
  //   sentimentScore: Openhose._.compose(Math.round, function (value) {
  //     if (7.3 < value) {
  //       // 7.3 < AvgSent ⇒ SentScore = 100
  //       return 100;
  //     } else if (4.99 < value) {
  //       // 4.99 < AvgSent ≤ 7.3 ⇒ SentScore = 99
  //       return 99;
  //     } else if (3.179 < value) {
  //       // 3.179 < AvgSent ≤ 7.3 ⇒ SentScore = -0.3866*AvgSent^2+4.5747*AvgSent+85.402
  //       return -0.3866*Math.pow(value,2)+4.5747*value+85.402;
  //     } else if (2 < value) {
  //       // 2 < AvgSent ≤ 3.179 ⇒ SentScore = -3.8636*AvgSent^2+24.721*AvgSent+56.167
  //       return -3.8636*Math.pow(value,2)+24.721*value+56.167;
  //     } else if (1.35 < value) {
  //       // 1.35 < AvgSent ≤ 2 ⇒ SentScore = -20.371*AvgSent^2+87.086*AvgSent-2.996
  //       return -20.371*Math.pow(value,2)+87.086*value-2.996;
  //     } else if (0.573 < value) {
  //       // .573 < AvgSent ≤ 1.35 ⇒ SentScore = -19.68*AvgSent^2+99.874*AvgSent-21.301
  //       return -19.68*Math.pow(value,2)+99.874*value-21.301;
  //     } else if (0.03 < value) {
  //       // .03 < AvgSent ≤ .573 ⇒ SentScore = 22.207*AvgSent^2+39.705*AvgSent-0.0941
  //       return 22.207*Math.pow(value,2)+39.705*value-0.0941;
  //     } else if (0.0001 < value) {
  //       // .0001 < AvgSent ≤ .03 ⇒ SentScore = 1
  //       return 1;
  //     } else if (-0.193 < value) {
  //       // -.193 < AvgSent ≤ .0001 ⇒ SentScore = AvgSent*155.2795
  //       return value*155.2795;
  //     } else if (-1.1267 < value) {
  //       // -1.1267 < AvgSent ≤ -.193 ⇒ SentScore = 41.322*AvgSent^2+104.13*AvgSent-11.786
  //       return 41.322*Math.pow(value,2)+104.13*value-11.786;
  //     } else if (-3.0379 < value) {
  //       // -3.0379 < AvgSent ≤ -1.1267 ⇒ SentScore = 4.7024*AvgSent^2+28.485*AvgSent-51.945
  //       return 4.7024*Math.pow(value,2)+28.485*value-51.945;
  //     } else if (-6 < value) {
  //       // -6 < AvgSent ≤ -3.0379 ⇒ SentScore = 0.4968*AvgSent^2+5.5837*AvgSent-83.087
  //       return 0.4968*Math.pow(value,2)+5.5837*value-83.087;
  //     } else {
  //       // AvgSent < -6  ⇒ SentScore = -100
  //       return -100;
  //     }
  //   }),
  //
  //   sentimentScoreTV: Openhose._.compose(Math.round, function (value) {
  //     if (5.744 < value) {
  //       // 5.744 < AvgSent, sent score = 100
  //       return 100;
  //     } else if (5.139 < value) {
  //       // 5.139 < AvgSent <= 5.744, sent score = 99
  //       return 99;
  //     } else if (4.568 < value) {
  //       // 4.568 < AvgSent <= 5.139, sent score = -3.8731 AvgSent^2 + 41.946 AvgSent - 14.805
  //       return -3.8731 * Math.pow(value,2) + 41.946 * value - 14.805;
  //     } else if (3.795 < value) {
  //       // 3.795 < AvgSent <= 4.568, sent score = -1.5077AvgSent^2 + 20.496AvgSent + 33.933
  //       return -1.5077 * Math.pow(value,2) + 20.496 * value + 33.933;
  //     } else if (2.751 < value) {
  //       // 2.751 < AvgSent <= 3.795, sent score = 3.9214 AvgSent^3 - 41.799AvgSent^2 + 158.93AvgSent - 125.52
  //       return 3.9214 * Math.pow(value,3) - 41.799 * Math.pow(value,2) + 158.93 * value - 125.52;
  //     } else if (1.751 < value) {
  //       // 1.751 < AvgSent <= 2.751= 7.3654 AvgSent^3 - 58.507 AvgSent^2 + 175.1 AvgSent - 115.12
  //       return 7.3654 * Math.pow(value,3) - 58.507 * Math.pow(value,2) + 175.1 * value - 115.12;
  //     } else if (1.123 < value) {
  //       // 1.123 < AvgSent <= 1.751, sent score = 4.6636 AvgSent^2 + 27.66 AvgSent - 10.917
  //       return 4.6636 * Math.pow(value,2) + 27.66 * value - 10.917;
  //     } else if (0.124 < value) {
  //       // .124 < AvgSent <= 1.123, sent score = 7.072 AvgSent^3 - 1.4017 AvgSent^2 + 16.382 AvgSent - 0.6053
  //       return 7.072 * Math.pow(value,3) - 1.4017 * Math.pow(value,2) + 16.382 * value - 0.6053;
  //     } else if (0.049 < value) {
  //       // .049 < AvgSent <= .124, sent score = 1
  //       return 1;
  //     } else if (-0.006 < value) {
  //       // -.006 < AvgSent <= .049, sent score = 0
  //       return 0;
  //     } else if (-0.013 < value) {
  //       // -.013 < AvgSent <= -.006, sent score = -1
  //       return -1;
  //     } else if (-0.374 < value) {
  //       // -.374 < AvgSent <= -.013, sent score = 71.697 AvgSent^2 + 106.3 AvgSent + 0.0068
  //       return 71.697 * Math.pow(value,2) + 106.3 * value + 0.0068;
  //     } else if (-1.333 < value) {
  //       // -1.333 < AvgSent <= -.374, sent score = 24.228 AvgSent^2 + 89.364 AvgSent - 0.6448
  //       return 24.228 * Math.pow(value,2) + 89.364 * value - 0.6448;
  //     } else if (-2.354 < value) {
  //       // -2.354 < AvgSent <= -1.333, sent score = 11.321 AvgSent^2 + 59.278 AvgSent - 17.948
  //       return 11.321 * Math.pow(value,2) + 59.278 * value - 17.948;
  //     } else if (-3.214 < value) {
  //       // -3.214 < AvgSent <= -2.354, sent score = 2.795 AvgSent^2 + 19.533 AvgSent - 64.565
  //       return 2.795 * Math.pow(value,2) + 19.533 * value - 64.565;
  //     } else if (-3.779 < value) {
  //       // -3.779 < AvgSent <= -3.214, sent score = -99
  //       return -99;
  //     } else {
  //       // AvgSent < -3.779, sent score = -100
  //       return -100;
  //     }
  //   })
  // };
  //
  // MappingProcessor.project = function (name, value) {
  //   if (!(name in MappingProcessor.projections)) {
  //     throw new Error("Unknown projection '" + name + "'");
  //   }
  //
  //   return MappingProcessor.projections[name](value);
  // };
  Openhose.Mapping = MappingProcessor;
  return MappingProcessor;
}(oh_core, oh_lib_error_logger);
oh_lib_api = function (Openhose) {
  var API = function () {
    this._cache = {};
    // This needs to be expired / cleaned up every now and then
    setInterval(function () {
      for (var cacheKey in this._cache) {
        delete this._cache[cacheKey];
      }
    }.bind(this), 60 * 1000);
  };
  API.prototype._getUrl = function (path, params, callback, options) {
    if (!params)
      params = {};
    if (!options)
      options = {};
    params.appName = Openhose.SETTINGS.appName;
    if (Openhose.SETTINGS.cacheLong) {
      params.cacheLong = true;
    }
    var url = Openhose.SETTINGS.apiHost + path;
    return Openhose.$.ajax({
      url: url,
      type: options.method || 'GET',
      dataType: 'json',
      data: params,
      success: function (response, status, xhr) {
        var options = {};
        var cacheControl = xhr.getResponseHeader('Cache-Control');
        //if the browser already cache the result, we shouldnt attempt
        if (cacheControl && cacheControl.length)
          options.noCache = true;
        callback(null, response, options);
      },
      error: function (xhr, textStatus) {
        //if the call is abort, dont trigger callback 
        if (textStatus == 'abort')
          return;
        var message = 'Service temporarily unavailable.';
        var clientside = false;
        try {
          message = JSON.parse(xhr.responseText).error;
        } catch (e) {
          clientside = true;
        }
        if (typeof message == 'object') {
          message = message.message;
        }
        var error = new Error(message);
        error.responseText = xhr.responseText;
        error.clientside = clientside;
        if (xhr.status == 502 || !xhr.status) {
          error.statusCode = null;
        } else {
          error.statusCode = xhr.status;
        }
        callback(error);
      }
    });
  };
  API.prototype.getUrl = function (url, params, callback, options) {
    options = options || {};
    return this._getUrl(url, params, function (err, response, opt) {
      return callback(err, response);
    }.bind(this), options);
  };
  return new API();
}(oh_core);
oh_lib_parse_stream = function (Openhose) {
  var streamWithDefaultSettings = function () {
    var stream = {
      id: Openhose.SETTINGS.streamId,
      mapping: Openhose.SETTINGS.mapping
    };
    if (Openhose.SETTINGS.streamId && Openhose.SETTINGS.organizationId && Openhose.SETTINGS.organizationToken) {
      stream.organizationId = Openhose.SETTINGS.organizationId;
      stream.organizationToken = Openhose.SETTINGS.organizationToken;
    } else if (Openhose.SETTINGS.streamId && Openhose.SETTINGS.userId && Openhose.SETTINGS.userToken) {
      stream.userId = Openhose.SETTINGS.userId;
      stream.userToken = Openhose.SETTINGS.userToken;
    }
    return stream;
  };
  return function (stream) {
    if (!stream)
      stream = streamWithDefaultSettings();
    // TODO: add error handling
    if (!stream.cid)
      stream = new Openhose.Backbone.Model(stream);
    return stream || stream;
  };
}(oh_core);
oh_models_helpers_timezone_detector = function () {
  /**
   * This script gives you the zone info key representing your device's time zone setting.
   *
   * @name jsTimezoneDetect
   * @version 1.0.5
   * @author Jon Nylander
   * @license MIT License - http://www.opensource.org/licenses/mit-license.php
   *
   * For usage and examples, visit:
   * http://pellepim.bitbucket.org/jstz/
   *
   * Copyright (c) Jon Nylander
   */
  /*jslint undef: true */
  /*global console, exports*/
  (function (root) {
    /**
     * Namespace to hold all the code for timezone detection.
     */
    var jstz = function () {
      
      var HEMISPHERE_SOUTH = 's',
        /**
         * Gets the offset in minutes from UTC for a certain date.
         * @param {Date} date
         * @returns {Number}
         */
        get_date_offset = function (date) {
          var offset = -date.getTimezoneOffset();
          return offset !== null ? offset : 0;
        }, get_date = function (year, month, date) {
          var d = new Date();
          if (year !== undefined) {
            d.setFullYear(year);
          }
          d.setMonth(month);
          d.setDate(date);
          return d;
        }, get_january_offset = function (year) {
          return get_date_offset(get_date(year, 0, 2));
        }, get_june_offset = function (year) {
          return get_date_offset(get_date(year, 5, 2));
        },
        /**
         * Private method.
         * Checks whether a given date is in daylight saving time.
         * If the date supplied is after august, we assume that we're checking
         * for southern hemisphere DST.
         * @param {Date} date
         * @returns {Boolean}
         */
        date_is_dst = function (date) {
          var is_southern = date.getMonth() > 7, base_offset = is_southern ? get_june_offset(date.getFullYear()) : get_january_offset(date.getFullYear()), date_offset = get_date_offset(date), is_west = base_offset < 0, dst_offset = base_offset - date_offset;
          if (!is_west && !is_southern) {
            return dst_offset < 0;
          }
          return dst_offset !== 0;
        },
        /**
         * This function does some basic calculations to create information about
         * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
         * the script has been tested rather than depend on the year set by the
         * client device.
         *
         * Returns a key that can be used to do lookups in jstz.olson.timezones.
         * eg: "720,1,2".
         *
         * @returns {String}
         */
        lookup_key = function () {
          var january_offset = get_january_offset(), june_offset = get_june_offset(), diff = january_offset - june_offset;
          if (diff < 0) {
            return january_offset + ',1';
          } else if (diff > 0) {
            return june_offset + ',1,' + HEMISPHERE_SOUTH;
          }
          return january_offset + ',0';
        },
        /**
         * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
         *
         * Returns a primitive object on the format:
         * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
         *
         * @returns Object
         */
        determine = function () {
          var key = lookup_key();
          return new jstz.TimeZone(jstz.olson.timezones[key]);
        },
        /**
         * This object contains information on when daylight savings starts for
         * different timezones.
         *
         * The list is short for a reason. Often we do not have to be very specific
         * to single out the correct timezone. But when we do, this list comes in
         * handy.
         *
         * Each value is a date denoting when daylight savings starts for that timezone.
         */
        dst_start_for = function (tz_name) {
          var ru_pre_dst_change = new Date(2010, 6, 15, 1, 0, 0, 0),
            // In 2010 Russia had DST, this allows us to detect Russia :)
            dst_starts = {
              'America/Denver': new Date(2011, 2, 13, 3, 0, 0, 0),
              'America/Mazatlan': new Date(2011, 3, 3, 3, 0, 0, 0),
              'America/Chicago': new Date(2011, 2, 13, 3, 0, 0, 0),
              'America/Mexico_City': new Date(2011, 3, 3, 3, 0, 0, 0),
              'America/Asuncion': new Date(2012, 9, 7, 3, 0, 0, 0),
              'America/Santiago': new Date(2012, 9, 3, 3, 0, 0, 0),
              'America/Campo_Grande': new Date(2012, 9, 21, 5, 0, 0, 0),
              'America/Montevideo': new Date(2011, 9, 2, 3, 0, 0, 0),
              'America/Sao_Paulo': new Date(2011, 9, 16, 5, 0, 0, 0),
              'America/Los_Angeles': new Date(2011, 2, 13, 8, 0, 0, 0),
              'America/Santa_Isabel': new Date(2011, 3, 5, 8, 0, 0, 0),
              'America/Havana': new Date(2012, 2, 10, 2, 0, 0, 0),
              'America/New_York': new Date(2012, 2, 10, 7, 0, 0, 0),
              'Europe/Helsinki': new Date(2013, 2, 31, 5, 0, 0, 0),
              'Pacific/Auckland': new Date(2011, 8, 26, 7, 0, 0, 0),
              'America/Halifax': new Date(2011, 2, 13, 6, 0, 0, 0),
              'America/Goose_Bay': new Date(2011, 2, 13, 2, 1, 0, 0),
              'America/Miquelon': new Date(2011, 2, 13, 5, 0, 0, 0),
              'America/Godthab': new Date(2011, 2, 27, 1, 0, 0, 0),
              'Europe/Moscow': ru_pre_dst_change,
              'Asia/Amman': new Date(2013, 2, 29, 1, 0, 0, 0),
              'Asia/Beirut': new Date(2013, 2, 31, 2, 0, 0, 0),
              'Asia/Damascus': new Date(2013, 3, 6, 2, 0, 0, 0),
              'Asia/Jerusalem': new Date(2013, 2, 29, 5, 0, 0, 0),
              'Asia/Yekaterinburg': ru_pre_dst_change,
              'Asia/Omsk': ru_pre_dst_change,
              'Asia/Krasnoyarsk': ru_pre_dst_change,
              'Asia/Irkutsk': ru_pre_dst_change,
              'Asia/Yakutsk': ru_pre_dst_change,
              'Asia/Vladivostok': ru_pre_dst_change,
              'Asia/Baku': new Date(2013, 2, 31, 4, 0, 0),
              'Asia/Yerevan': new Date(2013, 2, 31, 3, 0, 0),
              'Asia/Kamchatka': ru_pre_dst_change,
              'Asia/Gaza': new Date(2010, 2, 27, 4, 0, 0),
              'Africa/Cairo': new Date(2010, 4, 1, 3, 0, 0),
              'Europe/Minsk': ru_pre_dst_change,
              'Pacific/Apia': new Date(2010, 10, 1, 1, 0, 0, 0),
              'Pacific/Fiji': new Date(2010, 11, 1, 0, 0, 0),
              'Australia/Perth': new Date(2008, 10, 1, 1, 0, 0, 0)
            };
          return dst_starts[tz_name];
        };
      return {
        determine: determine,
        date_is_dst: date_is_dst,
        dst_start_for: dst_start_for
      };
    }();
    /**
     * Simple object to perform ambiguity check and to return name of time zone.
     */
    jstz.TimeZone = function (tz_name) {
      
      /**
       * The keys in this object are timezones that we know may be ambiguous after
       * a preliminary scan through the olson_tz object.
       *
       * The array of timezones to compare must be in the order that daylight savings
       * starts for the regions.
       */
      var AMBIGUITIES = {
          'America/Denver': [
            'America/Denver',
            'America/Mazatlan'
          ],
          'America/Chicago': [
            'America/Chicago',
            'America/Mexico_City'
          ],
          'America/Santiago': [
            'America/Santiago',
            'America/Asuncion',
            'America/Campo_Grande'
          ],
          'America/Montevideo': [
            'America/Montevideo',
            'America/Sao_Paulo'
          ],
          'Asia/Beirut': [
            'Asia/Amman',
            'Asia/Jerusalem',
            'Asia/Beirut',
            'Europe/Helsinki',
            'Asia/Damascus'
          ],
          'Pacific/Auckland': [
            'Pacific/Auckland',
            'Pacific/Fiji'
          ],
          'America/Los_Angeles': [
            'America/Los_Angeles',
            'America/Santa_Isabel'
          ],
          'America/New_York': [
            'America/Havana',
            'America/New_York'
          ],
          'America/Halifax': [
            'America/Goose_Bay',
            'America/Halifax'
          ],
          'America/Godthab': [
            'America/Miquelon',
            'America/Godthab'
          ],
          'Asia/Dubai': ['Europe/Moscow'],
          'Asia/Dhaka': ['Asia/Yekaterinburg'],
          'Asia/Jakarta': ['Asia/Omsk'],
          'Asia/Shanghai': [
            'Asia/Krasnoyarsk',
            'Australia/Perth'
          ],
          'Asia/Tokyo': ['Asia/Irkutsk'],
          'Australia/Brisbane': ['Asia/Yakutsk'],
          'Pacific/Noumea': ['Asia/Vladivostok'],
          'Pacific/Tarawa': [
            'Asia/Kamchatka',
            'Pacific/Fiji'
          ],
          'Pacific/Tongatapu': ['Pacific/Apia'],
          'Asia/Baghdad': ['Europe/Minsk'],
          'Asia/Baku': [
            'Asia/Yerevan',
            'Asia/Baku'
          ],
          'Africa/Johannesburg': [
            'Asia/Gaza',
            'Africa/Cairo'
          ]
        }, timezone_name = tz_name,
        /**
         * Checks if a timezone has possible ambiguities. I.e timezones that are similar.
         *
         * For example, if the preliminary scan determines that we're in America/Denver.
         * We double check here that we're really there and not in America/Mazatlan.
         *
         * This is done by checking known dates for when daylight savings start for different
         * timezones during 2010 and 2011.
         */
        ambiguity_check = function () {
          var ambiguity_list = AMBIGUITIES[timezone_name], length = ambiguity_list.length, i = 0, tz = ambiguity_list[0];
          for (; i < length; i += 1) {
            tz = ambiguity_list[i];
            if (jstz.date_is_dst(jstz.dst_start_for(tz))) {
              timezone_name = tz;
              return;
            }
          }
        },
        /**
         * Checks if it is possible that the timezone is ambiguous.
         */
        is_ambiguous = function () {
          return typeof AMBIGUITIES[timezone_name] !== 'undefined';
        };
      if (is_ambiguous()) {
        ambiguity_check();
      }
      return {
        name: function () {
          return timezone_name;
        }
      };
    };
    jstz.olson = {};
    /*
     * The keys in this dictionary are comma separated as such:
     *
     * First the offset compared to UTC time in minutes.
     *
     * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
     * does.
     *
     * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
     * only interesting for timezones with DST.
     *
     * The mapped arrays is used for constructing the jstz.TimeZone object from within
     * jstz.determine_timezone();
     */
    jstz.olson.timezones = {
      '-720,0': 'Pacific/Majuro',
      '-660,0': 'Pacific/Pago_Pago',
      '-600,1': 'America/Adak',
      '-600,0': 'Pacific/Honolulu',
      '-570,0': 'Pacific/Marquesas',
      '-540,0': 'Pacific/Gambier',
      '-540,1': 'America/Anchorage',
      '-480,1': 'America/Los_Angeles',
      '-480,0': 'Pacific/Pitcairn',
      '-420,0': 'America/Phoenix',
      '-420,1': 'America/Denver',
      '-360,0': 'America/Guatemala',
      '-360,1': 'America/Chicago',
      '-360,1,s': 'Pacific/Easter',
      '-300,0': 'America/Bogota',
      '-300,1': 'America/New_York',
      '-270,0': 'America/Caracas',
      '-240,1': 'America/Halifax',
      '-240,0': 'America/Santo_Domingo',
      '-240,1,s': 'America/Santiago',
      '-210,1': 'America/St_Johns',
      '-180,1': 'America/Godthab',
      '-180,0': 'America/Argentina/Buenos_Aires',
      '-180,1,s': 'America/Montevideo',
      '-120,0': 'America/Noronha',
      '-120,1': 'America/Noronha',
      '-60,1': 'Atlantic/Azores',
      '-60,0': 'Atlantic/Cape_Verde',
      '0,0': 'UTC',
      '0,1': 'Europe/London',
      '60,1': 'Europe/Berlin',
      '60,0': 'Africa/Lagos',
      '60,1,s': 'Africa/Windhoek',
      '120,1': 'Asia/Beirut',
      '120,0': 'Africa/Johannesburg',
      '180,0': 'Asia/Baghdad',
      '180,1': 'Europe/Moscow',
      '210,1': 'Asia/Tehran',
      '240,0': 'Asia/Dubai',
      '240,1': 'Asia/Baku',
      '270,0': 'Asia/Kabul',
      '300,1': 'Asia/Yekaterinburg',
      '300,0': 'Asia/Karachi',
      '330,0': 'Asia/Kolkata',
      '345,0': 'Asia/Kathmandu',
      '360,0': 'Asia/Dhaka',
      '360,1': 'Asia/Omsk',
      '390,0': 'Asia/Rangoon',
      '420,1': 'Asia/Krasnoyarsk',
      '420,0': 'Asia/Jakarta',
      '480,0': 'Asia/Shanghai',
      '480,1': 'Asia/Irkutsk',
      '525,0': 'Australia/Eucla',
      '525,1,s': 'Australia/Eucla',
      '540,1': 'Asia/Yakutsk',
      '540,0': 'Asia/Tokyo',
      '570,0': 'Australia/Darwin',
      '570,1,s': 'Australia/Adelaide',
      '600,0': 'Australia/Brisbane',
      '600,1': 'Asia/Vladivostok',
      '600,1,s': 'Australia/Sydney',
      '630,1,s': 'Australia/Lord_Howe',
      '660,1': 'Asia/Kamchatka',
      '660,0': 'Pacific/Noumea',
      '690,0': 'Pacific/Norfolk',
      '720,1,s': 'Pacific/Auckland',
      '720,0': 'Pacific/Tarawa',
      '765,1,s': 'Pacific/Chatham',
      '780,0': 'Pacific/Tongatapu',
      '780,1,s': 'Pacific/Apia',
      '840,0': 'Pacific/Kiritimati'
    };
    if (typeof exports !== 'undefined') {
      exports.jstz = jstz;
    } else {
      root.jstz = jstz;
    }
  }(this));
  return this.jstz;
}();
oh_models_period = function (Openhose, timezoneDetector) {
  var Period = Openhose.Backbone.Model.extend({
    INTERVAL_SECONDS: {
      'minute': 60,
      'hour': 3600,
      'day': 24 * 3600,
      'week': 7 * 24 * 3600,
      'month': 30 * 24 * 3600,
      'quarter': 3 * 30 * 24 * 3600,
      'year': 356 * 24 * 3600
    },
    INTERVAL_ALIASES: {
      'm': 'minute',
      'h': 'hour',
      'd': 'day',
      'w': 'week'
    },
    bucketAliases: {
      'month': 'month',
      'week': '1w',
      'day': '1d',
      'hour': '1h'
    },
    parseInterval: function (interval) {
      var numMatch = interval.match(/^([0-9\.]+)[a-z]+$/);
      var num = 1;
      if (numMatch && numMatch[1]) {
        num = parseFloat(numMatch[1]);
        interval = interval.replace(/[0-9\.]*/g, '');
      }
      if (interval.length == 1) {
        interval = this.INTERVAL_ALIASES[interval];
      }
      if (!this.INTERVAL_SECONDS[interval])
        return null;
      return {
        num: num,
        interval: interval,
        duration: Openhose.moment.duration(num, interval)
      };
    },
    incrementMomentByBucket: function (time) {
      time = Openhose.moment(time).tz(this.timezone());
      var bucket = this.parseInterval(this.getBucket());
      time.add(bucket.num, bucket.interval);
      return time;
    },
    decrementMomentByBucket: function (time) {
      time = Openhose.moment(time).tz(this.timezone());
      var bucket = this.parseInterval(this.getBucket());
      time.subtract(bucket.num, bucket.interval);
      return time;
    },
    incrementMomentByPeriod: function (time) {
      time = Openhose.moment(time).tz(this.timezone());
      var diff = this.get('_end') - this.get('_start') + 1;
      // small correction for the end already being -1
      var bucketCount = Math.round(diff / this.getBucketMs());
      var bucket = this.parseInterval(this.getBucket());
      var interval = 'ms';
      var count = diff;
      if ([
          'month',
          'week',
          'day'
        ].indexOf(bucket.interval) !== -1) {
        interval = bucket.interval;
        count = bucketCount;
      }
      time.add(count, interval);
      return time;
    },
    decrementMomentByPeriod: function (time) {
      time = Openhose.moment(time).tz(this.timezone());
      var diff = this.get('_end') - this.get('_start') + 1;
      // small correction for the end already being -1
      var bucketCount = Math.round(diff / this.getBucketMs());
      var bucket = this.parseInterval(this.getBucket());
      var interval = 'ms';
      var count = diff;
      if ([
          'month',
          'week',
          'day'
        ].indexOf(bucket.interval) !== -1) {
        interval = bucket.interval;
        count = bucketCount;
      }
      time.subtract(count, interval);
      return time;
    },
    bucketAsDuration: function (bucket) {
      if (!bucket) {
        bucket = this.getBucket();
      }
      var parsed = this.parseInterval(bucket);
      return parsed.duration;
    },
    intervalToMs: function (interval) {
      var parsed = this.parseInterval(interval);
      if (!parsed)
        return null;
      var intervalSeconds = this.INTERVAL_SECONDS[parsed.interval];
      return parsed.num * intervalSeconds * 1000;
    },
    initialize: function () {
      this.on('change', this._correctDayBucketTimes);
      this._correctDayBucketTimes();
    },
    timeframe: function () {
      return {
        start: this.get('_start'),
        end: this.get('_end'),
        to: this.get('_end'),
        from: this.get('_start')
      };
    },
    toMoments: function () {
      return {
        start: Openhose.moment(this.get('_start')).tz(this.timezone()),
        end: Openhose.moment(this.get('_end')).tz(this.timezone()),
        to: Openhose.moment(this.get('_end')).tz(this.timezone()),
        from: Openhose.moment(this.get('_start')).tz(this.timezone())
      };
    },
    timeframePreviousPeriod: function () {
      if (this.getBucket() == 'day') {
        //we need to use days because otherwise we get issues with daylightsaving
        //when we use days moment correct the problems for us
        return {
          start: Openhose.moment(this.get('start')).tz(this.timezone()).subtract(this.inDays(), 'days').valueOf(),
          end: Openhose.moment(this.get('end')).tz(this.timezone()).subtract(this.inDays(), 'days').valueOf()
        };
      }
      //the -1 makes sure that there is no overlap between the current and the previous timeperiod
      return {
        start: this.get('start') - 1 - this.inMilliseconds(),
        end: this.get('end') - 1 - this.inMilliseconds()
      };
    },
    toPreviousMoments: function () {
      var timeframes = this.timeframePreviousPeriod();
      return {
        start: Openhose.moment(timeframes.start).tz(this.timezone()),
        end: Openhose.moment(timeframes.end).tz(this.timezone()),
        to: Openhose.moment(timeframes.end).tz(this.timezone()),
        from: Openhose.moment(timeframes.start).tz(this.timezone())
      };
    },
    timezone: function () {
      var timezone = this.get('timezone');
      if (!timezone) {
        timezone = timezoneDetector.determine().name();
        this.set('timezone', timezone, { silent: true });
      }
      return timezone;
    },
    inDays: function () {
      return Math.round(this.inMilliseconds() / 86400000);
    },
    inHours: function () {
      return Math.round(this.inMilliseconds() / 3600000);
    },
    inMilliseconds: function () {
      return this.get('end') - this.get('start');
    },
    getDefaultBucket: function () {
      var moments = this.toMoments();
      var start = moments.start;
      var end = Openhose.moment(moments.end + 1);
      // correct the 1ms offset on the end
      if (end.diff(start, 'years') >= 2) {
        return 'month';
      } else if (end.diff(start, 'months') >= 3) {
        // FIXME: this fails on summertime switch
        return '1w';
      } else if (end.diff(start, 'days') >= 14) {
        return '1d';
      } else if (end.diff(start, 'days') >= 7) {
        return '6h';
      } else if (end.diff(start, 'hours') >= 24) {
        return '1h';
      } else if (end.diff(start, 'hours') >= 12) {
        return '30m';
      } else if (end.diff(start, 'hours') >= 1) {
        return '10m';  //} else if (end.diff(start, 'minutes') >= 30) {
                       //  return '5m';
      } else {
        return '1m';
      }
    },
    getDuration: function () {
      return this.get('duration');
    },
    getBucket: function () {
      var bucket = this.get('bucket');
      // When it is day or hour, convert to new format
      if (this.bucketAliases[bucket]) {
        bucket = this.bucketAliases[bucket];
        this.set({ 'bucket': bucket });
      }
      if (bucket)
        return bucket;
      return this.getDefaultBucket();
    },
    getBucketMs: function () {
      var bucket = this.getBucket();
      return this.intervalToMs(bucket);
    },
    getNumSummariesToFetch: function () {
      if (this.getBucket() == 'day') {
        return this.inDays();
      }
      return Math.ceil((this.get('_end') - this.get('_start')) / this.getBucketMs());
    },
    getBucketDescription: function (options) {
      options = options || {};
      var isPredefinedTimeRange = this.get('isPredefinedTimeRange');
      if (typeof options.isPredefinedTimeRange == 'boolean') {
        isPredefinedTimeRange = options.isPredefinedTimeRange;
      }
      if (isPredefinedTimeRange) {
        var length = this.inDays();
        if (length == 30) {
          // 720 hours
          result = 'Last 30 days';
        } else if (length == 7) {
          // 168 hours
          result = 'Last 7 days';
        } else {
          result = 'Last ' + this.inHours() + ' hours';
        }
        return result;
      }
      var start = Openhose.moment(this.get('start')).tz(this.timezone());
      var end = Openhose.moment(this.get('end')).tz(this.timezone());
      // Hack for the end being till the end of a period, not including.
      if (end.millisecond() === 999) {
        end.add(1, 'millisecond');
      }
      var now = Openhose.moment().tz(this.timezone());
      var result = '';
      var startDate = {
        year: '',
        monthDay: '',
        hourMin: ''
      };
      var endDate = {
        year: '',
        monthDay: '',
        hourMin: ''
      };
      if (start.year() !== end.year()) {
        startDate.year = start.format('YYYY');
        endDate.year = end.format('YYYY');
      } else if (start.year() !== now.year()) {
        endDate.year = start.format('YYYY');
      }
      if (start.date() !== end.date() || start.month() !== end.month()) {
        if (end.diff(start, 'days') == 1) {
          startDate.monthDay = start.format('MMMM D');
          // fix the year
          startDate.year = endDate.year;
          endDate.year = '';
        } else {
          if (start.month() == end.month()) {
            startDate.monthDay = start.format('MMMM D');
            if (startDate.year && endDate.year) {
              // when the year is added, also add the month in the second one.
              endDate.monthDay = end.format('MMMM D');
            } else {
              endDate.monthDay = end.format('D');
            }
          } else {
            startDate.monthDay = start.format('MMMM D');
            endDate.monthDay = end.format('MMMM D');
          }
        }
      }
      if (start.hour() !== end.hour() || start.minute() !== end.minute()) {
        startDate.hourMin = start.format('h:mm A');
        endDate.hourMin = end.format('h:mm A');
        // The day should be in there
        if (!startDate.monthDay) {
          if (endDate.year && !startDate.year) {
            // prevent: January 20 1:00 AM - , 2014 2:00 AM
            // and turn it into January 20, 2014 1:00 AM - 2:00 AM
            startDate.year = endDate.year;
            endDate.year = '';
          }
          startDate.monthDay = start.format('MMMM D');
        }
      }
      var template = '<%= monthDay %><% if (year) print(\', \' + year) %> <%= hourMin %>';
      template = Openhose._.template(template);
      var startStr = template(startDate).trim();
      var endStr = template(endDate).trim();
      return startStr + (endStr ? ' - ' + endStr : '');
    },
    _nextHour: function () {
      var date = new Date();
      date.setMinutes(60, 0, 0);
      return date;
    },
    _correctDayBucketTimes: function () {
      var start = new Date(this.get('start'));
      var end = new Date(this.get('end'));
      this.set({
        _start: start.getTime(),
        _end: end.getTime()
      }, { silent: true });
      // Do this separately after a _start & _end update
      this.set({ duration: this.bucketAsDuration() }, { silent: true });
    }
  });
  Period.parse = function (period) {
    if (!period)
      return false;
    // oops we fucked up
    if (period.cid)
      return period;
    // its a backbone model
    if (!period.start && !period.end && period.to && period.from) {
      period.start = period.from;
      period.end = period.to;
      delete period.from;
      delete period.to;
    }
    return new Period(period);
  };
  Openhose.Period = Period;
  return Period;
}(oh_core, oh_models_helpers_timezone_detector);
oh_models_metric = function (Openhose, AnalyticsData, MappingProcessor, API, errorLogger, parseStream, Period) {
  var Metric = AnalyticsData.extend({
    constructor: function (options) {
      this.stream = parseStream(options.stream);
      this.period = Period.parse(options.period);
      if (!this.period)
        throw new Error('Metric needs period');
      if (!this.stream)
        throw new Error('Metric needs stream');
      var opt = Openhose._.clone(options);
      delete opt.stream;
      delete opt.period;
      Openhose.Backbone.Model.call(this, opt);
    },
    initialize: function (options) {
      options = options || {};
      var metricId = this.get('ids')[0];
      this.set('metricId', metricId);
      // Interval can have value 'false' to omit the interval from the api call
      this.interval = options.interval;
      options.mapFn = options.mapFn || this._mapFnForMetricId(metricId);
      this.relativeMetric = options.relativeMetric;
      this.populateFields();
      AnalyticsData.prototype.initialize.apply(this, [options]);
    },
    // TODO: seems to Bottlenose specific, we need a general way of dealing with this.
    populateFields: function () {
      var results = [];
      var fields = Openhose._.clone(this.get('ids') || []);
      fields.forEach(function (metric) {
        // Deal with pseudo-metrics
        switch (metric) {
        case 'simScore':
        case 'sentimentPositive':
        case 'sentimentNeutral':
        case 'sentimentNegative':
          results = results.concat([
            'volume',
            'sentimentPositive',
            'sentimentNeutral',
            'sentimentNegative'
          ]);
          break;
        case 'conversationRate':
          results = results.concat([
            'volume',
            'impressions'
          ]);
          break;
        case 'otherNetworkVolume':
          results = results.concat([
            'volume',
            'twitterVolume',
            'facebookVolume',
            'tumblrVolume'
          ]);
          break;
        case 'post':
          results = results.concat([
            'volume',
            'reply',
            'repost'
          ]);
          break;
        case 'ethnicityBlackAndWhite':
          results = results.concat([
            'ethnicityWhite',
            'ethnicityBlack',
            'ethnicityWhiteOrBlack'
          ]);
          break;
        default:
          results.push(metric);
        }
      });
      this.set('ids', results, { silent: true });
    },
    _getMetric: function (metricId) {
      metricId = metricId || this.get('metricId');
      if (Openhose._.isArray(metricId))
        metricId = metricId[0];
      return metricId;
    },
    timeline: function (metricId, options) {
      if (!options)
        options = {};
      if (!this.collection.length)
        return false;
      var values = [];
      var relativeMap = {};
      var relativeMetricId = null;
      var plotTimeShift = options.plotTimeShift || 0;
      metricId = this._getMetric(metricId);
      if (this.relativeMetric) {
        relativeMetricId = this.relativeMetric.get('metricId');
        this.relativeMetric.collection.forEach(function (timeframe) {
          relativeMap[timeframe.timestamp] = timeframe;
        });
      }
      this.relativeValues = [];
      this.collection.map(function (timeframe, i) {
        var date = new Date(Date.parse(timeframe.get('timestamp')));
        var currentTimeframe = plotTimeShift ? this.collection.at(i + plotTimeShift) : timeframe;
        var value = 0;
        if (currentTimeframe) {
          value = timeframe.get(metricId) || currentTimeframe[metricId] || 0;
        }
        var previousValue = 0;
        if (this.collection.at(i - 1)) {
          previousValue = this.collection.at(i - 1)[metricId] || 0;
        }
        values.push([
          date - 0,
          value,
          value - previousValue
        ]);
      }.bind(this));
      this.relativeMap = relativeMap;
      return values;
    },
    total: function (metricId) {
      metricId = this._getMetric(metricId);
      if (!this.collection.length)
        return false;
      return this.collection.map(function (timeframe) {
        return timeframe.get(metricId || this.get('metricId')) || 0;
      }.bind(this)).reduce(function (total, increment) {
        return total + increment;
      });
    },
    average: function (metricId) {
      metricId = this._getMetric(metricId);
      if (!this.collection.length)
        return false;
      return this.total(metricId) / this.collection.length;
    },
    getFormatter: function (options) {
      if (!options)
        options = {};
      if (this.get('formatter'))
        return this.get('formatter');
      var defaultFormat = options.defaultFormat || ',3';
      var sourceType;
      var metricId = this.get('metricId');
      if (this.stream) {
        sourceType = this.stream.get('sourceType');
      }
      if (!sourceType) {
        sourceType = 'social-media';
      }
      var metric = MappingProcessor.metricById(sourceType, metricId);
      if (!metric) {
        return Openhose.d3.format(defaultFormat);
      }
      return function (x) {
        var str = '';
        if (metric.viewOptions && metric.viewOptions.formatPrefix) {
          str += metric.viewOptions.formatPrefix;
        }
        if (metric.viewOptions && metric.viewOptions.format) {
          str += Openhose.d3.format(metric.viewOptions.format)(x);
        } else {
          str += Openhose.d3.format(defaultFormat)(x);
        }
        if (metric.viewOptions && metric.viewOptions.formatSuffix) {
          str += metric.viewOptions.formatSuffix;
        }
        return str;
      };
    },
    getLabel: function (options) {
      if (!options)
        options = {};
      if (this.get('label'))
        return this.get('label');
      var metricId = this.get('metricId');
      var mapping;
      if (this.stream) {
        mapping = this.stream.get('mapping');
      }
      var metric = MappingProcessor.metricById(mapping, metricId);
      if (metric) {
        if (options.full && metric.category) {
          return metric.category + ': ' + metric.label;
        }
        return metric.label;
      }
      return metricId.slice(0, 1).toUpperCase() + metricId.slice(1);
    },
    zeroFillSentimentHeatmap: function () {
      this.collection.forEach(function (timeframe) {
        for (var i = -18; 18 >= i; i++) {
          if (!timeframe['s' + i]) {
            timeframe['s' + i] = 0;
          }
        }
      });
    },
    zeroFillPsychHeatmap: function () {
      var metrics = MappingProcessor.metricsByCategory('social-media', 'Psych');
      this.collection.forEach(function (timeframe) {
        for (var level1key in metrics) {
          if (!timeframe[level1key]) {
            timeframe[level1key] = 0;
          }
          if (metrics[level1key].children) {
            for (var level2key in metrics[level1key].children) {
              if (!timeframe[level1key + '-' + level2key]) {
                timeframe[level1key + '-' + level2key] = 0;
              }
              if (metrics[level1key].children[level2key].children) {
                for (var level3key in metrics[level1key].children[level2key].children) {
                  if (!timeframe[level1key + '-' + level2key + '-' + level3key]) {
                    timeframe[level1key + '-' + level2key + '-' + level3key] = 0;
                  }
                }
              }
            }
          }
        }
      });
    },
    _timeValuesForPeriod: function (snapshots, field) {
      var throughputMeasurementArray = [];
      var snapshotCount = snapshots.length;
      var snapshot;
      var date;
      for (var i = 0; snapshotCount > i; i++) {
        snapshot = snapshots[i];
        date = new Date(snapshot.timestamp);
        throughputMeasurementArray.push([
          date.getTime(),
          snapshot[field]
        ]);
      }
      throughputMeasurementArray = throughputMeasurementArray.sort(function (a, b) {
        return a[0] - b[0];
      });
      return throughputMeasurementArray;
    },
    // Pseudo metrics
    _mapFnForMetricId: function (metricId) {
      var pseudoMetrics = {
        ethnicityBlackAndWhite: function (timeframe) {
          timeframe.ethnicityBlackAndWhite = (timeframe.ethnicityWhite || 0) + (timeframe.ethnicityBlack || 0) + (timeframe.ethnicityWhiteOrBlack || 0);
          return timeframe;
        },
        simScore: function (timeframe) {
          timeframe.simScore = ((timeframe.sentimentPositive || 0) + (timeframe.sentimentNeutral || 0) - (timeframe.sentimentNegative || 0)) / (timeframe.volume || 0) * 100;
          if (!isFinite(timeframe.simScore))
            timeframe.simScore = 0;
          return timeframe;
        },
        post: function (timeframe) {
          timeframe.post = timeframe.volume - (timeframe.repost || 0) - (timeframe.reply || 0);
          return timeframe;
        },
        otherNetworkVolume: function (timeframe) {
          timeframe.otherNetworkVolume = timeframe.volume - (timeframe.twitterVolume || 0) - (timeframe.facebookVolume || 0) - (timeframe.tumblrVolume || 0);
          return timeframe;
        },
        conversationRate: function (timeframe) {
          if (timeframe.volume === 0) {
            timeframe.conversationRate = 0;
          } else {
            timeframe.conversationRate = (timeframe.volume || 1) * 100 / (timeframe.impressions || 1);
          }
          return timeframe;
        }
      };
      return pseudoMetrics[metricId];
    },
    fetch: function () {
      if (this.get('fetchState') == 'loading')
        return;
      this.trigger('fetch:loading', this);
      this._fetchApiV3();
    },
    _fetchApiV3: function (options) {
      if (this.request)
        this.request.abort();
      if (!options)
        options = {};
      var timeframe = this.get('previousPeriod') ? this.period.timeframePreviousPeriod() : this.period.timeframe();
      var stream = this.stream;
      var params = {
        streamId: stream.id || Openhose.SETTINGS.streamId,
        organizationId: stream.get('organizationId') || Openhose.SETTINGS.organizationId,
        organizationToken: stream.get('organizationToken') || Openhose.SETTINGS.organizationToken,
        userId: stream.get('userId') || Openhose.SETTINGS.userId,
        userToken: stream.get('userToken') || Openhose.SETTINGS.userToken,
        from: timeframe.start,
        to: timeframe.end,
        timezone: this.period.timezone()
      };
      // Make sure to not send empty values so that APIs and proxies take proper defaults
      for (var key in params) {
        if (!params[key] === undefined)
          delete params[key];
      }
      // Always use interval param, except for when explicitly omitted in options
      if (this.interval !== false) {
        params.interval = this.interval || this.period.getBucket();
      }
      if (this.get('normalizeSampleRate'))
        params.normalizeSampleRate = this.get('normalizeSampleRate');
      params.filter = {};
      if (this.options && this.options.entities && this.options.entities.length) {
        params.filter.entities = this.options.entities.map(function (entity) {
          entity = entity.split(':');
          var type = entity[0];
          var id = entity[1];
          return [
            type,
            id
          ].map(encodeURIComponent).join(':');
        });
      }
      if (this.get('filter')) {
        var filter = Openhose._.extend(params.filter || {}, this.get('filter'));
        if (filter.excludeEntities) {
          filter.excludeEntities = filter.excludeEntities.map(function (item) {
            return encodeURIComponent(item.entityType) + ':' + encodeURIComponent(item.id);
          });
        }
        params.filter = filter;
      }
      params.ids = this.get('ids');
      var path = '/metrics';
      if (this.get('type') == 'demographics') {
        path = '/demographics/metrics';
        params.metricIds = params.ids.concat();
        params.ids = 'stream:*';
      }
      this.request = API.getUrl(path, params, this._handleApiV3Response.bind(this, options));
    },
    _handleApiV3Response: function (options, error, response) {
      this.request = null;
      if (!this.collection)
        return;
      if (error && error.statusCode) {
        this.trigger('fetch:error', this, 'Could not retrieve metrics for ' + this.getLabel());
        return false;
      }
      if (response && response.queued || error && !error.statusCode) {
        if (!options.requestCount)
          options.requestCount = 0;
        options.requestCount++;
        options.queued = true;
        if (!this._eventFired && options.requestCount > 25) {
          this._eventFired = true;
          errorLogger('[Metric] Timeout while fetching', { extra: options });
        }
        this.fetchTimer = setTimeout(this._fetchApiV3.bind(this, options), 2000);
        return;
      }
      if (response.error) {
        this.trigger('fetch:error', this, 'Error while fetching metrics: ' + response.error.message);
        return false;
      }
      var results = response.result;
      if (!results) {
        results = [];
      }
      results = results.sort(function (a, b) {
        return a.timestamp - b.timestamp;
      });
      results = results.map(function (result) {
        var obj = {};
        if (result.timestamp) {
          obj.timestamp = new Date(result.timestamp).toISOString();
        }
        if (result.error)
          obj.error = result.error;
        if (result.normalizedValues)
          result.values = result.normalizedValues;
        for (var entityMetricId in result.values) {
          // get metricId from entityMetricId (hacky)
          var metricId = entityMetricId.split(':');
          metricId = metricId[metricId.length - 1];
          obj[metricId] = result.values[entityMetricId];
        }
        return obj;
      });
      if (!Openhose._.isArray(results)) {
        this.trigger('fetch:error', this, error && error.message);
        return;
      }
      if (this.mapFn) {
        results = results.map(this.mapFn);
      }
      if (this.get('postProcess'))
        results = results.filter(this.get('postProcess'));
      this.collection.reset(results);
      this._mapReduceAdvancedQueries && this._mapReduceAdvancedQueries();
      this.trigger('fetch:success', this);
      return this.collection;
    }
  });
  Openhose.Metric = Metric;
  return Metric;
}(oh_core, oh_models_analytics_data, oh_lib_mapping_processor, oh_lib_api, oh_lib_error_logger, oh_lib_parse_stream, oh_models_period);
oh_models_helpers_meta = function (Openhose) {
  function MetaHelper() {
    this._cache = {};
  }
  MetaHelper.prototype = {
    fetch: function (dataType, callback) {
      if (this.isSupportedDataType())
        throw new Error('Not Valid DataType:' + dataType + '. Please add a source for ' + dataType + ' in `entityMapping` in your settings.');
      if (this._cache[dataType]) {
        return callback();
      }
      Openhose.$.getJSON(this._getPath(dataType)).then(function (data) {
        this._handleFetchResponse(dataType, data);
        callback();
      }.bind(this));
    },
    getValue: function (dataType, id) {
      if (this.isSupportedDataType())
        throw new Error('Not Valid DataType:' + dataType + '. Please add a source for ' + dataType + ' in `entityMapping` in your settings.');
      var data = this._cache[dataType];
      return data[id];
    },
    getLabel: function (dataType, id) {
      if (this.isSupportedDataType())
        throw new Error('Not Valid DataType:' + dataType + '. Please add a source for ' + dataType + ' in `entityMapping` in your settings.');
      var data = this._cache[dataType];
      return data[id.toLowerCase()];
    },
    isSupportedDataType: function (dataType) {
      return Openhose._.keys(Openhose.SETTINGS.entityMapping).indexOf(dataType) != -1;
    },
    _getPath: function (dataType) {
      return Openhose.SETTINGS.entityMapping[dataType];
    },
    _handleFetchResponse: function (dataType, data) {
      var dataTypeCache = this._cache[dataType] = {};
      //TODO: clean me up, this alpha-2 business is too Nerve Center specific...
      data.forEach(function (d) {
        if (d.name && d['alpha-2']) {
          dataTypeCache[d['alpha-2'].toLowerCase()] = d.name;
        }
      });
    }
  };
  return new MetaHelper();
}(oh_core);
oh_models_trend_metric = function (Openhose, Metric, MetaHelper) {
  var TrendMetric = Metric.extend({
    defaults: { objectType: 'TrendMetric' },
    initialize: function (options) {
      this.options = options;
      var metricIds = options.metricIds;
      if (!metricIds) {
        metricIds = [options.metricId];
      }
      var ids = [];
      metricIds.forEach(function (metricId) {
        var id = [];
        if (this.get('type'))
          id.push(this.get('type'));
        id.push(this.get('entityType'));
        id.push(options.id);
        if (Openhose._.isArray(metricId)) {
          Openhose._.each(metricId, function (m) {
            ids.push(Openhose._.union(id, [m]));
          });
        } else {
          id.push(metricId);
          ids.push(id);
        }
      }.bind(this));
      this.set('ids', ids.map(function (id) {
        return id.map(encodeURIComponent).join(':');
      }));
      Metric.prototype.initialize.apply(this, [options]);
      this.set('metricId', metricIds[0]);
    },
    _fetchMetaDependencies: function (callback) {
      if (MetaHelper.isSupportedDataType(this.get('type')))
        MetaHelper.fetch(this.get('type'), callback);
      return callback();
    },
    getLabel: function (options) {
      var metricLabel;
      if (this.get('label'))
        return this.get('label');
      if (options && options.context == 'trend' && this.get('metricId')) {
        metricLabel = Metric.prototype.getLabel.apply(this, [options]);
        return metricLabel;
      }
      var model = this.collection.at(0);
      var title = model && model.title || this.id || '';
      if (MetaHelper.isSupportedDataType(this.get('type'))) {
        return MetaHelper.getLabel(this.get('type'), title);
      }
      if (options && options.full) {
        metricLabel = Metric.prototype.getLabel.apply(this, [options]);
        return title.titleize() + ' ' + metricLabel;
      }
      return title;
    },
    // XXX not used in app, but called in the process
    // but don't want to remove before there a long term plan
    _mapReduceAdvancedQueries: function () {
      return;
      if (this.keywords.length <= 1)
        return;
      var newSummaries = [];
      var summariesByTime = {};
      for (var i = 0; this.collection.models.length > i; i++) {
        var summary = _.clone(this.collection.models[i]);
        var existingSummary = summariesByTime[summary.timestamp];
        if (!existingSummary) {
          summariesByTime[summary.timestamp] = summary;
        } else {
          var allKeys = _.uniq(_.keys(summary).concat(_.keys(existingSummary)));
          for (var k = 0; allKeys.length > k; k++) {
            if (allKeys[k] == 's0') {
            }
            if (typeof existingSummary[allKeys[k]] == 'number' || typeof summary[allKeys[k]] == 'number') {
              if (!existingSummary[allKeys[k]]) {
                existingSummary[allKeys[k]] = 0;
              }
              existingSummary[allKeys[k]] += summary[allKeys[k]] || 0;
            }
          }
        }
        summariesByTime[summary.timestamp].title = this.get('metricId');
      }
      newSummaries = _.values(summariesByTime);
      this.collection.reset(newSummaries);
    }
  });
  Openhose.TrendMetric = TrendMetric;
  return TrendMetric;
}(oh_core, oh_models_metric, oh_models_helpers_meta);
oh_models_stream_metric = function (Openhose, Metric) {
  var StreamMetric = Metric.extend({
    defaults: { objectType: 'StreamMetric' },
    initialize: function (options) {
      this.set('ids', options.ids);
      this.options = options;
      Metric.prototype.initialize.apply(this, [options]);
      this.set('metricId', options.ids[0]);
    },
    summaryNumber: function (field) {
      if (!this.collection.length)
        return [];
      return this.collection.map(function (timeframe) {
        return timeframe[field];
      }).reduce(function (total, value) {
        return total + value;
      });
    },
    getUrl: function () {
      return Openhose.SETTINGS.apiHost + '/1/metrics?' + Openhose.$.param(this._getParams());
    },
    _getParams: function () {
      var timeframe = this.get('previousPeriod') ? this.period.timeframePreviousPeriod() : this.period.timeframe();
      var periodBucket = this.period.getBucket();
      var limit = this.period.getNumSummariesToFetch();
      var stream = this.stream;
      var params = {
        start: timeframe.start,
        end: timeframe.end,
        period: periodBucket,
        limit: limit,
        organizationId: stream.get('organizationId') || Openhose.SETTINGS.organizationId,
        organizationToken: stream.get('organizationToken') || Openhose.SETTINGS.organizationToken,
        userId: stream.get('userId') || Openhose.SETTINGS.userId,
        userToken: stream.get('userToken') || Openhose.SETTINGS.userToken,
        streamId: stream.id || Openhose.SETTINGS.streamId
      };
      if (this.get('normalizeSampleRate')) {
        params.normalizeSampleRate = this.get('normalizeSampleRate');
      }
      if (this.get('filter')) {
        var filter = Openhose._.extend(params.filter || {}, this.get('filter'));
        if (filter.excludeEntities) {
          filter.excludeEntities = filter.excludeEntities.map(function (item) {
            return encodeURIComponent(item.entityType) + ':' + encodeURIComponent(item.id);
          });
        }
        params.filter = filter;
      }
      return params;
    },
    fieldEncoding: function (field) {
      return [
        'stream',
        field
      ].map(encodeURIComponent).join(':');
    }
  });
  Openhose.StreamMetric = StreamMetric;
  return StreamMetric;
}(oh_core, oh_models_metric);
oh_models_dimension = function (Openhose, AnalyticsData, TrendMetric, MetaHelper, Metric, API, errorLogger, parseStream, Period) {
  var Dimension = AnalyticsData.extend({
    constructor: function (options) {
      this.stream = parseStream(options.stream);
      this.period = Period.parse(options.period);
      if (!this.period)
        throw new Error('Dimension need period');
      if (!this.stream)
        throw new Error('Dimension need stream');
      var opt = Openhose._.clone(options);
      delete opt.stream;
      delete opt.period;
      Openhose.Backbone.Model.call(this, opt);
    },
    initialize: function (options) {
      this.options = options;
      this.includeStream = options.includeStream;
      this.dateLimit = options.dateLimit || false;
      this.fetchCount = options.fetchCount || false;
      AnalyticsData.prototype.initialize.apply(this, [options]);
      this.collection = new Openhose.Backbone.Collection();
      this.collection.comparator = null;
      if (options.collectionComparator) {
        this.collection.comparator = options.collectionComparator;
      }
    },
    clean: function () {
      this.metrics && this.metrics.forEach(function (metric) {
        metric && metric.release && metric.release();
      });
      this.collection && this.collection.reset([], { silent: true });
    },
    getUrl: function () {
      var url = '/entities';
      if (this.get('type') == 'demographics') {
        url = '/demographics/entities';
      }
      return url;
    },
    getParamsV3: function (options) {
      if (!options)
        options = {};
      var timeframe = this.get('previousPeriod') ? this.period.timeframePreviousPeriod() : this.period.timeframe();
      var stream = this.stream;
      var order = this.get('order') || 'desc';
      if (typeof order !== 'string') {
        order = order === -1 ? 'desc' : 'asc';
      }
      var params = {
        streamId: stream.id || Openhose.SETTINGS.streamId,
        organizationId: stream.get('organizationId') || Openhose.SETTINGS.organizationId,
        organizationToken: stream.get('organizationToken') || Openhose.SETTINGS.organizationToken,
        userId: stream.get('userId') || Openhose.SETTINGS.userId,
        userToken: stream.get('userToken') || Openhose.SETTINGS.userToken,
        entityTypes: this.get('entityTypes'),
        from: timeframe.start,
        to: timeframe.end,
        limit: this.get('limit'),
        metrics: this.get('metrics'),
        sort: this.get('sort'),
        order: order,
        minVolume: this.get('minVolume'),
        includeStream: true,
        timezone: this.period.timezone(),
        appName: Openhose.SETTINGS.appName
      };
      // Make sure to not send empty values so that APIs and proxies take proper defaults
      for (var key in params) {
        if (params[key] === undefined)
          delete params[key];
      }
      if (this.get('normalizeSampleRate'))
        params.normalizeSampleRate = this.get('normalizeSampleRate');
      if (this.get('filter')) {
        var filter = Openhose._.extend(params.filter || {}, this.get('filter'));
        if (filter.excludeEntities) {
          filter.excludeEntities = filter.excludeEntities.map(function (item) {
            return encodeURIComponent(item.entityType) + ':' + encodeURIComponent(item.id);
          });
        }
        params.filter = filter;
      }
      if (this.get('type') == 'demographics') {
        params.entityTypes = [
          'demographics',
          params.entityTypes
        ].map(encodeURIComponent).join(':');
      }
      if (options.offset) {
        params.limit = options.offset + this.get('limit');
      }
      // if (!params.organizationToken && !params.organizationId) {
      //   if (app.me && app.me.user) {
      //     params.userId = app.me.user.id;
      //     params.userToken = app.me.user.apiToken;
      //   }
      // }
      if (options.entityFilter || options.title) {
        params.entityFilter = (options.entityFilter || options.title).replace(/\*/g, '').toLowerCase();
      }
      return params;
    },
    fetch: function (options) {
      if (this.fetchTimer)
        clearTimeout(this.fetchTimer);
      options = options || {};
      this.trigger('fetch:loading', this);
      if (options.reset)
        this.clean();
      this._fetchMetaDependencies(function () {
        this._fetchApiV3(options);
      }.bind(this));
    },
    release: function () {
      if (this.fetchTimer)
        clearTimeout(this.fetchTimer);
      this.clean();
      AnalyticsData.prototype.release.apply(this, []);
    },
    getLabelForSummary: function (summary) {
      summary = summary.toJSON ? summary.toJSON() : summary;
      var entityType = this.get('entityTypes')[0];
      //TODO: we need an alternative way of doing this
      if (MetaHelper.isSupportedDataType(entityType)) {
        return MetaHelper.getLabel(entityType, summary.id.toLowerCase()) || summary.title;
      }
      //TODO: Replace me, this much too Nerve Center specific
      switch (entityType) {
      case 'tags':
        return '#' + summary.title;
      case 'actors':
        if (summary.network == 'twitter') {
          return '@' + summary.title;
        } else {
          return summary.title;
        }
        break;
      case 'mentions':
        if (summary.network == 'twitter') {
          return '@' + summary.title;
        } else {
          return summary.title;
        }
        break;
      /* disabled in https://trello.com/card/reorganize-and-merge-views/50e88f24a977af843c0023e9/301 something
      case 'types':
        if(bn.semantics && bn.semantics.types) {
          var type = bn.semantics.types[summary.title];
          if(type) {
            return type.name;
          }
        }
        return summary.title;
      */
      default:
        var title = summary.title || summary.id || 'unknown';
        return title.titleize ? title.titleize() : title;
      }
    },
    table: function (mapping, options) {
      var sortMetricId = this.get('sort');
      var labels = {};
      if (!options) {
        options = {};
      }
      for (var id in mapping) {
        labels[id] = mapping[id].label;
        if (!sortMetricId) {
          sortMetricId = id;
        }
      }
      if (options.sort) {
        sortMetricId = options.sort;
      }
      var tableData = {
        labels: labels,
        values: []
      };
      if (!this.collection.length)
        return false;
      for (var i = 0; this.collection.models.length > i; i++) {
        var object = this.collection.at(i).toJSON();
        var valueObject = {
          id: object.id,
          label: options.labelFn && options.labelFn(object) || this.getLabelForSummary(object),
          title: object.title,
          entityType: object.entityType
        };
        if (object.imageUrl) {
          valueObject.imageUrl = object.imageUrl;
        }
        var lastValue = null;
        for (id in mapping) {
          if (mapping[id].getValue) {
            lastValue = mapping[id].getValue(object);
          } else {
            lastValue = object[mapping[id].metricId];
          }
          valueObject[id] = lastValue;
        }
        if (options.filter && !options.filter(valueObject)) {
          continue;
        }
        tableData.values.push(valueObject);
      }
      // Support percentage
      for (var id in mapping) {
        if (mapping[id].percentage) {
          var max = Openhose._.reduce(tableData.values.map(function (value) {
            return value[mapping[id].metricId] || 0;
          }), function (total, num) {
            return total + num;
          }, 0);
          tableData.values.forEach(function (value) {
            value[mapping[id].metricId] = (value[mapping[id].metricId] || 0) / max;
          });
        }
      }
      if (!tableData.values.length)
        return false;
      return tableData;
    },
    _fetchMetaDependencies: function (callback) {
      var entityType = this.get('entityTypes')[0];
      if (MetaHelper.isSupportedDataType(entityType))
        return MetaHelper.fetch(entityType, callback);
      return callback();
    },
    _fetchTrendMetrics: function () {
      if (!this.includeTrendMetricId) {
        this.trigger('fetch:success', this);
        return;
      }
      this.metrics = [];
      var metricId = this.get('metrics')[0];
      // FIXME: do ALL the entities, not just one
      var dimensionId = this.get('entityTypes')[0];
      this.collection.forEach(function (summary) {
        summary = summary.toJSON();
        var trendMetric = new TrendMetric(Openhose._.extend(summary, {
          period: this.period,
          stream: this.stream,
          entityType: dimensionId,
          id: summary.title,
          //metricId: metricId
          metricIds: this.get('metrics')
        }));
        trendMetric.fetch();
        this.metrics.push(trendMetric);
      }.bind(this));
      this._fireSuccessWhenTrendMetricsAreDone();
    },
    _fireSuccessWhenTrendMetricsAreDone: function () {
      var done = true;
      var error = false;
      this.metrics.forEach(function (metric) {
        if (metric.get('fetchState') != 'success') {
          done = false;
        }
        if (metric.get('fetchState') == 'error') {
          error = true;
          return this.trigger('fetch:error', this, 'Could not retrieve metrics for ' + metric.get('name'));
        }
      }.bind(this));
      if (error)
        return;
      if (done) {
        return this.trigger('fetch:success', this);
      } else {
        setTimeout(this._fireSuccessWhenTrendMetricsAreDone.bind(this), 100);
      }
    },
    detectVolume: function (callback) {
      var metric = new Metric({
        stream: this.stream,
        period: this.period,
        ids: ['volume']
      });
      metric.collection.once('reset', function () {
        callback(metric.total('volume'));
      });
      metric.fetch();
    },
    _fetchApiV3: function (options) {
      if (this.request)
        this.request.abort();
      options = options || {};
      if (!Openhose._.isBoolean(options.volumeCheck)) {
        options.volumeCheck = true;
      }
      var params = this.getParamsV3(options);
      var entityType = this.get('entityTypes')[0];
      var self = this;
      if (options.volumeCheck && this.get('sort') == 'netPositiveImpressions') {
        this.detectVolume(function (count) {
          if (count < 1000000) {
            self._fetchApiV3(Openhose._.extend(options, { volumeCheck: false }));
          } else {
            self.collection.trigger('sync');
            self.trigger('fetch:error', self, 'The messages volume is too high for this calculation. Select a smaller timeframe');
          }
        });
        return;
      }
      if (this.get('type') == 'demographics' && [
          'age',
          'brands dressed by',
          'brands eat/drink at',
          'brands shop at',
          'family status',
          'native language',
          'occupations',
          'personal income',
          'religion'
        ].indexOf(entityType) != -1 && this.period.inDays() == 1) {
        this.collection.trigger('sync');
        return this.trigger('fetch:noDataAvailable', this);
      }
      if (this.dateLimit && this.period.inDays() > this.dateLimit) {
        this.collection.trigger('sync');
        //XXX is need a little delay otherwise the widget gets confused, if loading state
        setTimeout(function () {
          this.trigger('fetch:noDataAvailable', this);
        }.bind(this), 0);
        return;
      }
      this.request = API.getUrl(this.getUrl(), params, this._handleApiV3Response.bind(this, options));
    },
    _handleApiV3Response: function (options, error, response) {
      this.request = null;
      if (!this.collection)
        return;
      if (error && error.statusCode) {
        var message = 'Service Unavailable. Please try again later or contact support if this keeps happening.';
        if (error.message.match(/demographic samples/)) {
          message = 'Not enough demographic samples available to provide statistical accuracy. Please try again later or select a different timeframe.';
        }
        this.trigger('fetch:error', this, message);
        return false;
      }
      if (response && response.queued || error && error.statusCode) {
        if (!options.requestCount)
          options.requestCount = 0;
        options.requestCount++;
        options.queued = true;
        if (!this._eventFired && options.requestCount > 25) {
          this._eventFired = true;
          errorLogger('[Dimension] Timeout while fetching', { extra: options });
        }
        this.fetchTimer = setTimeout(this.fetch.bind(this, options), 2000);
        return;
      }
      this.set('count', response.total);
      // Convert to legacy format for now
      var results = response.result;
      var streamTotal = {};
      if (results.length && results[0].entity) {
        for (var i = 0; i < results.length; i++) {
          if (results[i].entity && results[i].entity.entityType == 'stream') {
            streamTotal = results[i].values;
            results.splice(i, 1);
            break;
          }
        }
      }
      this.set('totals', streamTotal);
      results = results.map(function (result) {
        var key;
        var metricId;
        var obj = {
          id: result.entity.id,
          title: result.entity.title || result.entity.id,
          entityType: result.entity.entityType
        };
        if (result.entity.object) {
          for (key in result.entity.object) {
            obj[key] = result.entity.object[key];
          }
          obj.title = obj.title || result.entity.object.id;
        }
        if (result.entity.entityType == 'actors') {
          obj.title = result.entity.object.displayName;
          obj.network = result.entity.object.network;
          obj.imageUrl = result.entity.object.imageUrl;
        }
        if (result.normalizedValues)
          result.values = result.normalizedValues;
        for (metricId in result.values) {
          obj[metricId] = result.values[metricId];
        }
        return obj;
      });
      if (this.get('postProcess'))
        results = results.filter(this.get('postProcess'));
      this.collection.reset(results, { gotoRef: this.collection.last() });
      this.collection.trigger('sync');
      this._fetchTrendMetrics();
      return this.collection;
    }
  });
  Openhose.Dimension = Dimension;
  return Dimension;
}(oh_core, oh_models_analytics_data, oh_models_trend_metric, oh_models_helpers_meta, oh_models_stream_metric, oh_lib_api, oh_lib_error_logger, oh_lib_parse_stream, oh_models_period);
oh_models_main = function (Openhose, Metric, Dimension, Period) {
  var subModules = {};
  subModules.Metric = Metric;
  subModules.Dimension = Dimension;
  subModules.Period = Period;
  Openhose.Models = subModules;
  return Openhose;
}(oh_core, oh_models_metric, oh_models_dimension, oh_models_period);
oh_widgets_analytics_wrapper = function (Openhose, Mapping) {
  return Openhose.Backbone.View.extend({
    className: 'openhose-wrapper',
    modelFetchStates: {
      notLoaded: 'notLoaded',
      loading: 'loading',
      success: 'success',
      error: 'error',
      noDataAvailable: 'noDataAvailable'
    },
    // Options available:
    // ==================
    //
    // view: function() { new Backbone.View(); }      // (required) function that generates the view
    // metrics:                                       // (required*)
    // dimensions:                                    // (required*)
    // dependencies:                                  // (required*)
    //
    // *you need at least one `metrics`, `dimensions` or `dependencies` object
    initialize: function (options) {
      this.options = options;
      this.metrics = options.metrics || [];
      this.dimensions = options.dimensions || [];
      this.dependencies = options.dependencies || [];
      this.processor = options.processor;
      this.loadedView = options.view;
      this.currentlyLoadedView = null;
      this.disableLoadingIndicator = options.disableLoadingIndicator;
      this.allDependencies = [].concat(this.metrics, this.dimensions, this.dependencies);
      this._defineDependencyStates(this.allDependencies);
      this._hookupBindings(this.allDependencies);
      this.on('noData', this._renderNoDataView, this);
    },
    onDestroy: function () {
      this._releasePreviousView();
    },
    _hookupBindings: function (dependencies) {
      Openhose._.each(dependencies, function (model) {
        this.listenTo(model, 'request', this._modelFetchLoading);
        this.listenTo(model, 'fetch:loading', this._modelFetchLoading);
        this.listenTo(model, 'fetch:success', this._modelFetchSuccess);
        this.listenTo(model, 'fetch:error', this._modelFetchFailed);
        this.listenTo(model, 'fetch:noDataAvailable', this._modelFetchNoData);
      }.bind(this), this);
    },
    _defineDependencyStates: function (dependencies) {
      this.dependencyStates = {};
      (dependencies || []).forEach(function (model) {
        this.dependencyStates[model.cid] = model.get('fetchState');  // 'notLoaded', 'loading', 'success', 'error', 'noDataAvailable'
      }.bind(this));
    },
    // querying different states
    _modelFetchLoading: function (model) {
      this.dependencyStates[model.cid] = this.modelFetchStates['loading'];
      //XXX this is to make sure the embeds doesnt flash every 30 secs
      if (!this.disableLoadingIndicator) {
        this._anyModelsLoading() && this.render();
      }
    },
    _modelFetchSuccess: function (model) {
      this.dependencyStates[model.cid] = this.modelFetchStates['success'];
      if (this._allModelsFetchedSuccessfully()) {
        this._renderLoadedView();
      }
    },
    _modelFetchFailed: function (model, message) {
      this.dependencyStates[model.cid] = this.modelFetchStates['error'];
      this._renderModelFetchError(message);
    },
    _modelFetchNoData: function (model) {
      this.dependencyStates[model.cid] = this.modelFetchStates['noDataAvailable'];
      this.trigger('noData', true);
    },
    _allModelsFetchedSuccessfully: function () {
      var success = this.modelFetchStates['success'];
      return Openhose._.all(this.dependencyStates, function (state) {
        return state == success;
      });
    },
    _anyModelsLoading: function () {
      var loading = this.modelFetchStates['loading'];
      return Openhose._.any(this.dependencyStates, function (state) {
        return state == loading;
      });
    },
    _anyModelsNeedLoading: function () {
      var loading = this.modelFetchStates['notLoaded'];
      return Openhose._.any(this.dependencyStates, function (state) {
        return state == loading;
      });
    },
    _anyModelsWithoutDataAvailable: function () {
      var noData = this.modelFetchStates['noDataAvailable'];
      return Openhose._.any(this.dependencyStates, function (state) {
        return state == noData;
      });
    },
    _anyModelsFetchedUnsuccessfully: function () {
      var error = this.modelFetchStates['error'];
      return Openhose._.any(this.dependencyStates, function (state) {
        return state == error;
      });
    },
    _isMappingLoading: function () {
      var mapping = Openhose._.chain(this.allDependencies).map(function (model) {
        if (model.stream)
          return model.stream.get('mapping');
      }).uniq().compact().value();
      return Mapping.isLoading(mapping);
    },
    // Render different view states
    _renderLoadedView: function () {
      this._releasePreviousView();
      var view = this.loadedView();
      if (!view) {
        // No data to render this view...
        return this.trigger('noData', false);
      }
      this.listenTo(view, 'noData', this.trigger.bind(this, 'noData'));
      this.$el.removeClass('no-data');
      this.$el.empty().append(view.el);
      this.processor.process.bind(this)(view);
      view.render();
      this.currentlyLoadedView = view;
    },
    _renderLoadingView: function () {
      if (this.disableLoadingIndicator)
        return;
      this._releasePreviousView();
      this.$el.html('<div class="loading"><span class="icon spinner"></span>Loading</div>');
    },
    _renderPlaceholder: function () {
      this._releasePreviousView();
      this.$el.html('<div class="loading">Data needs fetching...</div>');
    },
    _renderNoDataView: function (periodUnavailable) {
      this._releasePreviousView();
      if (periodUnavailable) {
        this.$el.html('<div class="no-data-message"><h4>Not Available</h4>This view is not available. This might be because the stream you are in does not contain enough data or data variety for this view, or it might be that the timeframe is too small or large. (Try changing the timeframe)</div>');
        this.$el.addClass('no-data');
      } else {
        this.$el.html('<div class="no-data-message"><h4>Not Enough Data</h4><p>There wasn\'t enough data, or variety in data, to render this view (Try changing the timeframe)</p></div>');
        this.$el.addClass('no-data');
      }
    },
    _renderModelFetchError: function (message) {
      this._releasePreviousView();
      this.$el.html('<div class="no-data-message"><h4>Problem detected</h4><p>' + (message || 'Oops an error occurred, please try again later...') + '</p>');
    },
    _releasePreviousView: function () {
      if (!this.currentlyLoadedView)
        return;
      this.currentlyLoadedView.off();
      this.currentlyLoadedView.destroy();
      delete this.currentlyLoadedView;
    },
    // port from marionette to backbone
    render: function () {
      this.onRender();
      return this;
    },
    onRender: function () {
      this.$el.addClass(this.options.cssClass || '');
      if (this._allModelsFetchedSuccessfully()) {
        this._renderLoadedView();
      } else if (this._anyModelsLoading()) {
        this._renderLoadingView();
      } else if (this._anyModelsWithoutDataAvailable()) {
        this.trigger('noData', true);
      } else if (this._anyModelsFetchedUnsuccessfully()) {
        this._renderModelFetchError();
      } else if (this._anyModelsNeedLoading()) {
        this._renderPlaceholder();
      } else if (this._isMappingLoading()) {
        this._renderLoadingView();
      } else {
        console.error('Unexpected case when rendering block view', JSON.stringify(this.dependencyStates));
      }
    },
    destroy: function (keepSharedEl) {
      if (this.isDestroyed)
        return;
      this.trigger.apply(this, ['before:destroy'].concat(arguments));
      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.trigger.apply(this, ['destroy'].concat(arguments));
      // remove the view from the DOM
      if (!keepSharedEl)
        this.remove();
      // remove all listeners
      this.stopListening();
      return this;
    }
  });
}(oh_core, oh_lib_mapping_processor);
oh_text_templates_color_listjson = '{\n  "comparison": ["#1F77B4", "#a4d383"],\n  "gender": ["#619fc9", "#f2a2d0"],\n  "ethnicity": ["#1F77B4", "#AEC7E8", "#FF7F0E", "#FFBB78", "#2CA02C"],\n  "sentiment": ["#6DDE70", "#E86F6F", "#DCE6DD"],\n  "sentiment-heatmap": ["#FA2D2D","#F54242","#F04D4D","#ED5858","#E86161","#E86F6F","#E87979","#E88989","#E69191","#E8A0A0","#E6ACAC","#E6B8B8","#E3C1C1","#E3C5C5","#EDDADA","#F2E9E9","#F5EBEB","#F7F5F5","#DCE6DD","#D3DED3","#C6CFC6","#BACFBA","#A9C9AA","#A5CFA6","#A3D6A4","#92D693","#89D68B","#7ED681","#76DB79","#6DDE70","#63E066","#58E85C","#47ED4B","#3CF040","#28F72D","#1FFF24"],\n  "bottlenose": ["#36a1e8", "#f78f1d", "#1bc9a7", "#ff7bac", "#a65fc3", "#3b526b", "#fecb00", "#a0b2b3", "#f4503f", "#cdd31f", "#9c1581", "#49a708", "#5833fe", "#8d6f61", "#f52782", "#adb88a", "#b22341", "#660a1d", "#c09785", "#2d5b0d", "#1a1a1a", "#4d4d4d", "#808080", "#b3b3b3", "#e6e6e6" ] ,\n  "sentiment-distribution": ["#6DDE70", "#DCE6DD", "#E86F6F"],\n  "sentiment-stacked": ["#FF0000", "#EA9999", "#F4D6D6", "#F3F3F3", "#D9EAD3", "#A0EA92", "#00FF00"]\n}\n';
oh_widgets_base = function (Openhose, Period, Metric, StreamMetric, TrendMetric, Dimension, AnalyticsWrapper, analyticsViews, colorList, MappingProcessor, parseStream) {
  //// Available Parameters
  // el: Openhose.$(".number.widget2"),
  // title: 'Total Volume',
  // data : {
  //   metrics: {
  //     ids: ['volume']
  //   }
  // },
  // cssClass: 'small-height',
  // viewOptions: {label: 'Mentions'},
  // stream: {
  //   id: ...,
  //   organizationToken: ...,
  //   organizationId: ...
  // },
  // period: {
  //   from: 1408367183762,
  //   to: 1410952784336
  // }
  var widgetOptions = [
    'el',
    'options',
    'viewOptions',
    'className',
    'tagName',
    'stream',
    'period',
    'mapping',
    'data',
    'title',
    'processor',
    'enableProgress',
    'colors'
  ];
  var WidgetBase = function (options) {
    // this.cid = Openhose._.uniqueId('widget');
    options || (options = {});
    Openhose._.extend(this, Openhose._.pick(options, widgetOptions));
    if (Openhose._.isNull(this.mapping) || Openhose._.isUndefined(this.mapping)) {
      this.mapping = Openhose.SETTINGS.mapping;
    }
    if (Openhose._.isNull(this.enableProgress) || Openhose._.isUndefined(this.enableProgress)) {
      this.enableProgress = Openhose.SETTINGS.enableProgress;
    }
    // this._ensureElement();
    // this.delegateEvents();
    // grab stream auth set in configurations if it isn't supplied
    if (this.stream)
      this.stream = parseStream(this.stream);
    if (this.stream && !this.stream.get('mapping'))
      this.stream.set('mapping', this.mapping);
    // turns Period into a model
    this.period = Period.parse(this.period);
    // might need moving to the processor
    if (this.data) {
      this.parseDataObject(this.data);
    }
    this.initialize.apply(this, arguments);
  };
  Openhose._.extend(WidgetBase.prototype, Openhose.Backbone.Events, {
    // The default `tagName` of a Widget's element is `"div"`.
    tagName: 'div',
    // The default `className` of a Widget's element is `"openhose-widget"`.
    className: 'openhose-widget',
    // how often do we want the widget to pull in new data
    // measured in milliseconds
    // `0` means don't update
    updateInterval: 0,
    // `enableProgress` (boolean) specifies if you want to show a loading indicator when feeding in new data
    // for best results `enableProgress` should be set to false when `updateInterval` is set to anything other than `0`
    enableProgress: undefined,
    // default is set to `Openhose.SETTINGS.enableProgress`
    // `mapping` (string) specifies what type of mapping you would like to use (see configure.js for more info)
    mapping: undefined,
    // default is set to `Openhose.SETTINGS.mapping`
    // colors you would like to use in the visualization
    // accepts d3 color scales, a string with the name of the predefined color range (see `color-list.json`)
    // also accepts an array of colors (eg. `["#aaffcc", "#ffc355"]`)
    colors: Openhose.d3.scale.category20c(),
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function () {
    },
    // when extending the widget you have to supply the visualization in the view parameter (this has to be a function)
    view: function () {
      console.error('Please supply the widget with a "view" parameter');
    },
    // specify what `Openhose.Processor` is needed to process (and gather the data?)
    processor: function () {
      console.error('Please supply the widget with a "processor" parameter');
    },
    // parses the `data` object and extracts the `dimensions` and `metrics` needed to power the widget
    // TODO: this might be too specific, we might want to break it off and have each widget (or processor) handle this them selves
    parseDataObject: function (data) {
      data = Openhose._.clone(data);
      // TODO: check if we really need these
      this.metrics = this.metrics || [];
      this.metricLabels = this.labels || [];
      this.entities = this.entities || [];
      this.dimensions = [];
      this.pseudoMetrics = this.pseudoMetrics || [];
      this.relativeMetrics = [];
      // TODO_END //
      var self = this;
      if (data.metrics && !Openhose._.isArray(data.metrics))
        data.metrics = [data.metrics];
      if (data.dimensions && !Openhose._.isArray(data.dimensions))
        data.dimensions = [data.dimensions];
      var metrics = data.metrics || [];
      var dimensions = data.dimensions || [];
      delete data.metrics;
      delete data.dimensions;
      metrics.forEach(function (metric) {
        if (metric.cid)
          return self.metrics.push(metric);
        // this is already a real metric, don't tamper with it
        var args = Openhose._.extend({
          period: self.period,
          stream: self.stream
        }, data, metric);
        var comparePeriods = metric.comparePeriods;
        delete metric.comparePeriods;
        if (metric.entityType && metric.metricId) {
          self.metrics.push(new TrendMetric(args));
        } else {
          self.metrics.push(new StreamMetric(args));
        }
        // add an additional metric for the previous period
        if (comparePeriods) {
          args = Openhose._.clone(args);
          args.previousPeriod = true;
          self.metrics.push(new StreamMetric(args));
        }
      });
      dimensions.forEach(function (dimension) {
        if (dimension.cid)
          return self.dimensions.push(dimension);
        // this is already a real dimension, don't tamper with it
        var comparePeriods = dimension.comparePeriods;
        delete dimension.comparePeriods;
        var args = Openhose._.extend({
          stream: self.stream,
          period: self.period
        }, data, dimension);
        self.dimensions.push(new Dimension(args));
        // add an additional dimension for the previous period
        if (comparePeriods) {
          args = Openhose._.clone(args);
          args.previousPeriod = true;
          self.dimensions.push(new Dimension(args));  //TODO put this on the normal dimensions, and do the check somewhere else
        }
      });
    },
    fetch: function () {
      if (this.updateInterval !== 0 && this.updateInterval < 1500) {
        this.trigger('error', new Error('Update Interval cannot be lower than 1500ms'));
        return false;
      }
      // retrieve the mapping if we hadn't already
      if (this.mapping && !MappingProcessor.hasMapping(this.mapping)) {
        return MappingProcessor.loadDefinitions(this.mapping, this.fetch.bind(this));
      }
      // only for 'line', 'area', 'motion-scatter', 'cards' // TODO: remove this after all processors have it
      if (this.dimensions.length && this.processor.dimensionNeedsTrendMetrics) {
        this.dimensions.forEach(function (dimension) {
          dimension.includeTrendMetricId = true;
        });
      }
      // Fetch all
      (this.metrics || []).forEach(function (metric) {
        metric.fetch({ reset: true });
      });
      this.relativeMetrics.forEach(function (metric) {
        metric.fetch({ reset: true });
      });
      (this.dimensions || []).forEach(function (dimension) {
        dimension.fetch({ reset: true });
      });
      if (this.updateInterval) {
        this.fetchTimeout && clearTimeout(this.fetchTimeout);
        this.fetchTimeout = setTimeout(this.fetch.bind(this), this.updateInterval);
      }
    },
    // TODO: move to processors
    validate: function () {
      if (!this.view) {
        this.trigger('error', new Error('Please specify a view for this Analytics View'));
        return false;
      }
      // if (!analyticsViews[this.view]) {
      //   this.trigger('error', new Error("No such analytics view \"" + this.view + "\". Available views: " + Openhose._.keys(analyticsViews).join(', ')));
      //   return false;
      // }
      if (this.updateInterval !== 0 && this.updateInterval < 1500) {
        this.trigger('error', new Error('Update Interval cannot be lower than 1500ms'));
        return false;
      }
      var result = this.processor.validate(this.metrics, this.dimensions);
      var validated = result[0];
      var errorMessage = result[1];
      if (!validated) {
        if (errorMessage) {
          this.trigger('error', new Error(errorMessage));
        } else {
          this.trigger('error', new Error('Unknown error'));
        }
        return false;
      }
      return true;
    },
    resize: function () {
      this.trigger('resize');
      this.render();
    },
    render: function () {
      if (this.analyticsWrapper)
        this.analyticsWrapper.destroy(true);
      var wrapperOptions = Openhose._.extend({
        metrics: [].concat(this.metrics, this.relativeMetrics),
        dimensions: [].concat(this.dimensions),
        view: this.view.bind(this),
        processor: this.processor,
        colors: this.colors,
        className: this.className,
        tagName: this.tagName,
        disableLoadingIndicator: !this.enableProgress
      }, this.viewOptions);
      if (this.el)
        wrapperOptions.el = this.el;
      this.analyticsWrapper = new AnalyticsWrapper(wrapperOptions);
      if (!this.el)
        this.el = this.analyticsWrapper.el;
      this.analyticsWrapper.render();
      return this;
    },
    destroy: function () {
      Openhose._.flatten([
        this.metrics,
        this.dimensions
      ]).forEach(function (object) {
        object && object.release && object.release();
      });
      this.analyticsWrapper && this.analyticsWrapper.destroy();
      delete this.analyticsWrapper;
      Openhose.$(this.el).remove();
      this.fetchTimeout && clearTimeout(this.fetchTimeout);
      this.trigger('destroy');
    },
    getColors: function () {
      var colors = this.colors;
      if (this.colors && typeof this.colors == 'string') {
        colors = this._colorsForColorGroup(this.colors);
      }
      if (this.colors && typeof this.colors == 'object' && this.colors.length) {
        colors = Openhose.d3.scale.ordinal().range(this.colors);
      }
      if (this.colors && typeof this.colors == 'function') {
        colors = this.colors.copy();
      }
      return colors;
    },
    _colorsForColorGroup: function (colorGroup) {
      if (typeof colorList == 'string') {
        colorList = JSON.parse(colorList);
      }
      return Openhose.d3.scale.ordinal().range(colorList[colorGroup]);
    },
    $: function (selection) {
      return this.analyticsWrapper.$(selection);
    }
  });
  WidgetBase.extend = Openhose.Backbone.Model.extend;
  return WidgetBase;  // Original code.
                      // TODO: Remove once we move all Nerve Center widgets in
                      //
                      //////////////////////////////////////////////////////////////////////////////
                      //////////////////////////////////////////////////////////////////////////////
                      //
                      // return Openhose.Backbone.View.extend({
                      //
                      //   className: "wrap",
                      //
                      //   initialize: function(options) {
                      //     this.view = options.view;
                      //     this.stream = options.stream;
                      //
                      //     this.options = options;
                      //     this.metrics = options.metrics || [];
                      //
                      //     this.metricLabels = options.labels || [];
                      //
                      //     this.entities = options.entities || [];
                      //     this.dimensions = [];
                      //     this.timeComparisonMetricIds = options.timeComparisonMetrics || [];
                      //     this.timeComparisonMetrics = [];
                      //     this.pseudoMetrics = options.pseudoMetrics || [];
                      //     this.relativeMetrics = [];
                      //     this.data = options.data;
                      //     this.title = options.title;
                      //     this.viewOptions = options.viewOptions || {};
                      //     this.colors = options.colors;
                      //     this.limit = options.limit;
                      //     this.minVolume = options.minVolume;
                      //     this.includePercentage = options.includePercentage;
                      //     this.dateLimit = options.dateLimit;
                      //
                      //     this.period = options.period;
                      //     this.updateInterval = options.updateInterval;
                      //
                      //     if (this.data) {
                      //       this.parseDataObject(this.data);
                      //     }
                      //
                      //     if(typeof colorList == 'string') {
                      //       colorList = JSON.parse(colorList);
                      //     }
                      //   },
                      //
                      //   parseDataObject: function(data){
                      //     var self = this;
                      //
                      //     if (data.metrics && !Openhose._.isArray(data.metrics)) data.metrics = [data.metrics];
                      //     if (data.dimensions && !Openhose._.isArray(data.dimensions)) data.dimensions = [data.dimensions];
                      //
                      //     (data.metrics || []).forEach(function(metric) {
                      //       var args = Openhose._.extend({
                      //         period: self.period,
                      //         stream: self.stream
                      //       }, metric);
                      //
                      //       var comparePeriods = metric.comparePeriods;
                      //       delete metric.comparePeriods;
                      //
                      //       self.metrics.push(new StreamMetric(args));
                      //       if (comparePeriods) {
                      //         args = Openhose._.clone(args);
                      //         args.previousPeriod = true;
                      //         self.timeComparisonMetrics.push(new StreamMetric(args));
                      //       }
                      //     });
                      //
                      //     (data.dimensions || []).forEach(function(dimension) {
                      //       self.dimensions.push(new Dimension(Openhose._.extend({
                      //         stream: self.stream,
                      //         period: self.period
                      //       }, dimension)));
                      //     });
                      //   },
                      //
                      //   fetch: function() {
                      //     if (this.updateInterval !== 0 && this.updateInterval < 1500) {
                      //       this.trigger('error', new Error("Update Interval cannot be lower than 1500ms"));
                      //       return false;
                      //     }
                      //
                      //     if (this.dimensions.length && this._dimensionNeedsTrendMetrics()) {
                      //       this.dimensions.forEach(function(dimension){
                      //         dimension.includeTrendMetricId = true;
                      //       });
                      //     }
                      //     // Fetch all
                      //     (this.metrics || []).forEach(function(metric) {
                      //       metric.fetch({ reset: true });
                      //     });
                      //
                      //
                      //     this.relativeMetrics.forEach(function(metric) {
                      //       metric.fetch({ reset: true  });
                      //     });
                      //
                      //
                      //     this.timeComparisonMetrics.forEach(function(metric) {
                      //       metric.fetch({ reset: true  });
                      //     });
                      //
                      //     (this.dimensions || []).forEach(function(dimension) {
                      //       dimension.fetch({ reset: true  });
                      //     });
                      //
                      //     if(this.updateInterval) {
                      //       this.fetchTimeout && clearTimeout(this.fetchTimeout);
                      //       this.fetchTimeout = setTimeout(this.fetch.bind(this), this.updateInterval);
                      //     }
                      //   },
                      //
                      //   // TODO: move to processors
                      //   validate: function() {
                      //     if (!this.view) {
                      //       this.trigger('error', new Error("Please specify a view for this Analytics View"));
                      //       return false;
                      //     }
                      //
                      //     if (!analyticsViews[this.view]) {
                      //       this.trigger('error', new Error("No such analytics view \"" + this.view + "\". Available views: " + Openhose._.keys(analyticsViews).join(', ')));
                      //       return false;
                      //     }
                      //
                      //     if (this.updateInterval !== 0 && this.updateInterval < 1500) {
                      //       this.trigger('error', new Error("Update Interval cannot be lower than 1500ms"));
                      //       return false;
                      //     }
                      //
                      //
                      //     var result = analyticsViews[this.view].validate(this.metrics, this.dimensions);
                      //     var validated = result[0];
                      //     var errorMessage = result[1];
                      //
                      //     if (!validated) {
                      //       if (errorMessage) {
                      //         this.trigger('error', new Error(errorMessage));
                      //       } else {
                      //         this.trigger('error', new Error("Uknown error"));
                      //       }
                      //       return false;
                      //     }
                      //
                      //     return true;
                      //   },
                      //
                      //   resize: function(){
                      //     this.render();
                      //   },
                      //
                      //   render: function() {
                      //     this.$el.html('');
                      //     if(this.analyticsWrapper) this.analyticsWrapper.destroy();
                      //
                      //     this.analyticsWrapper = new AnalyticsWrapper(Openhose._.extend({
                      //       metrics: [].concat(this.metrics, this.relativeMetrics, this.timeComparisonMetrics),
                      //       dimensions: this.dimensions,
                      //       view: this._renderView.bind(this),
                      //       viewType: this.view,
                      //       disableLoadingIndicator: this.options.enableProgress === false ? true : false
                      //     }, this.viewOptions));
                      //     this.$el.append(this.analyticsWrapper.render().el);
                      //   },
                      //
                      //   destroy: function() {
                      //     Openhose._.flatten([this.metrics, this.timeComparisonMetrics, this.dimensions]).forEach(function(object) {
                      //       object && object.release && object.release();
                      //     });
                      //     this.analyticsWrapper && this.analyticsWrapper.destroy();
                      //     delete this.analyticsWrapper;
                      //     this.fetchTimeout && clearTimeout(this.fetchTimeout);
                      //     this.remove();
                      //   },
                      //
                      //   _dimensionNeedsTrendMetrics: function() {
                      //     if(this.view == 'line' || this.view == 'area' || this.view == 'motion-scatter' || this.view == 'cards') {
                      //       return true;
                      //     }
                      //     return false;
                      //   },
                      //
                      //   _renderView: function() {
                      //     // Determine colors
                      //     var colors = this.colors;
                      //     if(this.colors && typeof this.colors == 'string') {
                      //       colors = this._colorsForColorGroup(this.colors);
                      //     }
                      //     if(this.colors && typeof this.colors == 'object' && this.colors.length) {
                      //       colors = d3.scale.ordinal().range(this.colors);
                      //     }
                      //
                      //     // colorMap: option to attach colors to specific labels
                      //     // e.g. metric with label: Extremely Negative will always be #FF0000
                      //     // Only used in stacked-bar now, can be spread to others if/when needed
                      //     var colorMap = this.options.colorMap || {};
                      //
                      //     switch(this.view.toLowerCase()) {
                      //       case 'pie':
                      //          return new analyticsViews.Pie(Openhose._.extend({
                      //            dimensions: this.dimensions,
                      //            metrics: this.metrics,
                      //            colors: colors
                      //          }, this.viewOptions));
                      //       //
                      //       // case 'distribution':
                      //       //   return new analyticsViews.distribution(Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'line':
                      //       //   var newOptions = {
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     timeComparisonMetrics: this.timeComparisonMetrics,
                      //       //     period: this.period,
                      //       //     colors: colors
                      //       //   };
                      //       //   var lineOptions = { includePercentage: !!(this.relativeMetrics && this.relativeMetrics.length)};
                      //       //
                      //       //   // Need to solve this in a different way
                      //       //   if (this.metrics && this.metrics.length == 1 && this.metrics[0].get('metricId').match(/rate/i)) {
                      //       //     lineOptions.yFormat = function(value) {
                      //       //       return d3.format('.3f')(value) + '%';
                      //       //     };
                      //       //   }
                      //       //
                      //       //
                      //       //   return new analyticsViews.line(Openhose._.extend(newOptions, Openhose._.extend(lineOptions, this.viewOptions)));
                      //       //
                      //       // case 'stacked-bar':
                      //       //   return new analyticsViews['stacked-bar'](Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     timeComparisonMetrics: this.timeComparisonMetrics,
                      //       //     period: this.period,
                      //       //     colors: colors,
                      //       //     colorMap: colorMap
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'area':
                      //       //   return new analyticsViews.area(Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     timeComparisonMetrics: this.timeComparisonMetrics,
                      //       //     period: this.period,
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //
                      //       case 'number':
                      //         return new analyticsViews.Number(Openhose._.extend({
                      //           label: this.metrics[0].getLabel(),
                      //           metrics: this.metrics,
                      //           period: this.period,
                      //           timeComparisonMetrics: this.timeComparisonMetrics,
                      //           summaryFn: this.options.summaryFn
                      //         }, this.viewOptions));
                      //
                      //
                      //       // case 'gauge':
                      //       //   return new analyticsViews.gauge(Openhose._.extend({
                      //       //     label: this.metrics[0].getLabel(),
                      //       //     metrics: this.metrics,
                      //       //     summaryFn: this.options.summaryFn
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'table':
                      //       //   return new analyticsViews.table(Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     timeComparisonDimensions: this.timeComparisonDimensions,
                      //       //     metrics: this.metrics,
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'motion-scatter':
                      //       //   var metrics =  this.metrics;
                      //       //   //the motion scatter cant really figure out by it self when to use what...
                      //       //   if (this.metrics[0].get('objectType') == 'StreamMetric') {
                      //       //     metrics = this.dimensions && this.dimensions[0] && this.dimensions[0].metrics;
                      //       //   }
                      //       //
                      //       //   if (!metrics) {
                      //       //     metrics = this.metrics;
                      //       //     metrics.forEach(function (m) {
                      //       //       m.title = m.metricId;
                      //       //     });
                      //       //   }
                      //       //   var metricId = this.metrics[0].get('metricId');
                      //       //
                      //       //   return new analyticsViews['motion-scatter'](Openhose._.extend({
                      //       //     metrics: metrics,
                      //       //     xField: metricId,
                      //       //     zField: metricId,
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'geo-vectors':
                      //       //   var geoOptions = {};
                      //       //   if (this.dimensions[0].get('entityTypes')[0] == 'states') {
                      //       //     geoOptions.mapType = 'albers';
                      //       //     geoOptions.zoomFactor = 2;
                      //       //     geoOptions.geoPolygonsFile = "/templates/geo/administrative-regions-level1-USA.json";
                      //       //   }
                      //       //   return new analyticsViews['geo-vectors'](Openhose._.extend({
                      //       //     dimension: this.dimensions[0],
                      //       //     allowMapTypes: true,
                      //       //     colors: colors
                      //       //   }, Openhose._.extend(geoOptions, this.viewOptions)));
                      //       //
                      //       // case 'cards':
                      //       //   return new analyticsViews.cards(Openhose._.extend({
                      //       //     dimension: this.dimensions[0],
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'bar-horizontal':
                      //       //   return new analyticsViews['bar-horizontal'](Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     colors: colors
                      //       //   }, this.viewOptions));
                      //       //
                      //       case 'leaderboard':
                      //          return new analyticsViews.LeaderBoard(Openhose._.extend({
                      //            dimensions: this.dimensions,
                      //            metrics: this.metrics,
                      //            colors: colors
                      //          }, this.viewOptions));
                      //       //
                      //       // case 'psych':
                      //       //   return new analyticsViews.psych(Openhose._.extend({
                      //       //     metrics: this.metrics
                      //       //   }, this.viewOptions));
                      //       //
                      //       // case 'table-graph':
                      //       //   geoOptions = {};
                      //       //   if (this.dimensions.length && this.dimensions[0].get('entityTypes') == 'states') {
                      //       //     geoOptions.mapType = 'albers';
                      //       //     geoOptions.zoomFactor = 2;
                      //       //     geoOptions.geoPolygonsFile = "/templates/geo/administrative-regions-level1-USA.json";
                      //       //   }
                      //       //   return new analyticsViews['table-graph'](Openhose._.extend({
                      //       //     dimensions: this.dimensions,
                      //       //     metrics: this.metrics,
                      //       //     colors: colors
                      //       //   }, Openhose._.extend(geoOptions, this.viewOptions)));
                      //       default:
                      //         console.warn("View '"+this.view+"' does not exist.");
                      //     }
                      //     return false;
                      //   },
                      //
                      //   _colorsForColorGroup: function(colorGroup) {
                      //     return d3.scale.ordinal().range(colorList[colorGroup]);
                      //   }
                      // });
                      // // Openhose.text = colorList;
                      // // Openhose.Widget = view;
}(oh_core, oh_models_period, oh_models_metric, oh_models_stream_metric, oh_models_trend_metric, oh_models_dimension, oh_widgets_analytics_wrapper, oh_visualization_main, oh_text_templates_color_listjson, oh_lib_mapping_processor, oh_lib_parse_stream);
oh_widgets_number = function (Openhose, WidgetBase) {
  var Number = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.Number(this.viewOptions);
    },
    processor: Openhose.Processor.Number
  });
  return Number;
}(oh_core, oh_widgets_base);
oh_widgets_leaderboard = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.LeaderBoard(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.LeaderBoard
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_pie = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.Pie(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.Pie
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_line = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
      this.colors = this.getColors();
    },
    view: function () {
      return new Openhose.Visualization.Line(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.Line
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_area = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
      this.colors = this.getColors();
    },
    view: function () {
      return new Openhose.Visualization.Area(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.Area
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_stacked_bar = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
      this.colors = this.getColors();
    },
    view: function () {
      return new Openhose.Visualization.StackedBar(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.Area
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_table = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.Table(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.Table
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_motion_scatter = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.MotionScatter(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.MotionScatter
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_time_line = function (Openhose, WidgetBase) {
  var Module = WidgetBase.extend({
    initialize: function () {
      this.validate();
      this.fetch();
    },
    view: function () {
      return new Openhose.Visualization.TimeLine(Openhose._.extend({ colors: this.getColors() }, this.viewOptions));
    },
    processor: Openhose.Processor.TimeLine
  });
  return Module;
}(oh_core, oh_widgets_base);
oh_widgets_main = function (Openhose, Number, LeaderBoard, Pie, Line, Area, StackedBar, Table, MotionScatter, TimeLine) {
  var subModules = {};
  subModules.Number = Number;
  subModules.LeaderBoard = LeaderBoard;
  subModules.Pie = Pie;
  subModules.Line = Line;
  subModules.Area = Area;
  subModules.StackedBar = StackedBar;
  subModules.TimeLine = TimeLine;
  subModules.Table = Table;
  subModules.MotionScatter = MotionScatter;
  Openhose.Widget = subModules;
  return Openhose;
}(oh_core, oh_widgets_number, oh_widgets_leaderboard, oh_widgets_pie, oh_widgets_line, oh_widgets_area, oh_widgets_stacked_bar, oh_widgets_table, oh_widgets_motion_scatter, oh_widgets_time_line);
oh_openhose = function (Openhose) {
  return Openhose;
}(oh_core);
root.d3 = oldD3;

root.Rickshaw = oldRickshaw;

if(typeof backbone !== 'undefined') backbone.noConflict();

if(typeof jquery !== 'undefined') jquery.noConflict();

if(typeof underscore !== 'undefined') underscore.noConflict();
return oh_core;
}));